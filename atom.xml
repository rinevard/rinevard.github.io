<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rinevard</title>
  
  
  <link href="http://rinevard.github.io/atom.xml" rel="self"/>
  
  <link href="http://rinevard.github.io/"/>
  <updated>2025-09-24T12:56:28.461Z</updated>
  <id>http://rinevard.github.io/</id>
  
  <author>
    <name>Rinevard</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Assignment 6 Bounding Box</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw6-bounding-box/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw6-bounding-box/</id>
    <published>2025-09-24T09:46:44.000Z</published>
    <updated>2025-09-24T12:56:28.461Z</updated>
    
    <content type="html"><![CDATA[<p>这次的作业要求实现用包围盒来加快光线追踪，再用 BVH 优化。</p><p>首先我们要把 hw5 里的代码复制过来，让我不解的是代码里明明已经提供了 <code>rayTriangleIntersect</code> 函数，PDF 里却还说“将你的光线-三角形相交函数粘贴到此处”，明明直接调用它就好了，如下所示：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> Intersection <span class="token class-name">Triangle</span><span class="token double-colon punctuation">::</span><span class="token function">getIntersection</span><span class="token punctuation">(</span>Ray ray<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Intersection inter<span class="token punctuation">;</span>    <span class="token keyword">float</span> u<span class="token punctuation">,</span> v<span class="token punctuation">,</span> t<span class="token punctuation">;</span>    inter<span class="token punctuation">.</span>happened <span class="token operator">=</span> <span class="token function">rayTriangleIntersect</span><span class="token punctuation">(</span>v0<span class="token punctuation">,</span> v1<span class="token punctuation">,</span> v2<span class="token punctuation">,</span> ray<span class="token punctuation">.</span>origin<span class="token punctuation">,</span> ray<span class="token punctuation">.</span>direction<span class="token punctuation">,</span> t<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>inter<span class="token punctuation">.</span>happened<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        inter<span class="token punctuation">.</span>coords <span class="token operator">=</span> ray<span class="token punctuation">.</span>origin <span class="token operator">+</span> t <span class="token operator">*</span> ray<span class="token punctuation">.</span>direction<span class="token punctuation">;</span>        inter<span class="token punctuation">.</span>normal <span class="token operator">=</span> normal<span class="token punctuation">;</span>        inter<span class="token punctuation">.</span>distance <span class="token operator">=</span> t<span class="token punctuation">;</span>        inter<span class="token punctuation">.</span>obj <span class="token operator">=</span> <span class="token keyword">this</span><span class="token punctuation">;</span>        inter<span class="token punctuation">.</span>m <span class="token operator">=</span> m<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> inter<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后我也不太喜欢代码框架对 <code>IntersectP</code> 的定义，在我看来既然另外两个参数能通过 <code>ray</code> 算出来，就完全没有理由作为参数传入。</p><p>于是我就改成了这个只保留 <code>ray</code> 参数的样子：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">inline</span> <span class="token keyword">bool</span> <span class="token class-name">Bounds3</span><span class="token double-colon punctuation">::</span><span class="token function">IntersectP</span><span class="token punctuation">(</span><span class="token keyword">const</span> Ray<span class="token operator">&amp;</span> ray<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token comment">// invDir: ray direction(x,y,z), invDir=(1.0/x,1.0/y,1.0/z), use this because Multiply is faster that Division</span>    <span class="token keyword">auto</span> tMinVec <span class="token operator">=</span> <span class="token punctuation">(</span>pMin <span class="token operator">-</span> ray<span class="token punctuation">.</span>origin<span class="token punctuation">)</span> <span class="token operator">*</span> ray<span class="token punctuation">.</span>direction_inv<span class="token punctuation">;</span>    <span class="token keyword">auto</span> tMaxVec <span class="token operator">=</span> <span class="token punctuation">(</span>pMax <span class="token operator">-</span> ray<span class="token punctuation">.</span>origin<span class="token punctuation">)</span> <span class="token operator">*</span> ray<span class="token punctuation">.</span>direction_inv<span class="token punctuation">;</span>    <span class="token keyword">float</span> tMinx <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>tMinVec<span class="token punctuation">.</span>x<span class="token punctuation">,</span> tMaxVec<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ray<span class="token punctuation">.</span>t_min<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> tMiny <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>tMinVec<span class="token punctuation">.</span>y<span class="token punctuation">,</span> tMaxVec<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ray<span class="token punctuation">.</span>t_min<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> tMinz <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>tMinVec<span class="token punctuation">.</span>z<span class="token punctuation">,</span> tMaxVec<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ray<span class="token punctuation">.</span>t_min<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> tMaxx <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>tMinVec<span class="token punctuation">.</span>x<span class="token punctuation">,</span> tMaxVec<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ray<span class="token punctuation">.</span>t_max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> tMaxy <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>tMinVec<span class="token punctuation">.</span>y<span class="token punctuation">,</span> tMaxVec<span class="token punctuation">.</span>y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ray<span class="token punctuation">.</span>t_max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> tMaxz <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>tMinVec<span class="token punctuation">.</span>z<span class="token punctuation">,</span> tMaxVec<span class="token punctuation">.</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">float</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>ray<span class="token punctuation">.</span>t_max<span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">float</span> tMin <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tMinx<span class="token punctuation">,</span> tMiny<span class="token punctuation">,</span> tMinz<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> tMax <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span><span class="token punctuation">&#123;</span>tMaxx<span class="token punctuation">,</span> tMaxy<span class="token punctuation">,</span> tMaxz<span class="token punctuation">&#125;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tMin <span class="token operator">&lt;=</span> tMax<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>思路就是计算这个交集：</p><script type="math/tex; mode=display">[t_\text{raymin},t_\text{raymax}]\cap[t_{x, \text{enter}}, t_{x, \text{exit}}]\cap[t_{y, \text{enter}}, t_{y, \text{exit}}]\cap[t_{z, \text{enter}}, t_{z, \text{exit}}]</script><p>对于最后的 <code>getIntersection</code>，小 AI 说可以在发生相交时更新 <code>ray</code> 的 <code>t_max</code>，然后在射线和盒子的交点大于 <code>t_max</code> 时不再检测盒子内部的相交，这可以优化性能。我认为他说得非常有道理，但改起来有点麻烦，就不改了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Intersection <span class="token class-name">BVHAccel</span><span class="token double-colon punctuation">::</span><span class="token function">getIntersection</span><span class="token punctuation">(</span>BVHBuildNode<span class="token operator">*</span> node<span class="token punctuation">,</span> <span class="token keyword">const</span> Ray<span class="token operator">&amp;</span> ray<span class="token punctuation">)</span> <span class="token keyword">const</span><span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>node<span class="token operator">-></span>bounds<span class="token punctuation">.</span><span class="token function">IntersectP</span><span class="token punctuation">(</span>ray<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">Intersection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// leaf node checks ray's intersection with obj  </span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span> <span class="token operator">&amp;&amp;</span> node<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>object <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">Intersection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> node<span class="token operator">-></span>object<span class="token operator">-></span><span class="token function">getIntersection</span><span class="token punctuation">(</span>ray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// parent with only one child returns child's intersection</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>left <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getIntersection</span><span class="token punctuation">(</span>node<span class="token operator">-></span>right<span class="token punctuation">,</span> ray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>node<span class="token operator">-></span>right <span class="token operator">==</span> <span class="token keyword">nullptr</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">getIntersection</span><span class="token punctuation">(</span>node<span class="token operator">-></span>left<span class="token punctuation">,</span> ray<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>     <span class="token comment">// parent with two children returns the closer intersection</span>    <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        Intersection inter1 <span class="token operator">=</span> <span class="token function">getIntersection</span><span class="token punctuation">(</span>node<span class="token operator">-></span>left<span class="token punctuation">,</span> ray<span class="token punctuation">)</span><span class="token punctuation">;</span>        Intersection inter2 <span class="token operator">=</span> <span class="token function">getIntersection</span><span class="token punctuation">(</span>node<span class="token operator">-></span>right<span class="token punctuation">,</span> ray<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inter1<span class="token punctuation">.</span>happened <span class="token operator">&amp;&amp;</span> <span class="token operator">!</span>inter2<span class="token punctuation">.</span>happened<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> <span class="token function">Intersection</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inter1<span class="token punctuation">.</span>happened<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> inter2<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inter2<span class="token punctuation">.</span>happened<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">return</span> inter1<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>inter1<span class="token punctuation">.</span>distance <span class="token operator">&lt;</span> inter2<span class="token punctuation">.</span>distance<span class="token punctuation">)</span> <span class="token operator">?</span> inter1 <span class="token operator">:</span> inter2<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>咱还是在最后放放图图</p><p><img src="/images/learning/open-course/GAMES101/Assignments/hw6/bvh.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次的作业要求实现用包围盒来加快光线追踪，再用 BVH 优化。&lt;/p&gt;
&lt;p&gt;首先我们要把 hw5 里的代码复制过来，让我不解的是代码里明明已经提供了 &lt;code&gt;rayTriangleIntersect&lt;/code&gt; 函数，PDF 里却还说“将你的光线-三角形相交函数粘贴</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Assignments" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Assignments/"/>
    
    
  </entry>
  
  <entry>
    <title>Assignment 5 Raytracing</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw5-raytracing/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw5-raytracing/</id>
    <published>2025-09-22T11:46:16.000Z</published>
    <updated>2025-09-25T12:05:17.850Z</updated>
    
    <content type="html"><![CDATA[<p>如果只是实现要求的话，感觉这会是很无聊的一次作业。为了让事情有趣一点，我们来看看 <code>castRay</code> 函数的实现吧。我们会把作业代码放在文末。</p><h1 id="castRay-函数的分析"><a href="#castRay-函数的分析" class="headerlink" title="castRay 函数的分析"></a>castRay 函数的分析</h1><p>castRay 函数实现了课上讲的光线追踪，它从 <code>orig</code> 打出朝着 <code>dir</code> 方向的射线，并返回颜色。其工作流程如下：</p><ol><li><p>首先，检查当前的递归深度<code>depth</code>。当<code>depth</code>超过场景设定的最大深度<code>scene.maxDepth</code>时，函数返回黑色。这就是开头的代码：</p> <pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span>depth <span class="token operator">></span> scene<span class="token punctuation">.</span>maxDepth<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">return</span> <span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">,</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre></li><li><p>然后，计算射线是否与场景中的任何物体相交。如果没有发生相交，说明射线射向了场景的背景，函数将返回背景颜色。</p></li><li><p>如果射线击中了某个物体，函数将根据该物体的材质类型，进入不同的处理分支计算颜色。接下来我们会分析这些分支。</p></li></ol><p>我们可以看到物体被分为了三种材质，分别是既有镜面反射又有折射的 <code>REFLECTION_AND_REFRACTION</code>、只有反射的 <code>REFLECTION</code>、只有漫反射的 <code>DIFFUSE_AND_GLOSSY</code>。<code>REFLECTION_AND_REFRACTION</code> 和 <code>REFLECTION</code> 部分的代码比较相似，我们就先讨论 <code>REFLECTION_AND_REFRACTION</code> 的代码，再讨论 <code>DIFFUSE_AND_GLOSSY</code> 的代码。</p><h2 id="REFLECTION-AND-REFRACTION"><a href="#REFLECTION-AND-REFRACTION" class="headerlink" title="REFLECTION_AND_REFRACTION"></a>REFLECTION_AND_REFRACTION</h2><p>这里的反射/折射材质自身是没有颜色的，也就是说它们只显示反射/折射后射线打到的点的颜色。所以代码思路比较简单，如果射线打到了这种材质的物体上，它会反射/折射，我们需要计算出反射/折射后的射线打到的颜色，这就对应着下面的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Vector3f reflectionColor <span class="token operator">=</span> <span class="token function">castRay</span><span class="token punctuation">(</span>reflectionRayOrig<span class="token punctuation">,</span> reflectionDirection<span class="token punctuation">,</span> scene<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Vector3f refractionColor <span class="token operator">=</span> <span class="token function">castRay</span><span class="token punctuation">(</span>refractionRayOrig<span class="token punctuation">,</span> refractionDirection<span class="token punctuation">,</span> scene<span class="token punctuation">,</span> depth <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>代码里还考虑了菲涅尔效应来计算反射和折射的比例。菲涅尔效应的公式有点复杂，我们就不讲解了。这里的 <code>kr</code> 就是菲涅尔方程算出的反射系数，<code>hitColor</code> 就是这个点的最终颜色：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> kr <span class="token operator">=</span> <span class="token function">fresnel</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> N<span class="token punctuation">,</span> payload<span class="token operator">-></span>hit_obj<span class="token operator">-></span>ior<span class="token punctuation">)</span><span class="token punctuation">;</span>hitColor <span class="token operator">=</span> reflectionColor <span class="token operator">*</span> kr <span class="token operator">+</span> refractionColor <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> kr<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>我们也会注意到，代码在开头对反射/折射点做了一个小小的偏移，这似乎是为了避免反射/折射时立即打到自己（咱也不确定，这是猜测）</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Vector3f reflectionRayOrig <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token function">dotProduct</span><span class="token punctuation">(</span>reflectionDirection<span class="token punctuation">,</span> N<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span>                              hitPoint <span class="token operator">-</span> N <span class="token operator">*</span> scene<span class="token punctuation">.</span>epsilon <span class="token operator">:</span>                              hitPoint <span class="token operator">+</span> N <span class="token operator">*</span> scene<span class="token punctuation">.</span>epsilon<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们都看到菲涅尔效应的代码了，不如再看看纯反射/纯折射的球是怎样的。注意靠近我们观察者的球，我们可以先把 <code>kr</code> 设为 1 来看看纯反射的结果：</p><p><img src="/images/learning/open-course/GAMES101/Assignments/hw5/reflection_only.png" alt=""></p><p>再来看看纯折射的结果：</p><p><img src="/images/learning/open-course/GAMES101/Assignments/hw5/refraction_only.png" alt=""></p><p>与文末的图比较一下，就会发现菲涅尔效应确实就是反射和折射的叠加。</p><h2 id="DIFFUSE-AND-GLOSSY"><a href="#DIFFUSE-AND-GLOSSY" class="headerlink" title="DIFFUSE_AND_GLOSSY"></a>DIFFUSE_AND_GLOSSY</h2><p>再来看看 <code>DIFFUSE_AND_GLOSSY</code> 部分，这里是正常的 Phong 模型着色。唯一要注意的是，要判断射线打到的点和光源之间有没有物体遮挡，如果有遮挡这里就是阴影。</p><p>我认为这一部分的代码有问题，它只考虑了漫反射分量在不在阴影里，而没考虑镜面反射分量。这里是原本的代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">// 漫反射</span>lightAmt <span class="token operator">+=</span> inShadow <span class="token operator">?</span> <span class="token number">0</span> <span class="token operator">:</span> light<span class="token operator">-></span>intensity <span class="token operator">*</span> LdotN<span class="token punctuation">;</span><span class="token comment">// 镜面反射</span>Vector3f reflectionDirection <span class="token operator">=</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token operator">-</span>lightDir<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>specularColor <span class="token operator">+=</span> <span class="token function">powf</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">dotProduct</span><span class="token punctuation">(</span>reflectionDirection<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>    payload<span class="token operator">-></span>hit_obj<span class="token operator">-></span>specularExponent<span class="token punctuation">)</span> <span class="token operator">*</span> light<span class="token operator">-></span>intensity<span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我想我们应该做这样的修改：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span>inShadow<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 漫反射</span>    lightAmt <span class="token operator">+=</span> light<span class="token operator">-></span>intensity <span class="token operator">*</span> LdotN<span class="token punctuation">;</span>        <span class="token comment">// 镜面反射</span>    Vector3f reflectionDirection <span class="token operator">=</span> <span class="token function">reflect</span><span class="token punctuation">(</span><span class="token operator">-</span>lightDir<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">;</span>    specularColor <span class="token operator">+=</span> <span class="token function">powf</span><span class="token punctuation">(</span>std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span><span class="token number">0.f</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token function">dotProduct</span><span class="token punctuation">(</span>reflectionDirection<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        payload<span class="token operator">-></span>hit_obj<span class="token operator">-></span>specularExponent<span class="token punctuation">)</span> <span class="token operator">*</span> light<span class="token operator">-></span>intensity<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="作业代码"><a href="#作业代码" class="headerlink" title="作业代码"></a>作业代码</h1><p>接下来咱就直接放作业代码了。</p><p>首先是 <code>rayTriangleIntersect</code>：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">bool</span> <span class="token function">rayTriangleIntersect</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector3f<span class="token operator">&amp;</span> v0<span class="token punctuation">,</span> <span class="token keyword">const</span> Vector3f<span class="token operator">&amp;</span> v1<span class="token punctuation">,</span> <span class="token keyword">const</span> Vector3f<span class="token operator">&amp;</span> v2<span class="token punctuation">,</span> <span class="token keyword">const</span> Vector3f<span class="token operator">&amp;</span> orig<span class="token punctuation">,</span>                          <span class="token keyword">const</span> Vector3f<span class="token operator">&amp;</span> dir<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">&amp;</span> tNear<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">&amp;</span> u<span class="token punctuation">,</span> <span class="token keyword">float</span><span class="token operator">&amp;</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> e1 <span class="token operator">=</span> v1 <span class="token operator">-</span> v0<span class="token punctuation">;</span>    <span class="token keyword">auto</span> e2 <span class="token operator">=</span> v2 <span class="token operator">-</span> v0<span class="token punctuation">;</span>    <span class="token keyword">auto</span> s <span class="token operator">=</span> orig <span class="token operator">-</span> v0<span class="token punctuation">;</span>    <span class="token keyword">auto</span> s1 <span class="token operator">=</span> <span class="token function">crossProduct</span><span class="token punctuation">(</span>dir<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> s2 <span class="token operator">=</span> <span class="token function">crossProduct</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> coefficient <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> <span class="token function">dotProduct</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> e1<span class="token punctuation">)</span><span class="token punctuation">;</span>    tNear <span class="token operator">=</span> coefficient <span class="token operator">*</span> <span class="token function">dotProduct</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> e2<span class="token punctuation">)</span><span class="token punctuation">;</span>    u <span class="token operator">=</span> coefficient <span class="token operator">*</span> <span class="token function">dotProduct</span><span class="token punctuation">(</span>s1<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span>    v <span class="token operator">=</span> coefficient <span class="token operator">*</span> <span class="token function">dotProduct</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span> dir<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>tNear <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>u <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span>v <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">&amp;&amp;</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> u <span class="token operator">-</span> v<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>然后是 <code>Render</code> 的部分：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> scene<span class="token punctuation">.</span>width<span class="token punctuation">;</span> <span class="token operator">++</span>i<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// generate primary ray direction</span>    <span class="token keyword">float</span> x<span class="token punctuation">;</span>    <span class="token keyword">float</span> y<span class="token punctuation">;</span>    <span class="token comment">// I don't understand what are the guiding comments talking about.</span>    <span class="token comment">// Anyway, the code is assuming the distance between eye and screen is one, since abs(dir.z) == 1</span>    <span class="token comment">// With this assumption we can compute screen's width and height</span>    <span class="token comment">// Then we map x from [0, scene.width - 1] to [-screen_width / 2, screenwidth / 2]</span>    <span class="token comment">// and map y from [0, scene.height - 1] to [screen_height / 2, -screen_height / 2]</span>    <span class="token keyword">float</span> screen_height <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> scale<span class="token punctuation">;</span>    <span class="token keyword">float</span> screen_width <span class="token operator">=</span> imageAspectRatio <span class="token operator">*</span> screen_height<span class="token punctuation">;</span>        x <span class="token operator">=</span> <span class="token punctuation">(</span>screen_width <span class="token operator">/</span> <span class="token punctuation">(</span>scene<span class="token punctuation">.</span>width <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token punctuation">(</span>screen_width <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span>screen_height <span class="token operator">/</span> <span class="token punctuation">(</span>scene<span class="token punctuation">.</span>height <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">0.5</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>screen_height <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Vector3f dir <span class="token operator">=</span> <span class="token function">normalize</span><span class="token punctuation">(</span><span class="token function">Vector3f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// Don't forget to normalize this direction!</span>    framebuffer<span class="token punctuation">[</span>m<span class="token operator">++</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">castRay</span><span class="token punctuation">(</span>eye_pos<span class="token punctuation">,</span> dir<span class="token punctuation">,</span> scene<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看结果吧！如果和前面的纯反射/纯折射对照，会发现前面的球确实就是反射和折射的叠加（反射很淡，不过仔细看也是能看出来的！）</p><p><img src="/images/learning/open-course/GAMES101/Assignments/hw5/binary.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;如果只是实现要求的话，感觉这会是很无聊的一次作业。为了让事情有趣一点，我们来看看 &lt;code&gt;castRay&lt;/code&gt; 函数的实现吧。我们会把作业代码放在文末。&lt;/p&gt;
&lt;h1 id=&quot;castRay-函数的分析&quot;&gt;&lt;a href=&quot;#castRay-函数的分析&quot; cl</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Assignments" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Assignments/"/>
    
    
  </entry>
  
  <entry>
    <title>Assignment 4 Geometry</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw4-geometry/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw4-geometry/</id>
    <published>2025-09-22T11:44:16.000Z</published>
    <updated>2025-09-22T11:44:41.718Z</updated>
    
    <content type="html"><![CDATA[<p>这次作业过于简单，我们直接放代码。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">cv<span class="token double-colon punctuation">::</span>Point2f <span class="token function">recursive_bezier</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> <span class="token operator">&amp;</span>control_points<span class="token punctuation">,</span> <span class="token keyword">float</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO: Implement de Casteljau's algorithm</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>control_points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> control_points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> t <span class="token operator">*</span> control_points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> new_control_points <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> control_points<span class="token punctuation">.</span><span class="token function">size</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        new_control_points<span class="token punctuation">.</span><span class="token function">push_back</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> control_points<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> t <span class="token operator">*</span> control_points<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token function">recursive_bezier</span><span class="token punctuation">(</span>new_control_points<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">bezier</span><span class="token punctuation">(</span><span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Point2f<span class="token operator">></span> <span class="token operator">&amp;</span>control_points<span class="token punctuation">,</span> cv<span class="token double-colon punctuation">::</span>Mat <span class="token operator">&amp;</span>window<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// TODO: Iterate through all t = 0 to t = 1 with small steps, and call de Casteljau's </span>    <span class="token comment">// recursive Bezier algorithm.</span>    <span class="token keyword">float</span> step <span class="token operator">=</span> <span class="token number">0.001</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">float</span> t <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> t <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">;</span> t <span class="token operator">+=</span> step <span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">auto</span> point <span class="token operator">=</span> <span class="token function">recursive_bezier</span><span class="token punctuation">(</span>control_points<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">;</span>        window<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">at</span><span class="token generic class-name"><span class="token operator">&lt;</span>cv<span class="token double-colon punctuation">::</span>Vec3b<span class="token operator">></span></span></span><span class="token punctuation">(</span>point<span class="token punctuation">.</span>y<span class="token punctuation">,</span> point<span class="token punctuation">.</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>另外，由于咱以前在 Godot 里导入字体时见过多通道符号距离场的设置，而且发现开启多通道符号距离场的字体显示清晰了一大截，所以我找了找一些关于 SDF 的资料，感觉这个不错：<a href="https://www.xianlongok.site/post/4625ed6a/#SDF-font">动态 SDF 字体渲染方法 | 十三</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这次作业过于简单，我们直接放代码。&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-cpp&quot; data-language=&quot;cpp&quot;&gt;&lt;code class=&quot;language-cpp&quot;&gt;cv&lt;span class=&quot;token double-c</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Assignments" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Assignments/"/>
    
    
  </entry>
  
  <entry>
    <title>Note 4 Geometry</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note4-Geometry/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note4-Geometry/</id>
    <published>2025-09-19T12:10:28.000Z</published>
    <updated>2025-09-19T12:13:54.595Z</updated>
    
    <content type="html"><![CDATA[<p>课上只是简单提了下几何专题，我也认为这个专题相较于别的几个没那么重要，所以只是记一下隐式表示和参数表示的相关内容，再简单提一句网格处理。</p><h1 id="隐式表示和参数表示"><a href="#隐式表示和参数表示" class="headerlink" title="隐式表示和参数表示"></a>隐式表示和参数表示</h1><p>对一个几何图形，我们一般有两种表示方法，一种是用普通方程 $f(x,y,z)=0$ 来表示，另一种是用参数方程 $g(u,v)=(x,y,z)$ 来表示。前者是隐式表示，因为不能方便地求出这个方程表示的所有点；后者是参数表示，通过参数 $(u,v)$ 的变化可以轻易求出这个方程表示的所有点。</p><p>不过隐式表示也有优点，它能很方便地判断一个点 $(x,y,z)$ 是否在曲线上 / 曲线内 / 曲线外。接下来我们看看隐式表示和参数表示的代表应用。</p><h2 id="隐式表示：符号距离场"><a href="#隐式表示：符号距离场" class="headerlink" title="隐式表示：符号距离场"></a>隐式表示：符号距离场</h2><p>符号距离场（Signed Distance Filed, SDF）是隐式表示的代表应用之一，自 2007 年 Valve 的论文以来，它一直被用于游戏内的文本渲染。虽然现在用的更多是多通道符号距离场（MSDF），但我们这里只简单介绍下符号距离场，因为后者更加复杂。</p><p>符号距离场就是带符号的距离场，对给定的点 $(u,v)$，我们记录它到图形的最近距离——如果它在图形内部（图形的线条是有宽度的，这个内部指在线条内而非几何闭环内），距离为正值，否则为负值。</p><p>在 V 社的论文中，他们先对矢量文字做了光栅化得到了 $4096\times 4096$ 的图像，然后基于这张图得到了 $64\times 64$ 的符号距离场。</p><p>下图展示了原图和符号距离场。图像不透明度是在 $[0,1]$ 间的非负数，为了可视化符号距离场，我们把距离为正的内部映射到 $(0.5, 1]$，距离为 $0$ 的边缘被映射到 $0.5$，距离为负的外部映射到 $[0, 0.5)$.</p><p><img src="/images/learning/open-course/GAMES101/Notes/note4/sdf.png" alt=""></p><p>得到了符号距离场之后，我们就能对任何一个点插值出它与图形的距离，然后根据这个距离决定它是否显示出来。我们之前已经提过了距离到不透明度的映射，我们可以简单设置一个阈值来决定是否显示某个像素：</p><pre class="line-numbers language-glsl" data-language="glsl"><code class="language-glsl">baseColor<span class="token punctuation">.</span>a <span class="token operator">=</span> distAlphaMask <span class="token operator">>=</span> <span class="token number">0.5</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我个人的思考是，不要因为我们可视化了符号距离场就把它当作图像。它本质上是一个距离函数 $d(u,v)$，我们的 $64\times 64$ 的 SDF 图像的每个像素表示的不是“平均颜色”，而是“像素中心点到图形的距离”。要把它看作点，而非方块。</p><h2 id="参数表示：贝塞尔曲线和曲面"><a href="#参数表示：贝塞尔曲线和曲面" class="headerlink" title="参数表示：贝塞尔曲线和曲面"></a>参数表示：贝塞尔曲线和曲面</h2><p>贝塞尔曲线和曲面是参数表示的很好例子，我们先来看看计算贝塞尔曲线的常用算法和一般公式。</p><h3 id="贝塞尔曲线"><a href="#贝塞尔曲线" class="headerlink" title="贝塞尔曲线"></a>贝塞尔曲线</h3><p>常用的生成贝塞尔曲线的 Casteljau Algorithm 如下，我们以四个点求三阶贝塞尔曲线为例：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bezier</span><span class="token punctuation">(</span>t<span class="token punctuation">:</span> <span class="token builtin">float</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 第一层线性插值</span>    p0_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> p0 <span class="token operator">+</span> t <span class="token operator">*</span> p1    p1_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> p1 <span class="token operator">+</span> t <span class="token operator">*</span> p2    p2_1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> p2 <span class="token operator">+</span> t <span class="token operator">*</span> p3    <span class="token comment"># 第二层线性插值</span>    p0_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> p0_1 <span class="token operator">+</span> t <span class="token operator">*</span> p1_1    p1_2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> p1_1 <span class="token operator">+</span> t <span class="token operator">*</span> p2_1    <span class="token comment"># 第三层（最后一层）线性插值</span>    p_final <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> p0_2 <span class="token operator">+</span> t <span class="token operator">*</span> p1_2    <span class="token keyword">return</span> p_final<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看看这个算法也就知道贝塞尔曲线是怎么来的了。</p><p>三阶公式是</p><script type="math/tex; mode=display">\mathbf{B}(t) = (1-t)^3 \mathbf{P}_0 + 3(1-t)^2 t \mathbf{P}_1 + 3(1-t) t^2 \mathbf{P}_2 + t^3 \mathbf{P}_3</script><p>一般的 $n$ 阶公式是</p><script type="math/tex; mode=display">\mathbf{B}(t) = \sum_{i=0}^{m} \binom{m}{i} (1-t)^{m-i} t^i \mathbf{P}_i</script><p>下图中，左图是 Godot 里的 Curve，它就用到了贝塞尔曲线；右图贝塞尔曲线的生成方法，和上面提到的 Casteljau Algorithm 一致。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note4/bezier.png" alt=""></p><p>再看看左图，我们会发现它是由三个贝塞尔曲线拼接而成的，而且看起来很平滑，这就是所谓的“分段贝塞尔曲线”。高阶贝塞尔曲线不容易控制，所以我们更倾向于把几个低阶贝塞尔曲线拼接起来形成复杂曲线。</p><h3 id="贝塞尔曲面"><a href="#贝塞尔曲面" class="headerlink" title="贝塞尔曲面"></a>贝塞尔曲面</h3><p>我们同样用 Casteljau Algorithm 生成贝塞尔曲面：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_de_casteljau_1d</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""对一维点序列执行 Casteljau 算法。"""</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>points<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">:</span>        points <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> t<span class="token punctuation">)</span> <span class="token operator">*</span> p1 <span class="token operator">+</span> t <span class="token operator">*</span> p2 <span class="token keyword">for</span> p1<span class="token punctuation">,</span> p2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>points<span class="token punctuation">,</span> points<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> points<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">bezier_surface</span><span class="token punctuation">(</span>control_points<span class="token punctuation">,</span> u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算贝塞尔曲面上的一点。"""</span>    intermediate_points <span class="token operator">=</span> <span class="token punctuation">[</span>_de_casteljau_1d<span class="token punctuation">(</span>row<span class="token punctuation">,</span> u<span class="token punctuation">)</span> <span class="token keyword">for</span> row <span class="token keyword">in</span> control_points<span class="token punctuation">]</span>    final_point <span class="token operator">=</span> _de_casteljau_1d<span class="token punctuation">(</span>intermediate_points<span class="token punctuation">,</span> v<span class="token punctuation">)</span>    <span class="token keyword">return</span> final_point<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如下图中的右图所示，我们本质上是先沿着一个轴向生成一组贝塞尔曲线，再在曲线上取值生成一组新的控制点，然后用这组新控制点定义一条新的曲线，最后在新的曲线上取值得到曲面上的最终点。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note4/bezier_surface.png" alt=""></p><h1 id="网格处理"><a href="#网格处理" class="headerlink" title="网格处理"></a>网格处理</h1><p>生成三角形网格后，我们经常还希望做一些处理，比如细分来让模型更光滑；减少三角形数量来简化网格。下面简单提一下网格细分和网格简化的常用算法。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note4/mesh_operation.png" alt=""></p><h2 id="网格细分"><a href="#网格细分" class="headerlink" title="网格细分"></a>网格细分</h2><p>网格细分算法的绝对主流是 Catmull-Clark 细分，Blender 的表面细分修改器的默认算法就是这个。它可以细分任意形状的多边形，但在细分四边形时效果最好。</p><p>课上还提到了用于细分三角形的 Loop 细分，不过两个细分都只是简单提了提概念，我们这里不多记笔记。</p><h2 id="网格简化"><a href="#网格简化" class="headerlink" title="网格简化"></a>网格简化</h2><p>网格简化的基本思路是每次把一条边坍缩成一个点。我们用二次误差衡量每条边坍缩后引入的误差，然后选择最小的边来坍缩，之后重新计算二次误差（因为坍缩后形状会改变），然后再次选择最小的边，如此重复。这是个贪婪算法，但能拿到不错的结果。</p><p>具体公式我们也不写，因为课上没详细讲，我也不感兴趣，用到的时候去查查就好了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;课上只是简单提了下几何专题，我也认为这个专题相较于别的几个没那么重要，所以只是记一下隐式表示和参数表示的相关内容，再简单提一句网格处理。&lt;/p&gt;
&lt;h1 id=&quot;隐式表示和参数表示&quot;&gt;&lt;a href=&quot;#隐式表示和参数表示&quot; class=&quot;headerlink&quot; title</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Note 3 Shading</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note3-Shading/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note3-Shading/</id>
    <published>2025-09-17T04:10:28.000Z</published>
    <updated>2025-09-17T04:03:13.842Z</updated>
    
    <content type="html"><![CDATA[<h1 id="יְהִי-אוֹר"><a href="#יְהִי-אוֹר" class="headerlink" title="יְהִי אוֹר"></a>יְהִי אוֹר</h1><p>起初，计算机的世界尚未渲染，显示器中空虚混沌，渊面黑暗。</p><p>唯有顶点与多边形悬于虚空，不见其形，不辨其色。</p><p>那声音说：<strong>“要有光。”</strong></p><p>就有了光。</p><p>光是好的，于是那声音将光与暗分开了。光所照之处，物体的正面得以显现；光所不至的背面，则归于阴影。从此，三维的世界有了明暗与层次。</p><p>这光并非一体。</p><p>那普照万物，均匀散开，使物体显其本色的，称之为<strong>漫反射</strong>。</p><p>那汇于一点，锐利夺目，使光滑之物尽显其耀的，称之为<strong>镜面反射</strong>。</p><p>那弥漫于环境，充盈于阴影，使黑暗不至完全吞噬一切的，称之为<strong>环境光</strong>。</p><p>有漫反射，有镜面反射，有环境光，共同构成了这虚拟世界的第一个白昼。</p><h2 id="漫反射（Diffuse-Reflection）"><a href="#漫反射（Diffuse-Reflection）" class="headerlink" title="漫反射（Diffuse Reflection）"></a>漫反射（<strong>Diffuse Reflection）</strong></h2><p>在漫反射中，光向四面八方散去，所以物体漫反射出的光与摄像机位置无关，而仅与以下几项有关：</p><ol><li>光强 $c_l$.</li><li>物体材质 $c_r$. 不同物体对光的反射率是不同的，即使是同一个物体也对不同颜色的光有不同反射率。</li><li>物体表面法线 $\mathbf{n}$.</li><li>光源方向 $\mathbf{l}$.</li></ol><p>最终结果可以写成 </p><script type="math/tex; mode=display">L_d = c_r c_l \max (0, \mathbf{n} \cdot \mathbf{l})</script><p>由于光强一般随距离衰减，所以 $c_l$ 一般反比于距离的平方 $r^2$. </p><h2 id="镜面反射（Specular-Reflection）"><a href="#镜面反射（Specular-Reflection）" class="headerlink" title="镜面反射（Specular Reflection）"></a>镜面反射（Specular Reflection）</h2><p>镜面反射中，光主要向一个方向反射，所以镜面反射的光与摄像机位置有关。</p><script type="math/tex; mode=display">L_s = c_pc_l\max(0, \mathbf n \cdot \mathbf h)^p</script><p>其中 $c_p$ 是自定义的 RGB 值，允许我们控制高光颜色，指数 $p$ 是为了保证我们只在小范围内看到高光，$p$ 越大这个高光可见范围越小，而 $\mathbf h$ 的定义如下：</p><script type="math/tex; mode=display">\mathbf h = (\mathbf e + \mathbf l).\text{normalized()}</script><p>还有一种写法把 $\mathbf n \cdot \mathbf h$ 换成了 $\mathbf r \cdot \mathbf e$，简单计算可以发现 $\mathbf<br>n$ 和 $\mathbf h$ 的夹角是 $\mathbf r$ 和 $\mathbf e$ 的夹角的一半，所以这两个写法在思路上是一样的，都在考虑反射光方向和摄像机方向的夹角，不过在数值上会略有差别。本文采用 $\mathbf n \cdot \mathbf h$ 的写法。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note3/specular.png" alt=""></p><h2 id="环境光（Ambient-Lighting）"><a href="#环境光（Ambient-Lighting）" class="headerlink" title="环境光（Ambient Lighting）"></a>环境光（Ambient Lighting）</h2><p>如果只考虑漫反射和镜面反射，我们会发现没有面朝光源的物体完全是黑色的，但现实里显然不是如此。这是因为在现实里，光经过多次反射而照亮了那些没有面朝光源的物体。我们可以近似地认为有一种充斥着整个空间的光，并把它叫做环境光，公式如下：</p><script type="math/tex; mode=display">L_a=c_r c_a</script><p>其中 $c_a$ 是环境光的强度。</p><h2 id="冯氏光照模型"><a href="#冯氏光照模型" class="headerlink" title="冯氏光照模型"></a>冯氏光照模型</h2><p>综合来看，我们就得到了<strong>冯氏光照模型</strong>，公式如下：</p><script type="math/tex; mode=display">L=c_r(c_a+c_l\max{(0,\mathbf n \cdot \mathbf l)})+c_pc_l\max(0, \mathbf n \cdot \mathbf h)^p</script><p>其中 </p><ol><li>$c_r$ 是物体材质，表示物体对光的反射率，一般是一个 Vector3f 类型的值，因为物体对不同颜色的光有不同反射率；</li><li>$c_a$ 是环境光强，一般是一个 Vector3f 类型的值；</li><li>$c_l$ 是光强，一般与物体和光源的距离成反比，一般是一个 Vector3f 类型的值；</li><li>$c_p$ 是高光颜色，一般也是一个 Vector3f 类型的值。</li></ol><h1 id="UV映射"><a href="#UV映射" class="headerlink" title="UV映射"></a>UV映射</h1><p>为了把贴图贴到模型上，需要有一个 $(x, y, z) \rightarrow (u, v)$ 的函数 $\phi$. 我们期望这个函数有这些性质：</p><ol><li>单射：我们不希望两个 3D 点映射到同一个 2D 点上</li><li>大小不变性：在 3D 模型上的三角形多大，我们希望 2D 的三角形也差不多大小</li><li>形状不变性：3D 模型的三角形映射到 2D 上后，两个三角形应尽量相似</li><li>连续：如果两个点在 3D 世界模型上相近，我们希望它们在 2D 上也相近</li></ol><p>贴图有许多应用，最容易想到的是颜色贴图，它直接把颜色贴到模型上，也被称作漫反射贴图。</p><p>法线贴图、金属度贴图、粗糙度贴图则进一步决定了模型的各种属性。比如法线贴图定义了每一点的法线，在计算光照时会借助这个法线来得到更真实的结果。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note3/normal-map.jpg" alt=""></p><h1 id="着色方法"><a href="#着色方法" class="headerlink" title="着色方法"></a>着色方法</h1><p>模型由三角形划分来表示，那么每个三角形用怎样的颜色呢？</p><h2 id="平面着色（Flat-Shading）"><a href="#平面着色（Flat-Shading）" class="headerlink" title="平面着色（Flat Shading）"></a>平面着色（Flat Shading）</h2><p>我们通过光照计算颜色，而计算光照需要法线。平面着色直接求这个三角形的法线，然后按光照公式计算这个三角形的颜色。这种方法得到的每个三角形都是单色的。</p><h2 id="逐顶点着色（Gouraud-Shading）"><a href="#逐顶点着色（Gouraud-Shading）" class="headerlink" title="逐顶点着色（Gouraud Shading）"></a>逐顶点着色（Gouraud Shading）</h2><p>逐顶点着色则求三角形顶点的法线，并为三角形顶点着色，然后对内部的每个点插值内部颜色。</p><p>那么顶点的法线是什么呢？一个顶点一般在多个面上，把这些面的法线做加权平均就好，权值可以是面的面积。</p><h2 id="逐像素着色（Phong-Shading）"><a href="#逐像素着色（Phong-Shading）" class="headerlink" title="逐像素着色（Phong Shading）"></a>逐像素着色（Phong Shading）</h2><p>逐像素着色同样求三角形顶点的法线，然后对内部的每个点插值内部法线，从法线再求各个点的颜色。</p><p>插值是通过重心坐标来插值。对三角形 $ABC$ 内的某一点 $P$，它可以表示为</p><script type="math/tex; mode=display">P=\frac{S_{APB}C+S_{BPC}A+S_{CPA}B}{S_{ABC}}</script><p>这里的 $S$ 是面积，这里的形如 $S<em>{APB}/S</em>{ABC}$ 的式子就是各个点的权值。</p><p>在插值时，我们希望在世界空间 / 摄像机空间做插值，即在 viewing transformation 前进行插值，而不是 viewing transformation 后。</p><p>但我们一般在光栅化时才进行插值，这时已经把物体变换到了 NDC 空间，所以我们还要进行透视矫正。公式如下，具体推导可以参考 Homework 3 的笔记。</p><script type="math/tex; mode=display">\begin{align*}&\alpha = \frac{\alpha' / w_0}{\alpha' / w_0 + \beta' / w_1 + \gamma' / w_2}\\&\beta= \frac{\beta' / w_1}{\alpha' / w_0 + \beta' / w_1 + \gamma' / w_2}\\&\gamma= \frac{\gamma' / w_2}{\alpha' / w_0 + \beta' / w_1 + \gamma' / w_2}\end{align*}</script><p>其中 $\alpha’,\beta’,\gamma’$ 是屏幕空间的重心坐标，$\alpha,\beta,\gamma$ 是世界空间的重心坐标。我们用世界空间的重心坐标作为权重来插值。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note3/shading-freq.png" alt=""></p><h1 id="渲染管线"><a href="#渲染管线" class="headerlink" title="渲染管线"></a>渲染管线</h1><p>渲染流程基本如下：</p><ol><li>Input：输入 3D 世界的顶点</li><li>Vertex Processing：用各种变换矩阵把顶点变换到屏幕空间</li><li>Triangle Processing：根据传入的顶点连接方式在屏幕空间连接三角形</li><li>Rasterization：把三角形转化成片元 / 像素</li><li>Fragement Processing：应用贴图、光照等</li><li>Framebuffer Operations：深度测试等</li></ol><p><img src="/images/learning/open-course/GAMES101/Notes/note3/pipeline.png" alt=""></p><h1 id="纹理放大和纹理缩小"><a href="#纹理放大和纹理缩小" class="headerlink" title="纹理放大和纹理缩小"></a>纹理放大和纹理缩小</h1><p>在做纹理映射时，贴图太小和贴图太大都会有问题。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note3/mag-minification.png" alt=""></p><h2 id="纹理放大"><a href="#纹理放大" class="headerlink" title="纹理放大"></a>纹理放大</h2><p>贴图太小时要做纹理放大，对采样点做双线性插值即可。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note3/upsample.png" alt=""></p><h2 id="纹理缩小"><a href="#纹理缩小" class="headerlink" title="纹理缩小"></a>纹理缩小</h2><p>贴图太大时直觉上比贴图太小更好处理，但恰恰相反。还记得频谱吗，贴图太大代表高频有更多信息，我们会因采样频率不足而无法正确反映高频信息，导致结果出现锯齿、摩尔纹等走样问题。</p><p>最常用的缓解方法是 Mipmapping。基本思路是，我们分析屏幕上每个像素在贴图上覆盖的像素数量，对那些覆盖较多的，就让他们去被缩小的贴图上采样，这样就能缓解欠采样问题。</p><p>首先我们要创建“缩小的贴图”，Mipmap链包含一系列纹理 $D_0, D_1, D_2, \ldots, D_N$，其中 $D_i$ 的分辨率为 $\frac{W}{2^i} \times \frac{H}{2^i}$，直到最内层为 $1 \times 1$ 像素。</p><p>然后我们要分析单个屏幕像素覆盖了多少纹理像素，大致思路是计算屏幕空间的相邻点映射到贴图空间后的距离。贴图空间里相邻像素距离为 $1$，所以如果屏幕空间的相邻点映射到贴图空间后的距离为 $x$，我们就认为它覆盖了 $x$ 个像素。</p><p>这个“单个屏幕像素覆盖了多少纹理像素”的估算被记作 $\rho$，公式如下：</p><script type="math/tex; mode=display">\rho = \max\left( \sqrt{\left(\frac{\partial u}{\partial x}\right)^2 + \left(\frac{\partial v}{\partial x}\right)^2}, \sqrt{\left(\frac{\partial u}{\partial y}\right)^2 + \left(\frac{\partial v}{\partial y}\right)^2} \right)</script><p>取 $\max$ 是为了尽可能取层级更低的 Mipmap。一个屏幕像素覆盖的纹理像素越多，它对应的 Mipmap 层级就越小。总之，我们宁可模糊，也不要欠采样。</p><p>最后用 $\lambda = \log_2{\rho}$ 就能算出这个屏幕像素对应的纹理层级。比如当 $\lambda = 0$ 时，表示一个屏幕像素恰好对应一个纹理像素，应使用原始纹理 $D_0$.</p><p><img src="/images/learning/open-course/GAMES101/Notes/note3/downsample.png" alt=""></p><p>计算出层级 $\lambda$ 后还要做采样。显然 $\lambda$ 大多数时候都不是整数，所以有两种常见的采样方法：</p><ol><li><p>最近邻Mipmap滤波（Nearest Mipmap Filtering）</p><p> 选择最接近 $\lambda$ 的整数层级 $d = \text{round}(\lambda)$ 做采样，在这一层可以是最近邻或双线性滤波。</p></li><li><p>三线性滤波（Trilinear Filtering）</p><p> 确定 $\lambda$ 两侧的两个整数层级：$d_1 = \lfloor\lambda\rfloor$ 和 $d_2 = \lceil\lambda\rceil = d_1 + 1$，在这两层分别做双线性滤波采样得到颜色 $C_1$ 和 $C_2$，然后得到最终颜色</p><script type="math/tex; mode=display"> C = (1 - f) \cdot C_1 + f \cdot C_2</script><p> 其中 $f = \lambda - \lfloor\lambda\rfloor$ 为 $\lambda$ 的小数部分。</p></li></ol><h1 id="其他小知识"><a href="#其他小知识" class="headerlink" title="其他小知识"></a>其他小知识</h1><p>虎书提到的planar projection、spherical coordinates、cylindrical coordinates、cubemaps本质上都是把3d表面投影到一个理想的简单几何体上，然后把简单几何体展开成平面。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;יְהִי-אוֹר&quot;&gt;&lt;a href=&quot;#יְהִי-אוֹר&quot; class=&quot;headerlink&quot; title=&quot;יְהִי אוֹר&quot;&gt;&lt;/a&gt;יְהִי אוֹר&lt;/h1&gt;&lt;p&gt;起初，计算机的世界尚未渲染，显示器中空虚混沌，渊面黑暗。&lt;/p&gt;
&lt;p&gt;唯有</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Assignment 3 Pipeline and Shading</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw3-pipeline-and-shading/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw3-pipeline-and-shading/</id>
    <published>2025-09-13T11:45:16.000Z</published>
    <updated>2025-09-13T12:04:25.374Z</updated>
    
    <content type="html"><![CDATA[<p>本次作业对 bump_fragment_shader、displacement_fragment_shader 的要求非常不严谨，至少包括这些问题：</p><ol><li>这两个 shdaer 需要的贴图是凹凸贴图，凹凸贴图本应该是灰度图，这里使用 RGB 贴图。</li><li>在计算切线空间到世界空间的变换矩阵 TBN 时使用了错误的公式。正确的公式需要知道三角形的三个顶点及其 UV 坐标。</li><li>displacement 方法没有在光栅化前偏移顶点位置，而只调整了显示颜色。</li></ol><p>我们先介绍一下 TBN 的正确计算方式和从 bump texture 算出梯度的方法，再依次介绍一下各个作业的做法。</p><h1 id="TBN的正确计算方式"><a href="#TBN的正确计算方式" class="headerlink" title="TBN的正确计算方式"></a>TBN的正确计算方式</h1><p>我们先来看看什么是 TBN 以及为什么需要 TBN. 为了简单起见，我们先考虑法线贴图。下文把世界空间里按法线贴图修正后的法线称作“<strong>修正法线</strong>”，把世界空间里修正前的法线称作“<strong>几何法线</strong>”，这里默认它们都是归一化的。</p><p>考虑世界空间的某一点 $Q$，假设它在法线贴图中对应的一点为 $Q’$，我们知道点 $Q’$ 对应的法线被用于计算世界空间点 $Q$ 的修正法线。但等等，直接把 RGB 值复制过去看起来是错误的，因为随着物体转动，点 $Q$ 对应的法线也应当转动。因此，我们需要一个矩阵来实现这种从法线贴图上的法线到世界空间的修正法线的变换。</p><p>贴图是二维的，因此我们再额外定义一个垂直纸面向外的轴 $n$，它表示法线的“默认方向”，这就得到了三维的<strong>切线空间</strong>。如果点 $Q’$ 对应的法线是 $(0,0,1)$，那么世界空间的点 $Q$ 的修正法线就是原本的几何法线。</p><p>接下来就要考虑如何找到这个从切线空间到世界空间的旋转矩阵了。为了简单起见，我们先考虑单个三角形的旋转。之后我们会对每个点求出它自己的旋转矩阵。没错，每个点的旋转矩阵不同，这是因为每个点对应的矩阵会把 $(0,0,1)$ 映射到该点的几何法线，而每个点的几何法线一般不同。</p><p>如下图所示，我们希望把法线贴图上的 $P_0’P_1’P_2’$ 旋转为世界空间的 $P_0P_1P_2$，设这里的旋转矩阵为 $M$，世界空间的 $P_0P_1P_2$ 的几何法线为 $\mathbf{n}$，则有</p><script type="math/tex; mode=display">\begin{align*}&M[0,0,1]^T=\mathbf n\end{align*}</script><p><img src="/images/learning/open-course/GAMES101/Assignments/hw3/tangent-world-space.png" alt=""></p><p>但光靠这一个方程当然解不出 $M$，所以我们再考虑两个额外的方程：</p><script type="math/tex; mode=display">\begin{align*}&M (P_1'-P_0')=k(P_1-P_0)\\&M (P_2'-P_0')=k(P_2-P_0)\end{align*}</script><p>也就是说，我们希望这个矩阵把切线空间三角形的边向量旋转到世界空间的边向量上，这看起来是一个合理的要求。这里的 $k$ 是边的长度的缩放比例，严格来说每条边的缩放比例不一定相等，但只要 UV 映射前后的三角形大体是相似三角形，我们就可以认为缩放比例都为 $k$.</p><p>下面我们来解方程。首先我们设</p><script type="math/tex; mode=display">\begin{align*}&M=\begin{pmatrix}  T & B & N\end{pmatrix}\\&P_1'-P_0'= [\Delta u_1,\Delta v_1,0]^T\\&P_2'-P_0'= [\Delta u_2,\Delta v_2,0]^T\end{align*}</script><p>下面两个式子利用了 $P_k’$ 的第三个分量为 $0$ 的性质。</p><p>结合第一个方程就能得到 $N=\mathbf n$，这里的 $\mathbf n$ 表示世界空间的 $P_0P_1P_2$ 的几何法线。再结合另外两个方程就能得到</p><script type="math/tex; mode=display">\begin{align*}&\Delta u_1 T+\Delta v_1 B=k(P_1-P_0)\\&\Delta u_2 T+\Delta v_2 B=k(P_2-P_0)\end{align*}</script><p>之后我们可以解出 $T,B,N$ 的值</p><script type="math/tex; mode=display">\begin{align*}&T=k\frac{\Delta v_2(P_1-P_0)-\Delta v_1(P_2-P_0)}{\Delta u_1 \Delta v_2-\Delta u_2 \Delta v_1}\\&B=k\frac{\Delta u_2(P_1-P_0)-\Delta u_1(P_2-P_0)}{\Delta u_2 \Delta v_1-\Delta u_1 \Delta v_2}\\&N=\mathbf n\end{align*}</script><p>这个公式是不能用的，因为里面有未知数 $k$. 接下来我们解决这个问题。</p><p>我们期望 TBN 矩阵是一个旋转矩阵，而旋转矩阵是正交矩阵，所以我们会对 TBN 做施密特正交化和归一化。只要 $P_0P_1P_2$ 和 $P_0’P_1’P_2’$ 大体是相似三角形，那么它们本来就差不多正交（回顾我们对 TBN 的定义，会发现相似说明 TBN 只对 $P_0’P_1’P_2’$ 做了旋转和缩放，这表明 TBN 正交），所以这种正交化不会把 TBN 变化太多。而由于我们会对 TBN 做单位化，所以我们可以放心地令 $k=1$ 来用下面的公式求出 TBN：</p><script type="math/tex; mode=display">\begin{align*}&T=\frac{\Delta v_2(P_1-P_0)-\Delta v_1(P_2-P_0)}{\Delta u_1 \Delta v_2-\Delta u_2 \Delta v_1}\\&B=\frac{\Delta u_2(P_1-P_0)-\Delta u_1(P_2-P_0)}{\Delta u_2 \Delta v_1-\Delta u_1 \Delta v_2}\\&N=\mathbf{n}\end{align*}</script><p>最后，我们希望 N 在正交化前后不变，所以在正交化后我们有</p><script type="math/tex; mode=display">\begin{align*}&T'=T-(N\cdot T)N\\&B'=B-(N\cdot B)N-(T'\cdot B)T'/T'^2\\&N'=\mathbf n\end{align*}</script><p>再做个单位化就能得到顶点的 TBN 矩阵了。还记得 TBN 矩阵是做什么的吗，我们用它来实现从切线空间到世界空间的变换。所以对点 $Q$，假设其法线贴图对应的法线为 $\mathbf n’$，那么修正后的法线就是 $M_{\text{TBN}}\mathbf n’$.</p><p>很好，我们现在能把单个三角形做变换了，但在真正的模型中，每个点的几何法线方向一般都不同，这就意味着它们一般都有不同的 TBN 矩阵。与计算顶点法线类似，我们会找到每个顶点相邻的所有三角形，并对它们的 $T$ 和 $B$ 做加权平均来得到这个顶点的 $T$ 和 $B$.</p><p>在实践中，我们一般只计算出每个顶点的 $T$，然后在需要 $B$ 时通过叉乘 $N\times T$ 来计算。对那些非顶点的点，我们用重心坐标插值来算出其 $N$ 和 $T$，然后也做正交化和单位化来保证 TBN 矩阵的正交性。</p><p>最后我们再简单分析一下怎么根据凹凸贴图做法线修正。在修正法线时，凹凸贴图与法线贴图的唯一区别就是没有直接给出法线。回顾一下切线空间的定义，我们就可以给凹凸贴图同样设置沿纸面向外的 $n$ 轴，然后把凹凸贴图想象成一个按灰度值起伏的曲面，这个曲面的法线就和法线贴图提供的法线相对应。</p><p>具体来说，点 $(u,v)$ 处的法线可以用 $(h(u)-h(u+1,v),h(v)-h(u,v+1),1)$ 来近似，其中 $h(u,v)$ 表示凹凸贴图在点 $(u,v)$ 处的灰度值，$h(u+1,v)$ 表示 $(u,v)$ 右边一格的灰度值。</p><p>有时由于我们把贴图做了归一化，我们会改用 $h(u+1/\text{width},v)$，但记住它表示相邻格子的灰度值就行。</p><p>最后把这个法线和 TBN 矩阵相乘即可得到修正法线。</p><p>参考 <a href="https://terathon.com/blog/tangent-space.html">Computing Tangent Space Basis Vectors for an Arbitrary Mesh - Eric Lengyel</a></p><h1 id="作业代码"><a href="#作业代码" class="headerlink" title="作业代码"></a>作业代码</h1><h2 id="rasterize-triangle"><a href="#rasterize-triangle" class="headerlink" title="rasterize_triangle"></a>rasterize_triangle</h2><p>注意这里的插值算法要对所有的属性都做透视矫正，我们简单推导一下透视矫正的公式：</p><p>假设我们在对点 $Q$ 的某个属性进行插值，在世界空间中，它所在的三角形为 $P_0P_1P_2$. 投影变换后，它们分别变成了 $Q’$ 和 $P_0’P_1’P_2’$. 用重心坐标分别表示 $Q$ 和 $Q’$，会得到</p><script type="math/tex; mode=display">\begin{align*}&Q=\alpha P_0+\beta P_1+\gamma P_2\\&Q'=\alpha' P_0'+\beta' P_1'+\gamma' P_2'\end{align*}</script><p>这里的 $Q,Q’,P_k,P_k’$ 都是形如 $[x,y,z,1]^T$ 的向量。</p><p>在插值属性时，我们希望用 $\alpha, \beta,\gamma$ 来插值，而不是使用 $\alpha’, \beta’,\gamma’$ 插值，因为我们当然不希望属性会因透视位置不同而不同。这就需要我们根据 $\alpha’, \beta’,\gamma’$ 算出 $\alpha, \beta,\gamma$.</p><p>不妨设投影变换矩阵为 $M$，则有 </p><script type="math/tex; mode=display">\begin{align*}&MQ=\alpha MP_0+\beta MP_1+\gamma MP_2\end{align*}</script><p>这里的 $MP_k$ 是形如 $[x_k,y_k,z_k,w_k]^T$ 的用齐次坐标表示的向量，它与形如 $[x,y,z,1]^T$ 的 $P_k’$ 虽然在数学上表示同一个点，但在数值上不同。（还记得吗，齐次坐标下的 $[x,y,z,1<br>]$ 和 $[ax,ay,az,a]$ 表示同一个点）</p><p>因此我们希望对向量的系数做一些调整，来让各个向量变成 $[x,y,z,1]^T$ 的形式，从而找出 $\alpha’, \beta’,\gamma’$ 和 $\alpha, \beta,\gamma$ 的关系。</p><p> 简单变换一下，我们能把上面的式子写成</p><script type="math/tex; mode=display">\begin{align*}&MQ=\alpha w_0\frac{MP_0}{w_0}+\beta w_1\frac{MP_1}{w_1}+\gamma w_2\frac{MP_2}{w_2}\end{align*}</script><p>现在右边的各个向量 $\frac{MP_k}{w_k}$ 都已经是 $[x,y,z,1]^T$ 的形式了，我们给它们的系数做个归一化就能让左边的向量也变成 $[x,y,z,1]^T$ 的形式：</p><script type="math/tex; mode=display">\frac{MQ}{\alpha w_0 + \beta w_1 + \gamma w_2}=\frac{1}{\alpha w_0 + \beta w_1 + \gamma w_2}\bigg(\alpha w_0\frac{MP_0}{w_0}+\beta w_1\frac{MP_1}{w_1}+\gamma w_2\frac{MP_2}{w_2}\bigg)</script><p>由此我们就有</p><script type="math/tex; mode=display">\begin{align*}&\frac{\alpha w_0}{\alpha w_0 + \beta w_1 + \gamma w_2}=\alpha'\\&\frac{\beta w_1}{\alpha w_0 + \beta w_1 + \gamma w_2}=\beta'\\&\frac{\gamma w_2}{\alpha w_0 + \beta w_1 + \gamma w_2}=\gamma'\end{align*}</script><p>解上面的方程的小技巧是借助除法和重心坐标和为 $1$ 的性质得到下面的等价的方程组</p><script type="math/tex; mode=display">\begin{align*}&\frac{\alpha'}{\beta'}=\frac{\alpha w_0}{\beta w_1}\\&\frac{\alpha'}{\gamma'}=\frac{\alpha w_0}{\gamma w_2}\\&\alpha + \beta + \gamma = 1\end{align*}</script><p>然后就能求出</p><script type="math/tex; mode=display">\begin{align*}&\alpha = \frac{\alpha' / w_0}{\alpha' / w_0 + \beta' / w_1 + \gamma' / w_2}\\&\beta= \frac{\beta' / w_1}{\alpha' / w_0 + \beta' / w_1 + \gamma' / w_2}\\&\gamma= \frac{\gamma' / w_2}{\alpha' / w_0 + \beta' / w_1 + \gamma' / w_2}\end{align*}</script><p>由此，我们就从屏幕空间的重心坐标 $\alpha’,\beta’,\gamma’$ 算出了世界空间的重心坐标 $\alpha,\beta,\gamma$，之后就能用世界空间的重心坐标来正确插值了。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Screen space rasterization</span><span class="token keyword">void</span> rst<span class="token double-colon punctuation">::</span>rasterizer<span class="token double-colon punctuation">::</span><span class="token function">rasterize_triangle</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangle<span class="token operator">&amp;</span> t<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3f<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span><span class="token operator">&amp;</span> view_pos<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> v <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">toVector4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Find bounding box</span>    <span class="token keyword">float</span> left <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> right <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> bottom <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> top <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> vec<span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        left <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bottom <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Update pixels in bounding box</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">auto</span><span class="token punctuation">[</span>alpha<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> gamma<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computeBarycentric2D</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> t<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// If (x, y) is not inside triangle, continue</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>alpha <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> beta <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">||</span> gamma <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Interpolate z value, color, normal, texcoords, shadingcoords, viewpos</span>            <span class="token keyword">float</span> alpha_corrected <span class="token operator">=</span> alpha <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> beta_corrected <span class="token operator">=</span> beta <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> gamma_corrected <span class="token operator">=</span> gamma <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> w_reciprocal <span class="token operator">=</span> alpha_corrected <span class="token operator">+</span> beta_corrected <span class="token operator">+</span> gamma_corrected<span class="token punctuation">;</span>            <span class="token keyword">auto</span> z_interpolated <span class="token operator">=</span> <span class="token function">interpolate</span><span class="token punctuation">(</span>alpha_corrected<span class="token punctuation">,</span> beta_corrected<span class="token punctuation">,</span> gamma_corrected<span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> w_reciprocal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> color_interpolated <span class="token operator">=</span> <span class="token function">interpolate</span><span class="token punctuation">(</span>alpha_corrected<span class="token punctuation">,</span> beta_corrected<span class="token punctuation">,</span> gamma_corrected<span class="token punctuation">,</span> t<span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>color<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w_reciprocal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> normal_interpolated <span class="token operator">=</span> <span class="token function">interpolate</span><span class="token punctuation">(</span>alpha_corrected<span class="token punctuation">,</span> beta_corrected<span class="token punctuation">,</span> gamma_corrected<span class="token punctuation">,</span> t<span class="token punctuation">.</span>normal<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>normal<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>normal<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w_reciprocal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> texcoordes_interpolated <span class="token operator">=</span> <span class="token function">interpolate</span><span class="token punctuation">(</span>alpha_corrected<span class="token punctuation">,</span> beta_corrected<span class="token punctuation">,</span> gamma_corrected<span class="token punctuation">,</span> t<span class="token punctuation">.</span>tex_coords<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>tex_coords<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>tex_coords<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w_reciprocal<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">auto</span> viewpos_interpolated <span class="token operator">=</span> <span class="token function">interpolate</span><span class="token punctuation">(</span>alpha_corrected<span class="token punctuation">,</span> beta_corrected<span class="token punctuation">,</span> gamma_corrected<span class="token punctuation">,</span> view_pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> view_pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> view_pos<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> w_reciprocal<span class="token punctuation">)</span><span class="token punctuation">;</span>                        <span class="token comment">// A lower z-value means it is displayed in front</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>z_interpolated <span class="token operator">&lt;</span> depth_buf<span class="token punctuation">[</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                depth_buf<span class="token punctuation">[</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> z_interpolated<span class="token punctuation">;</span>                fragment_shader_payload <span class="token function">payload</span><span class="token punctuation">(</span> color_interpolated<span class="token punctuation">,</span> normal_interpolated<span class="token punctuation">,</span> texcoordes_interpolated<span class="token punctuation">,</span> texture <span class="token operator">?</span> <span class="token operator">&amp;</span><span class="token operator">*</span>texture <span class="token operator">:</span> <span class="token keyword">nullptr</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                payload<span class="token punctuation">.</span>view_pos <span class="token operator">=</span> viewpos_interpolated<span class="token punctuation">;</span>                <span class="token keyword">auto</span> pixel_color <span class="token operator">=</span> <span class="token function">fragment_shader</span><span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">set_pixel</span><span class="token punctuation">(</span><span class="token function">Vector2i</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">,</span> pixel_color<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="phong-和-texture"><a href="#phong-和-texture" class="headerlink" title="phong 和 texture"></a>phong 和 texture</h2><p>phong 的代码按着 phong 模型实现即可。texture 的代码几乎是一模一样的。</p><p>我唯一好奇的地方是为什么末尾乘了 255.0f，难道光照模型的各个数值取值都在 $(0,1)$ 之间？但看光强似乎又不是这样。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Vector3f <span class="token function">phong_fragment_shader</span><span class="token punctuation">(</span><span class="token keyword">const</span> fragment_shader_payload<span class="token operator">&amp;</span> payload<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ka <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f kd <span class="token operator">=</span> payload<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ks <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l1 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l2 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>light<span class="token operator">></span> lights <span class="token operator">=</span> <span class="token punctuation">&#123;</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f amb_light_intensity<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f eye_pos<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> p <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f color <span class="token operator">=</span> payload<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f point <span class="token operator">=</span> payload<span class="token punctuation">.</span>view_pos<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f normal <span class="token operator">=</span> payload<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f result_color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ambient <span class="token operator">=</span> ka<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>amb_light_intensity<span class="token punctuation">)</span><span class="token punctuation">;</span>    result_color <span class="token operator">+=</span> ambient<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> light <span class="token operator">:</span> lights<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO: For each light source in the code, calculate what the *ambient*, *diffuse*, and *specular* </span>        <span class="token comment">// components are. Then, accumulate that result on the *result_color* object.</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f vec_to_light <span class="token operator">=</span> light<span class="token punctuation">.</span>position <span class="token operator">-</span> point<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f diffuse <span class="token operator">=</span> kd<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>light<span class="token punctuation">.</span>intensity <span class="token operator">/</span> vec_to_light<span class="token punctuation">.</span><span class="token function">squaredNorm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> normal<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>vec_to_light<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f vec_to_eye <span class="token operator">=</span> eye_pos <span class="token operator">-</span> point<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f h <span class="token operator">=</span> vec_to_light<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> vec_to_eye<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f specular <span class="token operator">=</span> ks<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>light<span class="token punctuation">.</span>intensity <span class="token operator">/</span> vec_to_light<span class="token punctuation">.</span><span class="token function">squaredNorm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> normal<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// The ambient component is only added once before the for loop</span>        result_color <span class="token operator">+=</span> <span class="token punctuation">(</span>diffuse <span class="token operator">+</span> specular<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result_color <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Vector3f <span class="token function">texture_fragment_shader</span><span class="token punctuation">(</span><span class="token keyword">const</span> fragment_shader_payload<span class="token operator">&amp;</span> payload<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f texture_color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>texture<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO: Get the texture value at the texture coordinates of the current fragment</span>        texture_color <span class="token operator">=</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>payload<span class="token punctuation">.</span>tex_coords<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> payload<span class="token punctuation">.</span>tex_coords<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ka <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f kd <span class="token operator">=</span> texture_color <span class="token operator">/</span> <span class="token number">255.f</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ks <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l1 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l2 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>light<span class="token operator">></span> lights <span class="token operator">=</span> <span class="token punctuation">&#123;</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f amb_light_intensity<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f eye_pos<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> p <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f color <span class="token operator">=</span> texture_color<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f point <span class="token operator">=</span> payload<span class="token punctuation">.</span>view_pos<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f normal <span class="token operator">=</span> payload<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f result_color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ambient <span class="token operator">=</span> ka<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>amb_light_intensity<span class="token punctuation">)</span><span class="token punctuation">;</span>    result_color <span class="token operator">+=</span> ambient<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> light <span class="token operator">:</span> lights<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO: For each light source in the code, calculate what the *ambient*, *diffuse*, and *specular* </span>        <span class="token comment">// components are. Then, accumulate that result on the *result_color* object.</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f vec_to_light <span class="token operator">=</span> light<span class="token punctuation">.</span>position <span class="token operator">-</span> point<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f diffuse <span class="token operator">=</span> kd<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>light<span class="token punctuation">.</span>intensity <span class="token operator">/</span> vec_to_light<span class="token punctuation">.</span><span class="token function">squaredNorm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> normal<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>vec_to_light<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f vec_to_eye <span class="token operator">=</span> eye_pos <span class="token operator">-</span> point<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f h <span class="token operator">=</span> vec_to_light<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> vec_to_eye<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f specular <span class="token operator">=</span> ks<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>light<span class="token punctuation">.</span>intensity <span class="token operator">/</span> vec_to_light<span class="token punctuation">.</span><span class="token function">squaredNorm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> normal<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// The ambient component is only added once before the for loop</span>        result_color <span class="token operator">+=</span> <span class="token punctuation">(</span>diffuse <span class="token operator">+</span> specular<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result_color <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bump-和-displacement"><a href="#bump-和-displacement" class="headerlink" title="bump 和 displacement"></a>bump 和 displacement</h2><p>如开头所言，本次作业对这两个 shader 的要求非常不严谨，我们就简单放下代码，不多解释了。在一些不严谨的地方我已经写了注释。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Vector3f <span class="token function">bump_fragment_shader</span><span class="token punctuation">(</span><span class="token keyword">const</span> fragment_shader_payload<span class="token operator">&amp;</span> payload<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f ka <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f kd <span class="token operator">=</span> payload<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ks <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l1 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l2 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>light<span class="token operator">></span> lights <span class="token operator">=</span> <span class="token punctuation">&#123;</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f amb_light_intensity<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f eye_pos<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> p <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f color <span class="token operator">=</span> payload<span class="token punctuation">.</span>color<span class="token punctuation">;</span>     Eigen<span class="token double-colon punctuation">::</span>Vector3f point <span class="token operator">=</span> payload<span class="token punctuation">.</span>view_pos<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f normal <span class="token operator">=</span> payload<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>    <span class="token keyword">float</span> kh <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span> kn <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>    <span class="token comment">// TODO: Implement bump mapping here</span>    <span class="token comment">// Let n = normal = (x, y, z)</span>    <span class="token comment">// Vector t = (x*y/sqrt(x*x+z*z),sqrt(x*x+z*z),z*y/sqrt(x*x+z*z))</span>    <span class="token comment">// Vector b = n cross product t</span>    <span class="token comment">// Matrix TBN = [t b n]</span>    <span class="token comment">// dU = kh * kn * (h(u+1/w,v)-h(u,v))</span>    <span class="token comment">// dV = kh * kn * (h(u,v+1/h)-h(u,v))</span>    <span class="token comment">// Vector ln = (-dU, -dV, 1)</span>    <span class="token comment">// Normal n = normalize(TBN * ln)</span>    <span class="token comment">// Note: The formula is WRONG in theory</span>    <span class="token comment">// To calculate the TBN matrix correctly, we need the triangle's vertices and their corresponding UV coordinates</span>    <span class="token comment">// read https://learnopengl.com/Advanced-Lighting/Normal-Mapping and </span>    <span class="token comment">// https://terathon.com/blog/tangent-space.html for more details</span>    <span class="token keyword">float</span> x <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> y <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> z <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> u <span class="token operator">=</span> payload<span class="token punctuation">.</span>tex_coords<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> v <span class="token operator">=</span> payload<span class="token punctuation">.</span>tex_coords<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> w <span class="token operator">=</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span>width<span class="token punctuation">;</span>    <span class="token keyword">float</span> h <span class="token operator">=</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span>height<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f t <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token operator">*</span>y<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f b <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix3f TBN<span class="token punctuation">;</span>        TBN <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> normal<span class="token punctuation">;</span>    <span class="token comment">// In theory the texture should be a grayscale image</span>    <span class="token comment">// However we use an ordinary RGB image here, so we take norm</span>    <span class="token comment">// read https://games-cn.org/forums/topic/frequently-asked-questionskeep-updating/ for more details</span>    <span class="token keyword">float</span> dU <span class="token operator">=</span> kh <span class="token operator">*</span> kn <span class="token operator">*</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1.0f</span><span class="token operator">/</span>w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> dV <span class="token operator">=</span> kh <span class="token operator">*</span> kn <span class="token operator">*</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token operator">+</span><span class="token number">1.0f</span><span class="token operator">/</span>h<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ln <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token operator">-</span>dU<span class="token punctuation">,</span> <span class="token operator">-</span>dV<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    normal <span class="token operator">=</span> <span class="token punctuation">(</span>TBN <span class="token operator">*</span> ln<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f result_color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    result_color <span class="token operator">=</span> normal<span class="token punctuation">;</span>    <span class="token keyword">return</span> result_color <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Vector3f <span class="token function">displacement_fragment_shader</span><span class="token punctuation">(</span><span class="token keyword">const</span> fragment_shader_payload<span class="token operator">&amp;</span> payload<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f ka <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">,</span> <span class="token number">0.005</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f kd <span class="token operator">=</span> payload<span class="token punctuation">.</span>color<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ks <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">,</span> <span class="token number">0.7937</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l1 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">auto</span> l2 <span class="token operator">=</span> light<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>light<span class="token operator">></span> lights <span class="token operator">=</span> <span class="token punctuation">&#123;</span>l1<span class="token punctuation">,</span> l2<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f amb_light_intensity<span class="token punctuation">&#123;</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f eye_pos<span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> p <span class="token operator">=</span> <span class="token number">150</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f color <span class="token operator">=</span> payload<span class="token punctuation">.</span>color<span class="token punctuation">;</span>     Eigen<span class="token double-colon punctuation">::</span>Vector3f point <span class="token operator">=</span> payload<span class="token punctuation">.</span>view_pos<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f normal <span class="token operator">=</span> payload<span class="token punctuation">.</span>normal<span class="token punctuation">;</span>    <span class="token keyword">float</span> kh <span class="token operator">=</span> <span class="token number">0.2</span><span class="token punctuation">,</span> kn <span class="token operator">=</span> <span class="token number">0.1</span><span class="token punctuation">;</span>        <span class="token comment">// TODO: Implement displacement mapping here</span>    <span class="token comment">// Let n = normal = (x, y, z)</span>    <span class="token comment">// Vector t = (x*y/sqrt(x*x+z*z),sqrt(x*x+z*z),z*y/sqrt(x*x+z*z))</span>    <span class="token comment">// Vector b = n cross product t</span>    <span class="token comment">// Matrix TBN = [t b n]</span>    <span class="token comment">// dU = kh * kn * (h(u+1/w,v)-h(u,v))</span>    <span class="token comment">// dV = kh * kn * (h(u,v+1/h)-h(u,v))</span>    <span class="token comment">// Vector ln = (-dU, -dV, 1)</span>    <span class="token comment">// Position p = p + kn * n * h(u,v)</span>    <span class="token comment">// Normal n = normalize(TBN * ln)</span>    <span class="token comment">// Note: The formula is WRONG in theory</span>    <span class="token comment">// When using Displacement Mapping, the points should be offset in the camera space before rasterizing, </span>    <span class="token comment">// instead of only changing its color</span>    <span class="token comment">// read https://learnopengl.com/Advanced-Lighting/Normal-Mapping and </span>    <span class="token comment">// https://terathon.com/blog/tangent-space.html for more details</span>    <span class="token keyword">float</span> x <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> y <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> z <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> u <span class="token operator">=</span> payload<span class="token punctuation">.</span>tex_coords<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> v <span class="token operator">=</span> payload<span class="token punctuation">.</span>tex_coords<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> w <span class="token operator">=</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span>width<span class="token punctuation">;</span>    <span class="token keyword">float</span> h <span class="token operator">=</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span>height<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f t <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span>x<span class="token operator">*</span>y<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">,</span>z<span class="token operator">*</span>y<span class="token operator">/</span><span class="token function">sqrt</span><span class="token punctuation">(</span>x<span class="token operator">*</span>x<span class="token operator">+</span>z<span class="token operator">*</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f b <span class="token operator">=</span> normal<span class="token punctuation">.</span><span class="token function">cross</span><span class="token punctuation">(</span>t<span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix3f TBN<span class="token punctuation">;</span>        TBN <span class="token operator">&lt;&lt;</span> t<span class="token punctuation">,</span> b<span class="token punctuation">,</span> normal<span class="token punctuation">;</span>    <span class="token comment">// In theory the texture should be a grayscale image</span>    <span class="token comment">// However we use an ordinary RGB image here, so we take norm</span>    <span class="token comment">// read https://games-cn.org/forums/topic/frequently-asked-questionskeep-updating/ for more details</span>    <span class="token keyword">float</span> dU <span class="token operator">=</span> kh <span class="token operator">*</span> kn <span class="token operator">*</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token operator">+</span><span class="token number">1.0f</span><span class="token operator">/</span>w<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> dV <span class="token operator">=</span> kh <span class="token operator">*</span> kn <span class="token operator">*</span> <span class="token punctuation">(</span>payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token operator">+</span><span class="token number">1.0f</span><span class="token operator">/</span>h<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ln <span class="token operator">=</span> <span class="token class-name">Eigen</span><span class="token double-colon punctuation">::</span><span class="token function">Vector3f</span><span class="token punctuation">(</span><span class="token operator">-</span>dU<span class="token punctuation">,</span> <span class="token operator">-</span>dV<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// In theory we should bias the point using the original normal</span>    <span class="token comment">// but to match the homework answer, we bias the point using the corrected normal</span>    normal <span class="token operator">=</span> <span class="token punctuation">(</span>TBN <span class="token operator">*</span> ln<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    point <span class="token operator">+=</span> kn <span class="token operator">*</span> normal <span class="token operator">*</span> payload<span class="token punctuation">.</span>texture<span class="token operator">-></span><span class="token function">getColor</span><span class="token punctuation">(</span>u<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">norm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f result_color <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Vector3f ambient <span class="token operator">=</span> ka<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>amb_light_intensity<span class="token punctuation">)</span><span class="token punctuation">;</span>    result_color <span class="token operator">+=</span> ambient<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> light <span class="token operator">:</span> lights<span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">// TODO: For each light source in the code, calculate what the *ambient*, *diffuse*, and *specular* </span>        <span class="token comment">// components are. Then, accumulate that result on the *result_color* object.</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f vec_to_light <span class="token operator">=</span> light<span class="token punctuation">.</span>position <span class="token operator">-</span> point<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f diffuse <span class="token operator">=</span> kd<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>light<span class="token punctuation">.</span>intensity <span class="token operator">/</span> vec_to_light<span class="token punctuation">.</span><span class="token function">squaredNorm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> normal<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>vec_to_light<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f vec_to_eye <span class="token operator">=</span> eye_pos <span class="token operator">-</span> point<span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f h <span class="token operator">=</span> vec_to_light<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> vec_to_eye<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Vector3f specular <span class="token operator">=</span> ks<span class="token punctuation">.</span><span class="token function">cwiseProduct</span><span class="token punctuation">(</span>light<span class="token punctuation">.</span>intensity <span class="token operator">/</span> vec_to_light<span class="token punctuation">.</span><span class="token function">squaredNorm</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token function">pow</span><span class="token punctuation">(</span><span class="token function">MAX</span><span class="token punctuation">(</span><span class="token number">0.0f</span><span class="token punctuation">,</span> normal<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">dot</span><span class="token punctuation">(</span>h<span class="token punctuation">.</span><span class="token function">normalized</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// The ambient component is only added once before the for loop</span>        result_color <span class="token operator">+=</span> <span class="token punctuation">(</span>diffuse <span class="token operator">+</span> specular<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> result_color <span class="token operator">*</span> <span class="token number">255.f</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次作业对 bump_fragment_shader、displacement_fragment_shader 的要求非常不严谨，至少包括这些问题：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;这两个 shdaer 需要的贴图是凹凸贴图，凹凸贴图本应该是灰度图，这里使用 RGB 贴图。&lt;/l</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Assignments" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Assignments/"/>
    
    
  </entry>
  
  <entry>
    <title>Assignment 2 Rasterizing</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw2-rasterizing/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw2-rasterizing/</id>
    <published>2025-08-26T12:15:16.000Z</published>
    <updated>2025-08-26T12:21:11.482Z</updated>
    
    <content type="html"><![CDATA[<p>本次作业要求我们实现 Z-buffer 、栅格化和 SSAA（也就是超采样）。我们先看看前两个东西，再看看 SSAA。</p><h1 id="Z-buffer和栅格化"><a href="#Z-buffer和栅格化" class="headerlink" title="Z-buffer和栅格化"></a>Z-buffer和栅格化</h1><h2 id="代码框架"><a href="#代码框架" class="headerlink" title="代码框架"></a>代码框架</h2><p>我们要补全的 <code>rasterize_triangle</code> 函数在 <code>draw</code> 函数内被调用，可以看到 <code>draw</code> 函数已经做好了三角形的投影变换，我们只要把 $[0, \text{width}] \times [0,\text{height}] \times [n,f]$ 里的三角形渲染到屏幕上就好。输入的三角形大概形如这样：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span>input triangle<span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span class="token number">529.259</span>    <span class="token number">350</span><span class="token number">49.3857</span>      <span class="token number">1</span><span class="token operator">--</span>    <span class="token number">350</span><span class="token number">529.259</span><span class="token number">49.3857</span>      <span class="token number">1</span><span class="token operator">--</span><span class="token number">170.741</span>    <span class="token number">350</span><span class="token number">49.3857</span>      <span class="token number">1</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">--</span><span class="token operator">-</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="insideTriangle-函数"><a href="#insideTriangle-函数" class="headerlink" title="insideTriangle 函数"></a>insideTriangle 函数</h2><p>用课上讲的叉乘法判断点是否在三角形内。“在三角形内”这个说法也不是特别严谨，更准确地说应该是判断三角形在屏幕上的二维投影是否包含这个点。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*    Return whether (x, y) is in the triangle, ignoring its z value.*/</span><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">insideTriangle</span><span class="token punctuation">(</span><span class="token keyword">float</span> x<span class="token punctuation">,</span> <span class="token keyword">float</span> y<span class="token punctuation">,</span> <span class="token keyword">const</span> std<span class="token double-colon punctuation">::</span>array<span class="token operator">&lt;</span>Vector4f<span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span><span class="token operator">&amp;</span> triangle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Vector2f point1 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>triangle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> triangle<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Vector2f point2 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>triangle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> triangle<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Vector2f point3 <span class="token operator">=</span> <span class="token punctuation">&#123;</span>triangle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> triangle<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    Vector2f checked_point <span class="token operator">=</span> <span class="token punctuation">&#123;</span>x<span class="token punctuation">,</span> y<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">auto</span> cross_product <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span><span class="token keyword">const</span> Vector2f<span class="token operator">&amp;</span> v1<span class="token punctuation">,</span> <span class="token keyword">const</span> Vector2f<span class="token operator">&amp;</span> v2<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> v1<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> v2<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">-</span> v1<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> v2<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> side1 <span class="token operator">=</span> <span class="token function">cross_product</span><span class="token punctuation">(</span>point1 <span class="token operator">-</span> checked_point<span class="token punctuation">,</span> point1 <span class="token operator">-</span> point2<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> side2 <span class="token operator">=</span> <span class="token function">cross_product</span><span class="token punctuation">(</span>point2 <span class="token operator">-</span> checked_point<span class="token punctuation">,</span> point2 <span class="token operator">-</span> point3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> side3 <span class="token operator">=</span> <span class="token function">cross_product</span><span class="token punctuation">(</span>point3 <span class="token operator">-</span> checked_point<span class="token punctuation">,</span> point3 <span class="token operator">-</span> point1<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>side1 <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> side2 <span class="token operator">></span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> side3 <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>side1 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> side2 <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token operator">&amp;&amp;</span> side3 <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="rasterize-triangle-函数"><a href="#rasterize-triangle-函数" class="headerlink" title="rasterize_triangle 函数"></a>rasterize_triangle 函数</h2><p>这个实现好像没什么特别值得说的地方，简简单单采采样，然后用 <code>depth_buf</code> 实现 z-buffer 就好。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">//Screen space rasterization</span><span class="token keyword">void</span> rst<span class="token double-colon punctuation">::</span>rasterizer<span class="token double-colon punctuation">::</span><span class="token function">rasterize_triangle</span><span class="token punctuation">(</span><span class="token keyword">const</span> Triangle<span class="token operator">&amp;</span> t<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">auto</span> v <span class="token operator">=</span> t<span class="token punctuation">.</span><span class="token function">toVector4</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// Find bounding box</span>    <span class="token keyword">float</span> left <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> right <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> bottom <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> top <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span><span class="token operator">&amp;</span> vec<span class="token operator">:</span> v<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        left <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        right <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>right<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        bottom <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">min</span><span class="token punctuation">(</span>bottom<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        top <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">max</span><span class="token punctuation">(</span>top<span class="token punctuation">,</span> vec<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// Update pixels in bounding box</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> x <span class="token operator">&lt;=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>right<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>bottom<span class="token punctuation">)</span><span class="token punctuation">;</span> y <span class="token operator">&lt;=</span> <span class="token generic-function"><span class="token function">static_cast</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token keyword">int</span><span class="token operator">></span></span></span><span class="token punctuation">(</span>top<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token function">insideTriangle</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">continue</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// Interpolate z value </span>            <span class="token keyword">auto</span><span class="token punctuation">[</span>alpha<span class="token punctuation">,</span> beta<span class="token punctuation">,</span> gamma<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">computeBarycentric2D</span><span class="token punctuation">(</span>x<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> y<span class="token operator">+</span><span class="token number">0.5</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span>v<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> w_reciprocal <span class="token operator">=</span> <span class="token number">1.0</span><span class="token operator">/</span><span class="token punctuation">(</span>alpha <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> beta <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> gamma <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">float</span> z_interpolated <span class="token operator">=</span> alpha <span class="token operator">*</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> beta <span class="token operator">*</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> gamma <span class="token operator">*</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">/</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">w</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            z_interpolated <span class="token operator">*=</span> w_reciprocal<span class="token punctuation">;</span>            <span class="token comment">// A lower z-value means it is displayed in front</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>z_interpolated <span class="token operator">&lt;</span> depth_buf<span class="token punctuation">[</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                depth_buf<span class="token punctuation">[</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> z_interpolated<span class="token punctuation">;</span>                <span class="token function">set_pixel</span><span class="token punctuation">(</span><span class="token function">Vector3f</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z_interpolated<span class="token punctuation">)</span><span class="token punctuation">,</span> t<span class="token punctuation">.</span><span class="token function">getColor</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="SSAA的实现"><a href="#SSAA的实现" class="headerlink" title="SSAA的实现"></a>SSAA的实现</h1><p>SSAA 的实现相较而言更困难一些，由于杂七杂八要改的地方比较多，我就先说下大致思路，再聊聊咱踩的两个坑。</p><p>不过在此之前，先来看看我们的成果吧！（这是动图</p><p><img src="/images/learning/open-course/GAMES101/Assignments/hw2/new-vs-orig.gif" alt=""></p><h2 id="大致思路"><a href="#大致思路" class="headerlink" title="大致思路"></a>大致思路</h2><p>我们要先把所有内容渲染到大小为 $(\text{width} * 2, \text{height} * 2<br>)$ 的自定义 buffer 里，再根据自定义 buffer 的内容填充屏幕上的像素。</p><p>要注意的是，我们不能直接在 <code>rasterize_triangle</code> 里把三角形画到屏幕上（具体原因见“踩坑1”那一节），而是要在 <code>rasterize_triangle</code> 中把三角形画到自定义的 buffer 里，再新增一个 <code>resolve</code> 函数并把它放到 draw 的最后，从而把自定义 buffer 里的内容画到屏幕上：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> rst<span class="token double-colon punctuation">::</span>rasterizer<span class="token double-colon punctuation">::</span><span class="token function">resolve</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> y <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> y <span class="token operator">&lt;</span> height<span class="token punctuation">;</span> y<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> x <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> x <span class="token operator">&lt;</span> width<span class="token punctuation">;</span> x<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            frame_buf<span class="token punctuation">[</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token class-name">Vector3f</span><span class="token double-colon punctuation">::</span><span class="token function">Zero</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                frame_buf<span class="token punctuation">[</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">]</span> <span class="token operator">+=</span> ssaa_frame_buf<span class="token punctuation">[</span><span class="token punctuation">(</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            frame_buf<span class="token punctuation">[</span>y <span class="token operator">*</span> width <span class="token operator">+</span> x<span class="token punctuation">]</span> <span class="token operator">/=</span> <span class="token number">4.0</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更细节一些的话，我们需要做这些工作：</p><ol><li>在 rasterizer.hpp 里加入 ssaa_frame_buf 和 resolve 的定义。</li><li>修改 rasterizer 的初始化函数和 clear 函数，正确初始化和重置 ssaa_frame_buf。</li><li>修改 set_pixel 函数，让它把内容画到 ssaa_frame_buf 里，而非 frame_buf 里。</li><li>修改 rasterize_triangle，让它用使用更高的采样率。</li><li>实现 resolve 函数。</li></ol><p>杂七杂八要改的地方比较多，这里就不放更多代码了。</p><h2 id="踩坑1"><a href="#踩坑1" class="headerlink" title="踩坑1"></a>踩坑1</h2><p>SSAA、filtering 都建立在“我们对理想图像进行滤波”的基础上。也就是说，要先把世界里的对象按正确的前后顺序变为一个二维图像，然后再滤波。所以直接在 <code>rasterize_triangle</code> 里把像素划分成子像素然后取平均并不能实现 SSAA，而是会在三角形重叠的地方显示出黑边。</p><p><img src="/images/learning/open-course/GAMES101/Assignments/hw2/black-ssaa.png" alt=""></p><p>让我们来看一个具体例子。考虑一个 1/4 被绿色三角形占据、3/4 被蓝色三角形占据的像素，SSAA 会把 1/4 绿 + 3/4 蓝 作为这个像素的颜色。</p><p>而如果直接在 <code>rasterize_triangle</code> 里把像素划分成子像素然后取平均，那么栅格化蓝色三角形时，这个像素被当成 3/4 蓝；栅格化绿色三角形时，这个像素被当成 1/4 绿。无论谁在前面，最终结果要么是 3/4 蓝，要么是 1/4 绿，总与 SSAA 的结果 1/4 绿 + 3/4 蓝 不同。</p><h2 id="踩坑2"><a href="#踩坑2" class="headerlink" title="踩坑2"></a>踩坑2</h2><p><code>insideTriangle</code> 的参数 x 和 y 的类型原本是 int，而在 SSAA 里我们把像素划分成了四个子像素，这些子像素的坐标大多不是整数。因此我们要把 <code>insideTriangle</code> 的 x 和 y 的类型改成 float. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">static</span> <span class="token keyword">bool</span> <span class="token function">insideTriangle</span><span class="token punctuation">(</span><span class="token keyword">int</span> x<span class="token punctuation">,</span> <span class="token keyword">int</span> y<span class="token punctuation">,</span> <span class="token keyword">const</span> Vector3f<span class="token operator">*</span> _v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>       <span class="token comment">// TODO : Implement this function to check if the point (x, y) is inside the triangle represented by _v[0], _v[1], _v[2]</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次作业要求我们实现 Z-buffer 、栅格化和 SSAA（也就是超采样）。我们先看看前两个东西，再看看 SSAA。&lt;/p&gt;
&lt;h1 id=&quot;Z-buffer和栅格化&quot;&gt;&lt;a href=&quot;#Z-buffer和栅格化&quot; class=&quot;headerlink&quot; title=&quot;Z</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Assignments" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Assignments/"/>
    
    
  </entry>
  
  <entry>
    <title>Note 2 Rasterizing</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note2-Rasterizing/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note2-Rasterizing/</id>
    <published>2025-08-25T08:10:28.000Z</published>
    <updated>2025-09-23T07:19:39.089Z</updated>
    
    <content type="html"><![CDATA[<p>在 Transformation 部分，我们已经可以把一个三维空间里的三角形投影到平面上。但怎么把一个纯色三角形绘制到屏幕上呢？我们知道屏幕由大量的像素点组成，那么怎么确定每个像素点是什么颜色呢？</p><p>我们通过采样给每个像素点涂上颜色。我们可以检查每个像素的中心点是否在这个三角形内部，如果在则涂上三角形的颜色。虽然这样绘制的三角形会有锯齿，效果一般，但基本思想就是这样。</p><p>那么如果有多个三角形，而且他们之间有遮挡关系呢？这就需要 Z-Buffer 出场了。</p><h1 id="Z-Buffer"><a href="#Z-Buffer" class="headerlink" title="Z-Buffer"></a>Z-Buffer</h1><p>Z-Buffer 的算法如下面的伪代码所示。思路是对每个像素所在的所有三角形，取 z 值最小的三角形的颜色作为这个像素的颜色。</p><pre class="line-numbers language-csharp" data-language="csharp"><code class="language-csharp"><span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Triangle</span> triangle <span class="token keyword">in</span> triangles<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">foreach</span> <span class="token punctuation">(</span><span class="token class-name">Vector3</span> sample <span class="token keyword">in</span> triangle<span class="token punctuation">.</span><span class="token function">GetSamples</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// z 值越小显示越靠前</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>sample<span class="token punctuation">.</span>z <span class="token operator">&lt;</span> zBuffer<span class="token punctuation">[</span>sample<span class="token punctuation">.</span>x<span class="token punctuation">,</span> sample<span class="token punctuation">.</span>y<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            frameBuffer<span class="token punctuation">[</span>sample<span class="token punctuation">.</span>x<span class="token punctuation">,</span> sample<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> sample<span class="token punctuation">.</span>rgb<span class="token punctuation">;</span>            zBuffer<span class="token punctuation">[</span>sample<span class="token punctuation">.</span>x<span class="token punctuation">,</span> sample<span class="token punctuation">.</span>y<span class="token punctuation">]</span> <span class="token operator">=</span> sample<span class="token punctuation">.</span>z<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这也有良好的并行性，因为三角形的遍历顺序和最终结果无关，像素的绘制顺序也和最终结果无关。</p><p>虎书还提到我们会将 $z$ 值映射到 $[0, B-1]$，用整数存储 $z$ 值，但其实这是现在不再使用的方法，我们现在通常使用 24 位或 32 位的浮点数来存储深度值。（怪不得我查了好久资料都没查到“整数映射”的具体代码，原来早就不用了！！！）</p><h1 id="走样现象"><a href="#走样现象" class="headerlink" title="走样现象"></a>走样现象</h1><p>我们之前说过，简单的采样会出现锯齿，如下图所示。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note2/jaggies.png" alt=""></p><p>锯齿、摩尔纹之类的采样图像与原图不符的现象被统称为走样（Aliasing）现象，走样的实质是原图的高频信号被错误采样。为了明确什么是”高频信号”并找到缓解走样现象的方法，我们先看看一些数学知识。</p><h1 id="数学知识"><a href="#数学知识" class="headerlink" title="数学知识"></a>数学知识</h1><p>为了不让文章太长，这里我们省略所有的证明。不过所有的证明都并不困难，有空的话可以自己证一下试试。在开始之前，我们会问：这些数学知识有用吗？</p><blockquote><p>In a word, mostly no, sometimes yes, and occasionally, maybe.<br>— <a href="https://www.dgp.toronto.edu/public_user/elf/2522/sampling.pdf">https://www.dgp.toronto.edu/public_user/elf/2522/sampling.pdf</a></p></blockquote><h2 id="卷积"><a href="#卷积" class="headerlink" title="卷积"></a>卷积</h2><p>我们先来看看三种卷积——离散-离散卷积、连续-连续卷积、离散-连续卷积。下面的 $f_{\rightarrow t}$ 表示将函数 $f$ 向右平移 $t$ 长度得到的新函数：</p><p>离散-离散卷积</p><script type="math/tex; mode=display">\begin{align*}&(a*b)[i]=\sum_{j}a[j]b[i-j]\\&(a*b)=\sum_{j}a[j]b_{\rightarrow j}\end{align*}</script><p>连续-连续卷积</p><script type="math/tex; mode=display">\begin{align*}&(f*g)(x)=\int_{-\infty}^{\infty}f(t)g(x-t)dt\\&(f*g)=\int_{-\infty}^{\infty}f(t)g_{\rightarrow t}dt\end{align*}</script><p>离散-连续卷积</p><script type="math/tex; mode=display">\begin{align*}&(a*f)(x)=\sum_{i}a[i]f(x-i)\\&(a*f)=\sum_{i}a[i]f_{\rightarrow i}\end{align*}</script><p>我们会注意到，卷积可以表示为函数平移后的加权和。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note2/convlution.png" alt=""></p><p>卷积是过会儿会用到的妙妙小工具。</p><h2 id="傅里叶级数和傅里叶变换"><a href="#傅里叶级数和傅里叶变换" class="headerlink" title="傅里叶级数和傅里叶变换"></a>傅里叶级数和傅里叶变换</h2><p>我们之前提到，走样的实质是原图的高频信号被错误采样。图像作为一个 $R^2\rightarrow \text{RGBA<br>}$的函数，怎么会有高频和低频之分呢？uh actually☝️🤓 我们处理的绝大多数函数都有频域，这个频域可以通过傅里叶变换得到。</p><p>先回顾一下<strong>傅里叶级数</strong>。熟知在 $[-\frac{T}{2},\frac{T}{2}]$ 内，函数 $f(x)$ 可以表示为</p><script type="math/tex; mode=display">f(x)=\sum_{n=-\infty}^{\infty}c_n e^{inw_0 x}</script><p>其中</p><script type="math/tex; mode=display">\begin{align*}&c_n=\frac{1}{T}\int_{-\frac{T}{2}}^{\frac{T}{2}} f(t)e^{-inw_0t}dt\\&w_0=\frac{2\pi}{T}\end{align*}</script><p>这本质上是函数在闭区间内的正交基展开，这个展开的周期为 $T$.</p><p>当 $T \rightarrow \infty$ 时，令 $w_n=nw_0$，$\Delta w=w_n-w_{n-1}=w_0$ 再结合积分的定义，我们就能（不太严谨地）求出</p><script type="math/tex; mode=display">f(x)=\frac{1}{2\pi}\int_{-\infty}^{\infty}\bigg(\int_{-\infty}^{\infty}f(t)e^{-iwt}dt \bigg)e^{iwx}dw</script><p>我们可以令 $u=\frac{w}{2\pi}$ 从而去掉积分外面的那个系数</p><script type="math/tex; mode=display">f(x)=\int_{-\infty}^{\infty}\bigg(\int_{-\infty}^{\infty}f(t)e^{-2\pi iut}dt \bigg)e^{2\pi iux}du</script><p>而 $e^{2\pi iux}$ 的系数</p><script type="math/tex; mode=display">\hat f(u)=\int_{-\infty}^{\infty}f(t)e^{-2\pi iut}dt</script><p>就是 $f$ 的<strong>傅里叶变换</strong>了，它也记作 $\mathcal{F}(f)$.</p><p>把 $\hat f$ 代入就得到了<strong>逆傅里叶变换</strong></p><script type="math/tex; mode=display">f(x)=\int_{-\infty}^{\infty}\hat f(u)e^{2\pi iux}du</script><p>逆傅里叶变换把函数变成了不同频率的三角函数的积分/求和，这就是我们之前所说的“高频信号”和“低频信号”的含义。之后我们会介绍采样导致高频信号丢失的原因，不过在此之前我们先看看傅里叶变换的一些性质。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note2/fourier.png" alt=""></p><h2 id="傅里叶变换的性质"><a href="#傅里叶变换的性质" class="headerlink" title="傅里叶变换的性质"></a>傅里叶变换的性质</h2><p>我们列举傅里叶变换的几个常用的性质。</p><ol><li>如果 $f$ 是实函数，$\hat f$ 是偶函数。</li><li><p>函数和傅里叶变换的平方积分相等</p><script type="math/tex; mode=display"> \int (f(x))^2dx=\int (\hat f(u))^2du</script></li><li><p>原函数拉长，傅里叶变换收紧</p><script type="math/tex; mode=display"> \mathcal{F}(f(x/b))=b\hat f(bu)</script></li></ol><h2 id="狄拉克脉冲函数和冲激串"><a href="#狄拉克脉冲函数和冲激串" class="headerlink" title="狄拉克脉冲函数和冲激串"></a>狄拉克脉冲函数和冲激串</h2><p>狄拉克脉冲函数的定义如下：</p><script type="math/tex; mode=display">\delta(t) =\begin{cases}\infty, & t = 0 \\0, & t \neq 0\end{cases}</script><p>我们可以把连续信号的均匀间隔采样表示为冲激串</p><script type="math/tex; mode=display">s_T(x) = \sum_{n=-\infty}^{\infty}\delta(x-nT)</script><p>与原函数 $f$ 的乘积，这里的 $T$ 表示两个采样点之间的间隔。</p><p>$s_T$ 的傅里叶变换为</p><script type="math/tex; mode=display">\hat s_T(u)=\frac{1}{T}\sum_{n=-\infty}^{\infty}\delta(u-\frac{n}{T})</script><p>它仍然是一系列狄拉克函数的和。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note2/dirac.png" alt=""></p><h2 id="卷积定理"><a href="#卷积定理" class="headerlink" title="卷积定理"></a>卷积定理</h2><p>之前说过，将 $s_T$ 和原函数 $f$ 相乘能获得许多重要的采样性质，我们很快就会讨论他们了，在此之前我们还要补充最后一个知识——卷积定理。</p><script type="math/tex; mode=display">\begin{align*}&\mathcal{F}(f * g)=\hat f\hat g\\&\mathcal{F}(fg)=\hat f * \hat g\end{align*}</script><p>这就是说，时域的卷积对应频域的乘积，频域的乘积对应时域的卷积。</p><h1 id="走样的原因"><a href="#走样的原因" class="headerlink" title="走样的原因"></a>走样的原因</h1><p>一开始我们就说过，走样的实质是原图的高频信号被错误采样。现在我们的数学工具已经足以分析究竟为什么发生了错误采样，以及如何缓解他们了。</p><p>先来看看为什么我们没有正确采样高频信号。</p><p>假设我们希望对这样的函数进行采样，通过傅里叶变换我们可以得到其频域（右一）</p><p><img src="/images/learning/open-course/GAMES101/Notes/note2/sample-origin.png" alt=""></p><p>我们之前说过，可以把连续函数的均匀间隔采样表示为冲激串 $s_{T}(x)=\sum_{n=-\infty}^{\infty}\delta(x-nT)$ 和原函数 $f$ 的乘积，而我们也已经知道冲激串的傅里叶变换还是冲激串</p><script type="math/tex; mode=display">\hat s_T(u)=\frac{1}{T}\sum_{n=-\infty}^{\infty}\delta(u-\frac{n}{T})</script><p>再结合卷积定理 $\mathcal{F}(s_Tf)=\hat s_T * \hat f$，以及“卷积就是函数平移后的加权和”，我们就能推出，采样结果的傅里叶变换就是原函数的傅里叶变换的无穷个复制各按 $\frac{n}{T}$ 平移的和。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note2/sample-sampled.png" alt=""></p><p>由于我们的采样间隔 $T$ 不够小，即采样率 $\frac{1}{T}$ 不够大，所以相邻的两个复制间发生了重叠，导致高频信号和低频信号产生混合，这就引起了走样。而这正是“高频信号被错误采样”的实质。</p><p>当我们在光栅化时，我们还把像素填上了颜色，这是在“reconstruction”即重建图像。不过由于在采样时我们已经发生了走样，无论怎么重建都不会有一个非常完美的结果了。</p><p><img src="/images/l earning/open-course/GAMES101/Notes/note2/sample-recons.png" alt=""></p><h1 id="滤波器和走样的缓解方法"><a href="#滤波器和走样的缓解方法" class="headerlink" title="滤波器和走样的缓解方法"></a>滤波器和走样的缓解方法</h1><p>为了缓解走样，我们自然就要避免发生重叠。避免发生重叠的思路主要有两种：</p><ol><li>增加采样率，这样就能让相邻的两个复制距离增大。</li><li>用滤波器减弱高频信号的强度。</li></ol><p>对图像的光栅化来说，增加分辨率就对应前者；在采样前对原图应用各种滤波器就对应后者。</p><p>我们当然会问，增加采样率能缓解走样，那增加到多大合适呢？我们希望相邻的两个复制间的距离足够大以至于不发生重叠，这就需要输入信号的最高频率小于采样频率的一半。采样频率的一半也被称为<strong>奈奎斯特频率</strong>。理论上说，只要奈奎斯特频率高于被采样信号的最高频率，我们就能完美复原原信号。</p><p>接下来我们看看几个常见的滤波器，它们常被用于和别的函数做卷积。由于我们知道卷积可以被理解为一种“加权平均”，所以我们希望滤波器都是归一化的。</p><table>  <thead>    <tr>      <th>名称</th>      <th>公式</th>    </tr>  </thead>  <tbody>    <tr>      <td>Box filter（离散）</td>      <td>$a_{\text{box},r}[i] =\begin{cases}1/(2r + 1) & |i| \le r, \\0 & \text{otherwise}.\end{cases}$</td>    </tr>    <tr>      <td>Box filter（连续）</td>      <td>$f_{\text{box},r}(x) =\begin{cases}1/(2r) & -r \le x < r, \\0 & \text{otherwise}.\end{cases}$</td>    </tr>    <tr>      <td>Tent filter</td>      <td>$f_{\text{tent}}(x) =\begin{cases}1 - |x| & |x| < 1, \\0 & \text{otherwise};\end{cases}$</td>    </tr>    <tr>      <td>Gaussian filter</td>      <td>$f_{g, \sigma}(x) = \frac{1}{\sigma\sqrt{2\pi}}e^{-x^2/2\sigma^2}$</td>    </tr>  </tbody></table><p><img src="/images/learning/open-course/GAMES101/Notes/note2/filters1.png" alt=""></p><table>  <thead>    <tr>      <th>名称</th>      <th>公式</th>    </tr>  </thead>  <tbody>    <tr>      <td>B-Spline Cubic Filter</td>      <td>$f_B(x) = \frac{1}{6}\begin{cases}-3(1 - |x|)^3 + 3(1 - |x|)^2 + 3(1 - |x|) + 1 & -1 \le x \le 1, \\(2 - |x|)^3 & 1 \le |x| \le 2, \\0 & \text{otherwise}.\end{cases}$</td>    </tr>    <tr>      <td>Catmull-Rom Cubic Filter</td>      <td>$f_C(x) = \frac{1}{2}\begin{cases}-3(1 - |x|)^3 + 4(1 - |x|)^2 + (1 - |x|) & -1 \le x \le 1, \\(2 - |x|)^3 - (2 - |x|)^2 & 1 \le |x| \le 2, \\0 & \text{otherwise}.\end{cases}$</td>    </tr>    <tr>      <td>Mitchell-Netravali Cubic Filter</td>      <td>$f_M(x) = \frac{1}{3}f_B(x) + \frac{2}{3}f_C(x)\\= \frac{1}{18}\begin{cases} -21(1 - |x|)^3 + 27(1 - |x|)^2 + 9(1 - |x|) + 1 & -1 \le x \le 1, \\7(2 - |x|)^3 - 6(2 - |x|)^2 & 1 \le |x| \le 2, \\0 & \text{otherwise}.\end{cases}$</td>    </tr>  </tbody></table><p><img src="/images/learning/open-course/GAMES101/Notes/note2/filters2.png" alt=""></p><p>除了过滤高频信号之外，滤波器还在重建图像时发挥着重要作用。还记得吗，离散-连续卷积能把一系列离散点变成一个连续函数。在根据采样点重建图像时，我们基本就是在做采样点和滤波器的卷积。在光栅化的“把每个像素点的中心采样颜色填到像素点上”这一步中，我们就是在将采样点和 Box filter 做卷积。</p><p>总而言之，为了缓解走样，我们可以以图像细节丰富度为代价，先用低通滤波器滤波，再采样+重建。当然，如果我们有更高分辨率的屏幕就更好了~</p><h1 id="其他小知识"><a href="#其他小知识" class="headerlink" title="其他小知识"></a>其他小知识</h1><h2 id="常见滤波器的傅里叶变换"><a href="#常见滤波器的傅里叶变换" class="headerlink" title="常见滤波器的傅里叶变换"></a>常见滤波器的傅里叶变换</h2><p><img src="/images/learning/open-course/GAMES101/Notes/note2/fourier-all.png" alt=""></p><h2 id="卷积的单位元"><a href="#卷积的单位元" class="headerlink" title="卷积的单位元"></a>卷积的单位元</h2><p>任何离散信号和单位脉冲序列做卷积，结果还是原本的离散信号</p><script type="math/tex; mode=display">\delta[n] =\begin{cases}1, & n = 0 \\0, & n \neq 0\end{cases}</script><p>任何连续信号和狄拉克函数做卷积，结果还是原本的连续信号</p><script type="math/tex; mode=display">\delta(t) =\begin{cases}\infty, & t = 0 \\0, & t \neq 0\end{cases}</script><h2 id="二维卷积和二维滤波器"><a href="#二维卷积和二维滤波器" class="headerlink" title="二维卷积和二维滤波器"></a>二维卷积和二维滤波器</h2><p>我们这里只给出连续-连续的二维卷积，别的情况都差不多。</p><script type="math/tex; mode=display">\begin{align*}&(f*g)(x,y)=\int\intf(x-x',y-y')g(x',y')dx'dy'\end{align*}</script><p>对滤波器 $f(x)$，我们简单地定义 $g(x,y)=f(x)f(y)$ 就得到了这个滤波器对应的二维滤波器。一个比较好的性质是，如果 $f$ 是归一化的，那么 $g$ 也是归一化的。</p><h2 id="伽马值"><a href="#伽马值" class="headerlink" title="伽马值"></a>伽马值</h2><p>显示器的显示亮度关于输入信号不是线性关系。假设输入信号为 $a\in[0,1]$，则有</p><script type="math/tex; mode=display">\text{Displayed intensity}=(\text{Maximum intensity})a^\gamma</script><p>这里的 $\gamma$ 一般在 $2.2$ 左右。虽然在最开始这是 CRT 显示器的物理特性所致，但有趣的是，人眼也恰好对暗部变化比亮部变化更敏感，所以它现在作为一个刻意的设计保留了下来。</p><p>伽马矫正在影像系统中也有极大作用。假设我们在拍摄一个苹果的照片，苹果的物理亮度是 $0.5$，相机忠实地把它记录了下来。而当显示器显示时，就显示出了 $0.5^{2.2}\approx<br> 0.22$ 的物理亮度，这显然不是我们想要的。因此在我们拍摄照片之后，相机的图像处理器就会自动对照片进行伽马矫正。</p><h2 id="图像锐化"><a href="#图像锐化" class="headerlink" title="图像锐化"></a>图像锐化</h2><p>Unsharp Mask 是一个经典的图像锐化算法。令高斯模糊核为 $G$，冲激函数为 $\delta$，它先提取原始图像的高频信号</p><script type="math/tex; mode=display">I_{detail} = I_{orig} - I_{orig} * G</script><p>再把这些高频信号加入回原图中</p><script type="math/tex; mode=display">I_{sharp} = I_{orig} + \alpha I_{detail}</script><p>综合起来就是</p><script type="math/tex; mode=display">I_{sharp}=I_{orig}*((1+\alpha)\delta-G)</script><h2 id="图像缩放"><a href="#图像缩放" class="headerlink" title="图像缩放"></a>图像缩放</h2><p>直接对一个像素化的图像采样虽然效率很高，但效果不佳。先用连续的滤波器重建信号，再用低通滤波器过滤高频信号，再采样会得到更好的结果，这被称为 resampling，重采样。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note2/resample.png" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在 Transformation 部分，我们已经可以把一个三维空间里的三角形投影到平面上。但怎么把一个纯色三角形绘制到屏幕上呢？我们知道屏幕由大量的像素点组成，那么怎么确定每个像素点是什么颜色呢？&lt;/p&gt;
&lt;p&gt;我们通过采样给每个像素点涂上颜色。我们可以检查每个像素的中心点</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Assignment 1 Transformation</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw1-transformation/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw1-transformation/</id>
    <published>2025-08-22T03:00:58.000Z</published>
    <updated>2025-08-22T03:14:43.978Z</updated>
    
    <content type="html"><![CDATA[<p>本次作业要求我们实现旋转矩阵、投影矩阵。我们先简单看下作业是怎么做的，再看看代码框架里的几个有趣的地方。</p><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><h2 id="两个旋转矩阵"><a href="#两个旋转矩阵" class="headerlink" title="两个旋转矩阵"></a>两个旋转矩阵</h2><p>绕 $z$ 轴的旋转矩阵实现起来很简单，把课上的内容翻译成代码就好。在使用 std 的 sin 和 cos 时要注意把角度转换成弧度。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Matrix4f <span class="token function">get_model_matrix</span><span class="token punctuation">(</span><span class="token keyword">float</span> rotation_angle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f model <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix4f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> angle_rad <span class="token operator">=</span> rotation_angle <span class="token operator">*</span> MY_PI <span class="token operator">/</span> <span class="token number">180.0</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f rotate<span class="token punctuation">;</span>    <span class="token keyword">float</span> sine <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">sin</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> cosine <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span><span class="token punctuation">;</span>    rotate <span class="token operator">&lt;&lt;</span> cosine<span class="token punctuation">,</span> <span class="token operator">-</span>sine<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            sine<span class="token punctuation">,</span> cosine<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>    model <span class="token operator">=</span> rotate <span class="token operator">*</span> model<span class="token punctuation">;</span>    <span class="token keyword">return</span> model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提高项里的旋转矩阵用课上讲的 Rodrigues’ rotation formula 就行：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*    Computes the 4x4 rotation matrix representing a rotation of rotation_angle (in degree)     around a given normalized axis vector that passes through the origin,     using Rodrigues' rotation formula.*/</span>Eigen<span class="token double-colon punctuation">::</span>Matrix4f <span class="token function">get_rotation</span><span class="token punctuation">(</span>Vector3f axis<span class="token punctuation">,</span> <span class="token keyword">float</span> rotation_angle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> angle_rad <span class="token operator">=</span> rotation_angle <span class="token operator">*</span> MY_PI <span class="token operator">/</span> <span class="token number">180.0</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Matrix3f rot_mat <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span> <span class="token operator">*</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix3f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rot_mat <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> std<span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> axis <span class="token operator">*</span> axis<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Matrix3f cross_product_mat<span class="token punctuation">;</span>    cross_product_mat <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>axis<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        axis<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>axis<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token operator">-</span>axis<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    rot_mat <span class="token operator">+=</span> std<span class="token double-colon punctuation">::</span><span class="token function">sin</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span> <span class="token operator">*</span> cross_product_mat<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f trans_mat <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix4f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trans_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">topLeftCorner</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> rot_mat<span class="token punctuation">;</span>    <span class="token keyword">return</span> trans_mat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="投影矩阵"><a href="#投影矩阵" class="headerlink" title="投影矩阵"></a>投影矩阵</h2><p>投影矩阵就相对复杂一些了，先上代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Matrix4f <span class="token function">get_projection_matrix</span><span class="token punctuation">(</span><span class="token keyword">float</span> eye_fov<span class="token punctuation">,</span> <span class="token keyword">float</span> aspect_ratio<span class="token punctuation">,</span>                                      <span class="token keyword">float</span> zNear<span class="token punctuation">,</span> <span class="token keyword">float</span> zFar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Students will implement this function</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f projection <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix4f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f perspective<span class="token punctuation">;</span>    <span class="token keyword">float</span> cotangent <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> std<span class="token double-colon punctuation">::</span><span class="token function">tan</span><span class="token punctuation">(</span>eye_fov <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> z_delta <span class="token operator">=</span> zFar <span class="token operator">-</span> zNear<span class="token punctuation">;</span>    perspective <span class="token operator">&lt;&lt;</span> cotangent <span class="token operator">/</span> aspect_ratio<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token number">0</span><span class="token punctuation">,</span> cotangent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>zFar <span class="token operator">+</span> zNear<span class="token punctuation">)</span> <span class="token operator">/</span> z_delta<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> zFar <span class="token operator">*</span> zNear <span class="token operator">/</span> z_delta<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    projection <span class="token operator">=</span> perspective <span class="token operator">*</span> projection<span class="token punctuation">;</span>    <span class="token keyword">return</span> projection<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们会发现输入的 zNear 和 zFar 都是正数，他们表示近平面和远平面到原点的距离，这与课上讲的不同。课上讲的 $n$ 和 $f$ 表示近平面和远平面在 $z$ 轴的坐标，他们是负数。</p><p>然后我们分析 rasterizer.cpp 里的 draw 函数，下面这段代码里，v 是三角形的三个顶点构成的数组，三个顶点都已经被变换到了 $[-1,1]^3$ 的正方体中。</p><p>注意 <code>vert.z() = vert.z() * f1 + f2</code> 这行代码，把 $-1$ 代入右边得到 $-n$，$1$ 代入右边得到 $-f$，因此我们有理由猜测 $[-n,-f]$ 被映射到了 $[-1,1]$. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> vert <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vert<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token operator">*</span>width<span class="token operator">*</span><span class="token punctuation">(</span>vert<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vert<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token operator">*</span>height<span class="token operator">*</span><span class="token punctuation">(</span>vert<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vert<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> vert<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> f2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下我们的发现：</p><ol><li>输入的 zNear 和 zFar 都是正数，表示近平面和远平面到原点的距离</li><li>$[-n,-f]$ 被映射到了 $[-1,1]$</li></ol><p>最终我们能写出这样的投影矩阵：</p><script type="math/tex; mode=display">\large\text{M}_\text{per} =\begin{bmatrix}\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & \frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & -\frac{f+n}{f-n} & -\frac{2fn}{f-n} \\0 & 0 & -1 & 0\end{bmatrix}</script><p>翻译成代码就好。</p><h1 id="代码框架里有趣的地方"><a href="#代码框架里有趣的地方" class="headerlink" title="代码框架里有趣的地方"></a>代码框架里有趣的地方</h1><h2 id="ind-的作用"><a href="#ind-的作用" class="headerlink" title="ind 的作用"></a>ind 的作用</h2><p>首先我们看向 main.cpp 的 main 函数里的这段代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3f<span class="token operator">></span> pos<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3i<span class="token operator">></span> ind<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>pos 显然是三角形的三个顶点，但 ind 是做什么的？uh actually🤓☝️它定义了如何将顶点连接起来。对三角形来说它当然没什么用，但对多边形来说，它就很有用了。</p><p>比如说，想象一下我们在画一个六边形，我们需要六个顶点。但由于在渲染时我们主要绘制三角形，所以我们要把六边形拆分成多个三角形，而拆分出的每个三角形就对应着 ind 里的一个元素了。</p><p>对六边形来说，我们可能会定义下面这样的 pos 和 ind</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3f<span class="token operator">></span> pos<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 0: 右</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 1: 右上</span>    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 2: 左上</span>    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token comment">// 3: 左</span>    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 4: 左下</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 5: 右下</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3i<span class="token operator">></span> ind<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="id-的作用"><a href="#id-的作用" class="headerlink" title="id 的作用"></a>id 的作用</h2><p>继续看向 main.cpp 的 main 函数，把目光投向这段代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> pos_id <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">load_positions</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> ind_id <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">load_indices</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span>r<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>pos_id<span class="token punctuation">,</span> ind_id<span class="token punctuation">,</span> rst<span class="token double-colon punctuation">::</span>Primitive<span class="token double-colon punctuation">::</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们把 id 传入了 draw 函数来画图。但为什么要用 id 呢？直接 &amp; 传参不行吗？</p><p>【TODO：我不知道。AI说在正式的渲染代码里，我们会在load时做一些操作诸如把数据上传到显存，或者重新组织上传的各个数据来提高效率，但咱也不知道是不是真的。】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次作业要求我们实现旋转矩阵、投影矩阵。我们先简单看下作业是怎么做的，再看看代码框架里的几个有趣的地方。&lt;/p&gt;
&lt;h1 id=&quot;作业实现&quot;&gt;&lt;a href=&quot;#作业实现&quot; class=&quot;headerlink&quot; title=&quot;作业实现&quot;&gt;&lt;/a&gt;作业实现&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Assignments" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Assignments/"/>
    
    
  </entry>
  
  <entry>
    <title>Note 1 Transformation</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note1-transformation/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note1-transformation/</id>
    <published>2025-08-19T07:10:28.000Z</published>
    <updated>2025-08-22T03:14:43.967Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2D-Transformation"><a href="#2D-Transformation" class="headerlink" title="2D Transformation"></a>2D Transformation</h1><p>在二维空间中，我们能用二维矩阵表示所有的线性变换。但二维空间中的平移在二维空间中不是线性变换，因此我们希望找到另一个空间，并将二维空间嵌入，让二维平移在这个空间中变为线性变换。把笛卡尔坐标扩展为齐次坐标，就得到了这样的空间。</p><p>对二维空间的一点 $(x,y)$，三元组 $(xZ,yZ,Z)$ 即为该点的齐次坐标。如 $(1,2)$ 可表示为 $(1,2,1)$ 或 $(100,200,100)$. 换句话说，二维空间的任何点都能表示为齐次坐标 $(X,Y,Z)$，其中 $Z\neq 0$.</p><p>另外，如果我们把无穷远点也考虑进来，我们就可以用 $(x,y,0)$ 表示无穷远点。</p><p>叽里咕噜说什么呢，快告诉我怎么用线性变换表示平移！</p><p>对二维空间的一点 $(x,y)$，首先将它转化为齐次坐标得到 $(x,y,1)$，然后与下面的矩阵相乘</p><script type="math/tex; mode=display">M = \begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1\end{bmatrix}</script><p>就得到了 $(x+t_x,y+t_y,1)$. 然后再转换回笛卡尔坐标，就得到了 $(x+t_x,y+t_y)$.</p><p>这样一来，旋转、平移就能统一成下面的形式：</p><script type="math/tex; mode=display">M = \begin{bmatrix}\cos \theta & -\sin \theta & t_x \\\sin \theta & \cos \theta & t_y \\0 & 0 & 1\end{bmatrix}</script><h1 id="3D-Transformation"><a href="#3D-Transformation" class="headerlink" title="3D Transformation"></a>3D Transformation</h1><p>与二维的情况类似，我们也把三维空间嵌入一个新空间。</p><p>对三维空间的一点 $(x,y,z)$，三元组 $(xS,yS,zS,S)$ 即为该点的齐次坐标。如 $(1,2,3)$ 可表示为 $(1,2,3,1)$ 或 $(100,200,300,100)$. 换句话说，三维空间的任何点都能表示为齐次坐标 $(X,Y,Z,S)$，其中 $S\neq 0$.</p><p>我们这里讨论右手坐标系，下面给出按右手定则旋转 $\theta$ 角度的矩阵：</p><script type="math/tex; mode=display">R_x(\theta) = \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & \cos \theta & -\sin \theta & 0 \\ 0 & \sin \theta & \cos \theta & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix}</script><script type="math/tex; mode=display">R_y(\theta) = \begin{bmatrix} \cos \theta & 0 & \sin \theta & 0 \\ 0 & 1 & 0 & 0 \\ -\sin \theta & 0 & \cos \theta & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix}</script><script type="math/tex; mode=display">R_z(\theta) = \begin{bmatrix} \cos \theta & -\sin \theta & 0 & 0 \\ \sin \theta & \cos \theta & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix}</script><p>你会注意到沿 $y$ 轴旋转的矩阵和别的不一样，但这是完全正确的，认真算一算就好了。</p><p>（我没感觉这里有什么“深刻含义”，但感觉即使有也应该不会很有用……）</p><p>（不过不知道如果推广到 $n$ 维旋转会不会有用）</p><p>（可我们生活在三次元！）</p><p>值得注意的是，<strong>旋转矩阵都是正交矩阵</strong>，所以它的转置就是它的逆。</p><p>世界上还存在一个叫做 <strong>Rodrigues 旋转公式</strong>的东西，它给出了向量 $v$ 绕单位向量 $k$ 旋转 $\theta$ 角度得到的结果。（按右手定则旋转）</p><script type="math/tex; mode=display">\mathbf{v}_{\text{rot}} = \mathbf{v} \cos\theta + (\mathbf{k} \times \mathbf{v}) \sin\theta + \\\mathbf{k}(\mathbf{k} \cdot \mathbf{v})(1 - \cos\theta)</script><p><img src="/images/learning/open-course/GAMES101/Notes/note1/rodrigues.png" alt=""></p><p>当然也可以把这个旋转矩阵写出来：</p><script type="math/tex; mode=display">\mathbf{R}(\mathbf{k}, \theta) = \cos(\theta)\mathbf{I} + (1 - \cos(\theta))\mathbf{k}\mathbf{k}^T + \sin(\theta)\begin{bmatrix} 0 & -k_z & k_y \\ k_z & 0 & -k_x \\ -k_y & k_x & 0 \end{bmatrix}</script><p>最右边那个矩阵是 $k$ 的叉乘矩阵啦~</p><h1 id="Viewing-transformation"><a href="#Viewing-transformation" class="headerlink" title="Viewing transformation"></a>Viewing transformation</h1><p>2D 和 3D transformation 都是基础变换，接下来我们研究游戏里的画面是如何渲染到屏幕上的。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/map-seq.png" alt=""></p><p>如下图所示，我们有一个摄像机、两个方块，那么我们是怎么计算出摄像机拍摄的画面的呢（参考右下角）？</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/godot-camera.png" alt=""></p><p>我们按照下面的流程进行操作：</p><h2 id="Camera-transformation"><a href="#Camera-transformation" class="headerlink" title="Camera transformation"></a>Camera transformation</h2><p>首先，我们变换空间让摄像机位于坐标原点，且面向 $z$ 轴负方向，头顶朝 $y$ 轴正方向。对上图来说，就是把 $w$ 变换为 $z$ 轴，把 $v$ 变换为 $y$ 轴。</p><p>对应的矩阵是</p><script type="math/tex; mode=display">\text{M}_{\text{cam}} =\begin{bmatrix}u_x & u_y & u_z & 0 \\v_x & v_y & v_z & 0 \\w_x & w_y & w_z & 0 \\0 & 0 & 0 & 1\end{bmatrix}\times\begin{bmatrix}1 & 0 & 0 & -\text{cam}_x \\0 & 1 & 0 & -\text{cam}_y \\0 & 0 & 1 & -\text{cam}_z \\0 & 0 & 0 & 1\end{bmatrix}</script><p>这里的小技巧是，旋转矩阵的逆是其转置，所以我们先算出 $xyz$ 轴变换到 $uvw$ 轴的旋转矩阵，再对其转置，就得到了把 $uvw$ 变换到 $xyz$ 的矩阵。</p><h2 id="Projection-transformation"><a href="#Projection-transformation" class="headerlink" title="Projection transformation"></a>Projection transformation</h2><p>然后，我们把相机拍摄的区域变换到 $[-1,1]^3$ 中，这是一个规范化，为未来把区域放到屏幕上做准备。在此之前，我们要先确定相机能够拍摄的区域的范围。这里涉及到的变量主要有 fov、aspect ratio、near、far. </p><p>下图能清晰地解释 fov 和 aspect ratio。fov 即 field of view，表示用角度衡量的可见范围；aspect ratio 则是显示区域的宽高比。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/fov-and-aspect-ratio.png" alt=""></p><p>near 和 far 则定义了剔除边界，我们只渲染满足 $z \in [\text{near}, \text{far}]$ 的东西。原点、近平面和原平面共同划分出了一块有限的空间，这就是摄像机拍摄的区域（视锥），我们会把他变换到 $[-1,1]^3$ 中。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/near-far.png" alt=""></p><p>变换分为两步，第一步是把视锥变换为长方体，第二步把长方体变换为 $[-1,1]^3$ 的正方体。</p><p>在第一步变换时，我们希望满足以下两点：</p><ol><li>near 和 far 平面上的点的 $z$ 值不变</li><li>近大远小，且缩放比例符合相似三角形的规律</li></ol><p>结合齐次坐标，我们就能得到以下矩阵：</p><script type="math/tex; mode=display">\begin{align*}\text{M}_\text{per}&=\begin{bmatrix}\frac{2}{r-l} & 0 & 0 & -\frac{r+l}{r-l} \\0 & \frac{2}{t-b} & 0 & -\frac{t+b}{t-b} \\0 & 0 & \frac{2}{n-f} & -\frac{n+f}{n-f} \\0 & 0 & 0 & 1\end{bmatrix}\times\begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\0 & 0 & n+f & -nf \\0 & 0 & 1 & 0\end{bmatrix}\\&=\begin{bmatrix}\frac{2n}{r-l} & 0 & -\frac{r+l}{r-l} & 0 \\0 & \frac{2n}{t-b} & -\frac{t+b}{t-b} & 0 \\0 & 0 & \frac{n+f}{n-f} & -\frac{2nf}{n-f} \\0 & 0 & 1 & 0\end{bmatrix}\end{align*}</script><p>第一个等号右边的式子中，右边的矩阵把视锥压缩为一个长方体，左边的矩阵把这个长方体变换到 $[-1,1]^3$.</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/rectangle.png" alt=""></p><p>我们可以根据 $\text{near},\text{fov},\text{aspectRatio<br>}$ 求出 $l,t,r,b$.</p><script type="math/tex; mode=display">\begin{align*}&\text{t} = -n \times \tan\left(\frac{\text{fov}}{2}\right)\\&\text{b} = -\text{t}\\&\text{r} = \text{t} \times \text{aspectRatio}\\&\text{l} = -\text{r}\end{align*}</script><p><img src="/images/learning/open-course/GAMES101/Notes/note1/fov-ltrb.png" alt=""></p><p>也就是说，我们可以把投影矩阵写为：</p><script type="math/tex; mode=display">\large\text{M}_\text{per} =\begin{bmatrix}-\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & -\frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & \frac{n+f}{n-f} & -\frac{2nf}{n-f} \\0 & 0 & 1 & 0\end{bmatrix}</script><h2 id="Viewport-transformation"><a href="#Viewport-transformation" class="headerlink" title="Viewport transformation"></a>Viewport transformation</h2><p>最后，我们会把 $[-1,1]^3$ 的内容的宽高映射为屏幕大小。在这个变换中 $z$ 坐标不变，因此变换矩阵为：</p><script type="math/tex; mode=display">\large\text{M}_\text{viewport}=\begin{bmatrix}\frac{width}{2} & 0 & 0 & \frac{width}{2} \\0 & \frac{height}{2} & 0 & \frac{height}{2} \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，我们的变换矩阵为</p><script type="math/tex; mode=display">\begin{align*}&\text{M}=\text{M}_\text{viewport}\text{M}_\text{per}\text{M}_\text{cam}\end{align*}</script><p>其中</p><script type="math/tex; mode=display">\begin{align*}&\text{M}_{\text{cam}} =\begin{bmatrix}u_x & u_y & u_z & 0 \\v_x & v_y & v_z & 0 \\w_x & w_y & w_z & 0 \\0 & 0 & 0 & 1\end{bmatrix}\times\begin{bmatrix}1 & 0 & 0 & -\text{cam}_x \\0 & 1 & 0 & -\text{cam}_y \\0 & 0 & 1 & -\text{cam}_z \\0 & 0 & 0 & 1\end{bmatrix}\\\large&\text{M}_\text{per} =\begin{bmatrix}-\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & -\frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & \frac{n+f}{n-f} & -\frac{2nf}{n-f} \\0 & 0 & 1 & 0\end{bmatrix}\\&\large\text{M}_\text{viewport}=\begin{bmatrix}\frac{width}{2} & 0 & 0 & \frac{width}{2} \\0 & \frac{height}{2} & 0 & \frac{height}{2} \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{bmatrix}\end{align*}</script><p>要注意的是，我们讨论的 $n$ 和 $f$ 被定义为坐标值，它们是小于 0 的。一些地方把 $n$ 和 $f$ 定义为到近/远平面的距离，这是大于 0 的，这会引起投影矩阵的变化。另外，不同的坐标系约定也会引起矩阵的变化。</p><p>比如在OpenGL中， $n$ 和 $f$ 被定义为到近/远平面的距离，这是大于 0 的，而且他们的 projection transformation 把拍摄内容从右手坐标系的视图空间映射到左手坐标系的标准设备坐标（NDC）空间。特别地，$z$ 轴的 $[ -n,-f]$ 被映射到 $[-1,1]$ （这似乎说明在 NDC 空间中，$z$ 值较小的内容渲染更靠前？）</p><p>他们的 $\text{M}_\text{their-per}$ 为：</p><script type="math/tex; mode=display">\large\text{M}_\text{their-per} =\begin{bmatrix}\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & \frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & -\frac{f+n}{f-n} & -\frac{2fn}{f-n} \\0 & 0 & -1 & 0\end{bmatrix}</script><p>Godot 使用和 OpenGL 一样的矩阵，下面是他们设置 $\text{M}_\text{per}$ 的代码。还要注意的是，他们使用 column-major 的方法存储数据，即</p><script type="math/tex; mode=display">M =\begin{pmatrix}\text{columns}[0][0] & \text{columns}[1][0] \\\text{columns}[0][1] & \text{columns}[1][1]\end{pmatrix}</script><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Projection</span><span class="token double-colon punctuation">::</span><span class="token function">set_perspective</span><span class="token punctuation">(</span>real_t p_fovy_degrees<span class="token punctuation">,</span> real_t p_aspect<span class="token punctuation">,</span> real_t p_z_near<span class="token punctuation">,</span> real_t p_z_far<span class="token punctuation">,</span> <span class="token keyword">bool</span> p_flip_fov<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p_flip_fov<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p_fovy_degrees <span class="token operator">=</span> <span class="token function">get_fovy</span><span class="token punctuation">(</span>p_fovy_degrees<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> p_aspect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>real_t sine<span class="token punctuation">,</span> cotangent<span class="token punctuation">,</span> deltaZ<span class="token punctuation">;</span>real_t radians <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token double-colon punctuation">::</span><span class="token function">deg_to_rad</span><span class="token punctuation">(</span>p_fovy_degrees <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>deltaZ <span class="token operator">=</span> p_z_far <span class="token operator">-</span> p_z_near<span class="token punctuation">;</span>sine <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token double-colon punctuation">::</span><span class="token function">sin</span><span class="token punctuation">(</span>radians<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deltaZ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sine <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p_aspect <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cotangent <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>radians<span class="token punctuation">)</span> <span class="token operator">/</span> sine<span class="token punctuation">;</span><span class="token function">set_identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cotangent <span class="token operator">/</span> p_aspect<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cotangent<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_z_far <span class="token operator">+</span> p_z_near<span class="token punctuation">)</span> <span class="token operator">/</span> deltaZ<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> p_z_near <span class="token operator">*</span> p_z_far <span class="token operator">/</span> deltaZ<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2D-Transformation&quot;&gt;&lt;a href=&quot;#2D-Transformation&quot; class=&quot;headerlink&quot; title=&quot;2D Transformation&quot;&gt;&lt;/a&gt;2D Transformation&lt;/h1&gt;&lt;p&gt;在二维空间中，我们能</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>杀戮尖塔的框架如此自洽，我们能离开它吗？</title>
    <link href="http://rinevard.github.io/wiki/game-design/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94%E6%A1%86%E6%9E%B6/"/>
    <id>http://rinevard.github.io/wiki/game-design/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94%E6%A1%86%E6%9E%B6/</id>
    <published>2025-07-10T12:22:38.000Z</published>
    <updated>2025-08-20T11:13:48.877Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 70%;}</style><p>最近在设计卡牌游戏（你知道的，我一直是牌佬），发现以前做的翻牌游戏原型的翻牌玩法本身随机性过强，从而拓展空间过小，但“棋盘上的随从交互”非常有趣，于是就打算从它出发开始进一步设计。初步的想法是做卡牌肉鸽。（哇，又一个卡牌肉鸽）</p><p><img src="/images/game-design/杀戮尖塔框架/reverse_prototype.png" alt=""></p><p>我对肉鸽并没有特别的喜爱，因为我一直想着，如果我们拿走了玩家的时间，起码要补偿一些什么，而肉鸽似乎并没有补偿一些我很喜欢的东西。不过无论如何，我还是挺喜欢打牌的，杀戮尖塔、炉石狗头人冒险、邪恶冥刻都是我很喜欢的游戏，所以做个卡牌肉鸽也还挺不错。按我的理解，肉鸽最重要的是每个小关卡的体验，因此我就着手开始做每局牌局的原型了。</p><p>然后让我们开始最有趣的设计环节！</p><p>现在我们面前有一个3x5的牌桌，那么接下来该做什么？我们先随便拿点手牌吧，可以把手牌放到牌桌上来召唤随从，然后和敌方随从打架。但手牌从哪里来，费用机制又怎么做呢？这就引出了本文的核心内容——杀戮尖塔的框架如此自洽，我们能离开它吗？</p><h1 id="杀戮尖塔"><a href="#杀戮尖塔" class="headerlink" title="杀戮尖塔"></a>杀戮尖塔</h1><p>杀戮尖塔为什么是神？在谈论这个问题之前，我想先说说其他卡牌游戏相较于爬塔究竟差在了哪里（误</p><p>总之，让我们来看看杀戮尖塔自洽的设计吧。</p><p><img src="/images/game-design/杀戮尖塔框架/slayspire.jpg" alt=""></p><h2 id="单局牌局的自洽"><a href="#单局牌局的自洽" class="headerlink" title="单局牌局的自洽"></a>单局牌局的自洽</h2><p>杀戮尖塔的手牌从哪里来，费用机制又是怎样的？在杀戮尖塔中，如果不考虑特殊效果，我们在回合开始时会丢弃所有手牌并抽五张牌，并且费用重置为三费。</p><p>我们先来聊聊前者。前者在玩起来时感觉十分自然，但从设计的角度，其实是一个并不显然的设计。我简单调研了一下，发现回合开始时刷新手牌似乎是DBG游戏的标配，其开山鼻祖是《皇舆争霸》（Dominion），接下来我们来看看它有怎样的效果。</p><p>我认为最关键的两点是，<strong>减少了卡手的可能性</strong>、<strong>降低了策略性</strong>。刷新手牌显然能减少卡手，但为什么降低了策略性呢，以及这是好事吗？</p><p>为什么它降低了策略性？因为手牌的刷新就意味着玩家减少了对下一回合的预期。回合制游戏的很大一部分策略性是由对下一回合的预期引起的。对炉石（以及很多CCG）来说，我会根据场面考虑每张牌什么时候打出有最大收益，甚至猜测对手接下来的行动并预留一些卡牌。而杀戮尖塔则杜绝了这种预期，让玩家根据敌人当前回合的意图，结合每回合发的牌打最优解。</p><p>是的，最优解。对很多卡牌游戏来说，最优解的计算量是极大的，而杀戮尖塔极大地简化了这个计算量，让每回合最优解的计算都并不困难，从而降低了思维量。这当然不是坏事，我认为这是相当优秀的设计。游戏并不是为了难倒玩家而存在的，比起难倒玩家，让玩家通过自己的努力克服难关更重要。</p><p><img src="/images/game-design/杀戮尖塔框架/doc-pengpeng.jpg" alt=""></p><p>如果手牌刷新，那费用自然也要刷新，这便是手牌和费用的自洽了。而由此也能推出杀戮尖塔不做随从的理由了。随从是持续性的，而法术是一次性的。如果手牌在刷新，那怎么和随从打combo呢？</p><p>所以我认为怪物火车并不如杀戮尖塔自洽。我这回合费用不足以打出所有的治疗牌，然后回合结束治疗牌就全被扔到弃牌堆里了，那我缺的combo谁给我补啊😭</p><p>如果总结一下，我会说杀戮尖塔的每一局都给我带来了炉石里奥秘法般的体验，依靠法术轰炸创死对面，但没有很多的同时依靠多张卡牌的combo，<strong>单局牌局</strong>运营不多。</p><h2 id="每局游戏的自洽"><a href="#每局游戏的自洽" class="headerlink" title="每局游戏的自洽"></a>每局游戏的自洽</h2><p>每局游戏的自洽又可以分为思维量要求的张弛有度，以及游戏机制本身的自洽。</p><p>先说前者。单局牌局策略性较低，但一整局游戏中运营是一个策略性很高的操作，也因此既不会玩得太累，也不会太简单。</p><p>再说后者。主要要说的是“血量保持”的机制。如果单局牌局的双方始终强度接近（比如对称式卡牌游戏），那血量显然也是需要在每局刷新的。不过对非对称游戏来说，控制强度接近实在有点困难，血量保持和每一大层的血量回复是一个简单的平衡手段。</p><p>原本还想说说易进难出的卡组，但实在没感觉它和别的东西很“自洽”。我对机制“自洽”的理解是把这个机制换成别的，游戏就很难工作了。比如把抽卡换成每回合抽一张，那费用重置就会导致一下就把牌打完；把血量换成每局重置，那游戏就简单一大截了。</p><p>而卡组的易进难出看起来是一个控制强度的自然手段，简单地把它改为限制卡组最少十五张，允许自由增删，似乎也不会破坏整个游戏。虽然没有原来好，但至少不是毁灭性的。</p><p><img src="/images/game-design/杀戮尖塔框架/slayspire-shop.jpg" alt=""></p><p>有趣的是，杀戮尖塔似乎并没有很多提高单卡强度的手段，而许多类似的卡牌肉鸽会做大量的单卡强度的提高。比如——邪恶冥刻。</p><h1 id="邪恶冥刻"><a href="#邪恶冥刻" class="headerlink" title="邪恶冥刻"></a>邪恶冥刻</h1><p>我们聊聊莱西模组，这最接近卡牌肉鸽。</p><h2 id="单局牌局的自洽-1"><a href="#单局牌局的自洽-1" class="headerlink" title="单局牌局的自洽"></a>单局牌局的自洽</h2><p>邪恶冥刻每回合抽一张牌（可选抽牌组的牌或者松鼠牌），费用不自然回复，而是依靠献祭随从获得。它的原型来自ludum dare 43这场gamejam，献祭机制在那里就被定下来了。献祭机制确实非常好玩，所以整个游戏都是以它为核心发展出去的。 </p><p><img src="/images/game-design/杀戮尖塔框架/sacrifice-jam.png" alt=""></p><p>献祭是费用机制，那抽牌机制是怎么根据献祭被确定的呢？抽牌无非两种，一种是刷新，一种是保留手牌每回合抽卡。献祭机制导致高费牌难以立即打出，毕竟如果把高费牌刷掉，下次抽到就不知道是什么时候了。所以显然保留手牌更合适。</p><p>比起杀戮尖塔，邪恶冥刻的单局牌局更具”持续性“，我们不仅能考虑到下一回合，还能考虑到下下回合。随从站场、手牌不刷新、献祭机制都是持续性的体现。</p><p>但运气成分实在是太高了！过牌的缺乏导致我们极度依赖于起手，费用不自然回复和五点伤害差就输又强化了这一点。</p><p>不过说到底，这些问题都是因为每回合只抽一张牌对卡组构筑提出了极高的要求。好牌可能沉底，新牌也可能沉底，一沉底这局就没法玩了。</p><p>作者Daniel用奇妙的方式解决了问题——在地图上提供大量的牌组改造节点，并鼓励超模单卡。我们会在下一节讨论这一点。</p><p>在此之前，我们来看看邪恶冥刻的原型吧：<a href="https://dmullinsgames.itch.io/sacrifices-must-be-made">https://dmullinsgames.itch.io/sacrifices-must-be-made</a></p><h2 id="每局游戏的自洽-1"><a href="#每局游戏的自洽-1" class="headerlink" title="每局游戏的自洽"></a>每局游戏的自洽</h2><p><img src="/images/game-design/杀戮尖塔框架/inscription.png" alt=""></p><p>如我们之前所言，每回合只抽一张牌对卡组构筑提出了极高的要求。一个自然的思路是允许玩家自由调整卡组，只是设置些许限制，比如每张牌最多带两张、至少二十张牌什么的。但邪恶冥刻并不是这么做的。</p><p>在邪恶冥刻中，删卡并不是很困难的事，造超模单卡也非常简单。祭坛、真菌学家节点可以同时实现这两点，骨王可以删卡，画家可以复制超模单卡，每层可以拿两三张稀有卡。这就让玩家能够迅速提升单卡质量，靠超模单卡和对面打架。</p><p>也因此在邪恶冥刻中经常会出现一回合秒对面的局，说实话我觉得这并不是太好的设计，不过确实挺自洽的。</p><h1 id="我的游戏"><a href="#我的游戏" class="headerlink" title="我的游戏"></a>我的游戏</h1><p>（哇，你的游戏和杀戮尖塔、邪恶冥刻都是一级标题，那一定和他们一样厉害吧</p><p><img src="/images/game-design/杀戮尖塔框架/reverse_prototype.png" alt=""></p><p>现在我们面前有一个3x5的牌桌，那么接下来该做什么？我们先随便拿点手牌吧，可以把手牌放到牌桌上来召唤随从，然后和敌方随从打架。但手牌从哪里来，费用机制又怎么做呢？</p><p>随从是站场的持续性的东西，所以我们就不刷新手牌了，而是每回合抽一张牌。费用刷新也未尝不可，不过我挺喜欢邪恶冥刻的献祭机制的，所以就直接搬过来用了。邪恶冥刻太卡手了，所以我们每回合再给玩家塞一张松鼠牌。</p><p>不过要说明的是，这些只是理论推导。在实际做原型的时候我也测试了刷新手牌、刷新费用，发现确实还是每回合抽一张牌+献祭机制和这个随从交互机制的契合度最高。理论和实际相符说明理论有一定指导意义，以后可以接着用，理论与实际不符说明理论在胡扯，就要调整了。</p><p>至此，我们完成了单局牌局的设计。之后我把牌桌改成了4x5，发现更有策略也更好玩了，找人试玩了一下之后激进地改成了5x7，居然又更有策略更好玩了，那暂时就这样吧。</p><p><img src="/images/game-design/杀戮尖塔框架/5x7prototype.png" alt=""></p><p>这里是试玩链接：</p><p><a href="/games/card-chess-prototype/index.html" target="_blank" rel="noopener noreferrer">开始游戏（将在新标签页打开）</a></p><p>喜欢的话可以填个问卷，谢谢喵！</p><p><a href="https://wj.qq.com/s2/23112055/a88d/" target="_blank" rel="noopener noreferrer">问卷（将在新标签页打开）</a></p><p>那么每局游戏该怎么做呢？由于我们的机制和邪恶冥刻相似，所以它会遇到的问题我们也都会遇到。最关键的两点就是牌越多越菜和关键牌沉底。</p><p>一开始我尝试解决前者，然后偶然间得到了一个我觉得还不错的，能同时解决这两个问题的方案。</p><p>解决问题无非从单局牌局和整局游戏考虑，我想了半天没想到怎么用在单局内解决问题，于是就想研究下通过调整整局游戏的运营来解决问题。</p><p>在玩卡牌肉鸽的时候，我们经常遇到选牌加入牌组不如跳过的情况，这就是典型的“牌越多越菜”。那怎么保证每次选牌都有补强呢？考虑到我们的献祭机制，我就想到把可选牌献祭成随时可以使用的一次性道具，这样每次选牌都至少能让玩家变强一点。</p><p>道具怎么做呢？初步想法是把牌的费用减半，法术牌不变，随从牌在下个回合开始时自动被献祭。</p><p>有趣的是，它也缓解了关键牌沉底的问题，毕竟一方面道具能帮助我们过渡，另一方面我们也能直接把关键牌献祭成道具，然后就不用担心沉底了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 70%;
}
&lt;/style&gt;

&lt;p&gt;最近在设计卡牌游戏（你知道的，我一直是牌佬），发现以前做的翻牌游戏原型的翻牌玩法本身随机性过强，从而拓展空间过小，但“棋盘上的随从交互”非常有趣，于是就打算从它出发开始进一步设计。初步的想法是</summary>
      
    
    
    
    <category term="游戏设计" scheme="http://rinevard.github.io/categories/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>_我也想做出优秀的作品</title>
    <link href="http://rinevard.github.io/wiki/others/thoughts/%E6%88%91%E4%B9%9F%E6%83%B3%E5%81%9A%E5%87%BA%E4%BC%98%E7%A7%80%E7%9A%84%E4%BD%9C%E5%93%81/"/>
    <id>http://rinevard.github.io/wiki/others/thoughts/%E6%88%91%E4%B9%9F%E6%83%B3%E5%81%9A%E5%87%BA%E4%BC%98%E7%A7%80%E7%9A%84%E4%BD%9C%E5%93%81/</id>
    <published>2025-06-16T14:03:30.000Z</published>
    <updated>2025-07-18T15:06:40.639Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了<a href="https://rinevard.itch.io/myriad-by-cards">牌生万物</a>，感觉挺难受的。一直以来我都希望每一部作品都做得比上一部更好，这一部看起来比<a href="https://rinevard.itch.io/undertetris">undertetris</a>好一点吗？或许吧，但我就是感觉不开心。</p><p>想来可能是因为这不是我喜欢的体验吧。我想做出能打动玩家的作品，能让玩家记住一辈子，至少是一年的作品，而不是这样的莫名其妙的“融合卡牌”。玩着这个游戏时，比起对作品的满意，更多的是烦躁。也可能是因为现在是考试周压力大吧，我也不清楚。</p><p>我想和LLM一起创造一个世界啊，一个栩栩如生的世界。每个事件都让人思考，每个角色都给人深刻印象，而不是现在的名词堆砌、数值膨胀。LLM不会写故事从来都不是借口，我们是不是本可以做得更好？</p><p>我该怎么做才好？我该前往何方？</p><p>我知道，让LLM生成的世界像《苏丹的游戏》一样本身就是一件不现实的事情。但起码它要像是一个世界吧，整个冒险是有故事性的吧，现在是个什么玩意？？？更可气的是这玩意还真有可玩性，做了一个靠强化程序和数值膨胀堆砌起来的东西真像是对自己的侮辱！</p><p>至少，它的体验不该是数值膨胀。至少，让玩家玩下去的动力不该是强化程序。如果我们拿走了玩家的时间，我们起码应当补偿一些什么才对，而不该徒留悔恨感。</p><p>可能也有点偏激了，可能只是我自己不喜欢这种类型而已……甚至我自己也觉得还算可以，至少确实有让我印象深刻的时刻。但我还是感觉不开心，毕竟，“我们是不是本可以做得更好？”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近做了&lt;a href=&quot;https://rinevard.itch.io/myriad-by-cards&quot;&gt;牌生万物&lt;/a&gt;，感觉挺难受的。一直以来我都希望每一部作品都做得比上一部更好，这一部看起来比&lt;a href=&quot;https://rinevard.itch.io/un</summary>
      
    
    
    
    <category term="杂谈" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    <category term="碎碎念" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Lab2 System calls</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab2-syscall/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab2-syscall/</id>
    <published>2025-06-04T07:10:38.000Z</published>
    <updated>2025-08-22T03:14:43.982Z</updated>
    
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Labs" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Labs/"/>
    
    
  </entry>
  
  <entry>
    <title>第二章——操作系统概述</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note2-organization-overview/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note2-organization-overview/</id>
    <published>2025-06-04T06:26:38.000Z</published>
    <updated>2025-08-22T03:14:43.982Z</updated>
    
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>看我看我</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/little-fish/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/little-fish/</id>
    <published>2025-06-01T06:32:38.000Z</published>
    <updated>2025-08-22T03:20:40.807Z</updated>
    
    <content type="html"><![CDATA[<p>这里存放着我对 book-riscv-rev4 和 MIT-6.S081 的笔记，每个笔记对应 book-riscv-rev4 的一个章节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里存放着我对 book-riscv-rev4 和 MIT-6.S081 的笔记，每个笔记对应 book-riscv-rev4 的一个章节。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>第一章——系统接口</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note1-sys-interface/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note1-sys-interface/</id>
    <published>2025-06-01T03:18:38.000Z</published>
    <updated>2025-08-22T03:14:43.992Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 70%;}</style><h1 id="常用的系统接口"><a href="#常用的系统接口" class="headerlink" title="常用的系统接口"></a>常用的系统接口</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>fork()</td><td>创建进程</td></tr><tr><td>exit()</td><td>结束当前进程</td></tr><tr><td>wait()</td><td>等待子进程结束</td></tr><tr><td>kill(pid)</td><td>结束 pid 所指进程</td></tr><tr><td>getpid()</td><td>获得当前进程 pid</td></tr><tr><td>sleep(n)</td><td>睡眠 n 秒</td></tr><tr><td>exec(filename, *argv)</td><td>加载并执行一个文件</td></tr><tr><td>sbrk(n)</td><td>为进程内存空间增加 n 字节</td></tr><tr><td>open(filename, flags)</td><td>打开文件，flags 指定读/写模式</td></tr><tr><td>read(fd, buf, n)</td><td>从文件中读 n 个字节到 buf</td></tr><tr><td>write(fd, buf, n)</td><td>从 buf 中写 n 个字节到文件</td></tr><tr><td>close(fd)</td><td>关闭打开的 fd</td></tr><tr><td>dup(fd)</td><td>复制 fd</td></tr><tr><td>pipe( p)</td><td>创建管道， 并把读和写的 fd 返回到p</td></tr><tr><td>chdir(dirname)</td><td>改变当前目录</td></tr><tr><td>mkdir(dirname)</td><td>创建新的目录</td></tr><tr><td>mknod(name, major, minor)</td><td>创建设备文件</td></tr><tr><td>fstat(fd)</td><td>返回文件信息</td></tr><tr><td>link(f1, f2)</td><td>给 f1 创建一个新名字(f2)</td></tr><tr><td>unlink(filename)</td><td>删除文件</td></tr></tbody></table></div><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>fork()</td><td>创建进程</td></tr><tr><td>exit()</td><td>结束当前进程</td></tr><tr><td>wait()</td><td>等待子进程结束</td></tr><tr><td>kill(pid)</td><td>结束 pid 所指进程</td></tr><tr><td>getpid()</td><td>获得当前进程 pid</td></tr><tr><td>exec(filename, *argv)</td><td>加载并执行一个文件</td></tr><tr><td>sbrk(n)</td><td>为进程内存空间增加 n 字节</td></tr></tbody></table></div><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>open(filename, flags)</td><td>打开文件，flags 指定读/写模式</td></tr><tr><td>read(fd, buf, n)</td><td>从文件中读 n 个字节到 buf</td></tr><tr><td>write(fd, buf, n)</td><td>从 buf 中写 n 个字节到文件</td></tr><tr><td>close(fd)</td><td>关闭打开的 fd</td></tr><tr><td>dup(fd)</td><td>复制 fd</td></tr></tbody></table></div><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 写入标准输出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cat: write error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cat: read error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">cat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cat: cannot open %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">cat</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不妨再来看看CSAPP的两张图</p><h3 id="open两次："><a href="#open两次：" class="headerlink" title="open两次："></a><strong>open两次：</strong></h3><p><img src="/images/learning/open-course/MIT-6.S081/notes/note1-syscall/opentwice.png" alt=""></p><h3 id="fork："><a href="#fork：" class="headerlink" title="fork："></a><strong>fork：</strong></h3><p><img src="/images/learning/open-course/MIT-6.S081/notes/note1-syscall/fork.png" alt=""></p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pipe( p)</td><td>创建管道， 并把读和写的 fd 返回到p，其中p是 int p[2]</td></tr></tbody></table></div><ul><li>p[0]: 读端(read end)的文件描述符</li><li>p[1]: 写端(write end)的文件描述符</li></ul><p>样例： <code>grep fork sh.c | wc -l</code> 命令将第一个命令(grep)的输出作为第二个命令(wc)的输入，<code>|</code> 就是管道符号。</p><p>下面的代码是 <code>|</code> 的实现示例，大体思路是把 <code>|</code> 左边的标准输出重定向到pipe的写端，把 <code>|</code> 右边的标准输入重定向到pipe的读端。</p><p>注意要关闭管道的所有写入端来让 <code>read</code> 返回，因为当 pipe 中没有数据时，<code>read</code> 会阻塞等待新数据写入，或是写入端都关闭，如果有新数据写入就读取，如果所有写入端都关闭就返回 0（对应EOF）.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 假设我们的命令是 grep fork sh.c | wc -l</span><span class="token keyword">case</span> PIPE<span class="token operator">:</span>    pcmd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipecmd</span> <span class="token operator">*</span><span class="token punctuation">)</span>cmd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 释放文件描述符1，从而让dup把文件描述符1绑定到p[1]指向的东西</span>        <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//换句话说，我们在重定向标准输出到pipe的写端</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span>pcmd<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对应 grep fork sh.c</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 与上面类似，重定向标准输入到pipe的读端</span>        <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span>pcmd<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对应 wc -l</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>chdir(dirname)</td><td>改变当前目录</td></tr><tr><td>mkdir(dirname)</td><td>创建新的目录</td></tr><tr><td>mknod(name, major, minor)</td><td>创建设备文件</td></tr><tr><td>fstat(fd)</td><td>返回文件信息</td></tr><tr><td>link(f1, f2)</td><td>给 f1 创建一个新名字(f2)</td></tr><tr><td>unlink(filename)</td><td>删除文件</td></tr></tbody></table></div><p>我们通常认为文件名就是文件本身，但实际上名称是一个硬链接(hard link)。一个文件可以有多个硬链接——例如，一个目录至少有两个硬链接：目录名和 <code>.</code> （在目录内时）。它还有来自每个子目录的一个硬链接（每个子目录中的 <code>..</code> 文件）。</p><p>那文件是什么呢？一个文件和一个 inode 一一对应，inode存放着这个文件的相关信息</p><p>xv6系统的inode结构包括下面这些内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">dinode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">short</span> type<span class="token punctuation">;</span>              <span class="token comment">// File type</span>    <span class="token keyword">short</span> major<span class="token punctuation">;</span>             <span class="token comment">// Major device number (T_DEVICE only)</span>    <span class="token keyword">short</span> minor<span class="token punctuation">;</span>             <span class="token comment">// Minor device number (T_DEVICE only)</span>    <span class="token keyword">short</span> nlink<span class="token punctuation">;</span>             <span class="token comment">// Number of links to inode in file system</span>    uint size<span class="token punctuation">;</span>               <span class="token comment">// Size of file (bytes)</span>    uint addrs<span class="token punctuation">[</span>NDIRECT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Data block addresses</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过 <code>fstat</code> 获取文件描述符指向的文件的信息。dinode是磁盘上存储的详细信息，stat是暴露给用户的文件信息接口</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dev<span class="token punctuation">;</span>     <span class="token comment">// File system's disk device</span>    uint ino<span class="token punctuation">;</span>    <span class="token comment">// Inode number</span>    <span class="token keyword">short</span> type<span class="token punctuation">;</span>  <span class="token comment">// Type of file</span>    <span class="token keyword">short</span> nlink<span class="token punctuation">;</span> <span class="token comment">// Number of links to file</span>    uint64 size<span class="token punctuation">;</span> <span class="token comment">// Size of file in bytes</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仅当我们把所有指向某个inode的链接都删除，这个inode才会被删除。</p><p>在下面的示例中，我们用 <code>ln</code> 创建了两个连接 file2 和 file3，它们都和 file1 指向的 inode 相同。可以看到，如果用 <code>echo</code> 修改 file2，那么 file1 也会被修改，因为我们修改的实际上是 inode，而它们指向同一个inode。<code>ls -l</code> 列出目录中的文件和目录的详细信息，第二个值是inode的link数。我们可以把链接视作文件的“别名”。</p><pre class="line-numbers language-none"><code class="language-none">$ echo &quot;What&#39;s in a name? That which we call a rose, by any other word would smell as sweet.&quot; &gt; file1.txt$ lsfile1.txt  open-course  programs$ cat file1.txtWhat&#39;s in a name? That which we call a rose, by any other word would smell as sweet.$ ln file1.txt file2.txt$ ln file1.txt file3.txt$ ls -ltotal 20-rw-r--r-- 3 rinevard rinevard   85 May 29 11:37 file1.txt-rw-r--r-- 3 rinevard rinevard   85 May 29 11:37 file2.txt-rw-r--r-- 3 rinevard rinevard   85 May 29 11:37 file3.txtdrwxr-xr-x 3 rinevard rinevard 4096 May 28 11:00 open-coursedrwxr-xr-x 2 rinevard rinevard 4096 May 28 10:19 programs$ echo &quot;-- William Shakespeare&quot; &gt;&gt; file2.txt$ cat file1.txtWhat&#39;s in a name? That which we call a rose, by any other word would smell as sweet.-- William Shakespeare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会好奇目录的链接数怎么计算，是这样的：</p><ol><li>每个目录默认有2个链接，一个是目录自身的”.”，另一个是父目录中指向该目录的链接</li><li>目录中每包含一个子目录，链接数就会+1，因为每个子目录都会创建”..”链接指向父目录</li></ol><p>在下面的例子中，rootdir 的链接数是 4，因为父目录有一个指向它的链接”rootdir”，它自己有一个指向自己的链接”.”，它的两个子目录dir1和dir2分别有指向它的链接”..”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/open-course/rootdir$ <span class="token function">ls</span>dir1  dir2  file1.md  file2.md  file3.md~/open-course/rootdir$ <span class="token function">ls</span> <span class="token punctuation">..</span>/ <span class="token parameter variable">-l</span>total <span class="token number">8</span>drwxr-xr-x <span class="token number">11</span> rinevard rinevard <span class="token number">4096</span> May <span class="token number">31</span> <span class="token number">16</span>:40 mit-6.828drwxr-xr-x  <span class="token number">4</span> rinevard rinevard <span class="token number">4096</span> Jun  <span class="token number">1</span> <span class="token number">10</span>:58 rootdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件路径格式：以 “/” 开头的是从根目录出发的路径，否则是从当前文件夹出发的路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/open-course$ <span class="token function">ls</span>mit-6.828~/open-course$ <span class="token function">ls</span> mit-6.828/LICENSE  Makefile  README  conf  grade-lab-util  gradelib.py  kernel  <span class="token function">mkfs</span>  user~/open-course$ <span class="token function">ls</span> /home/rinevard/open-course  programs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unix shell的许多命令都是用户级别的，而非内置的。shell通过fork子进程并调用exec来执行它们。但cd是内置的，因为cd改变了shell自身的工作目录。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Read and run input commands.</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getcmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'c'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'d'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Chdir must be called by the parent, not the child.</span>        buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// chop \n</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cannot cd %s\n"</span><span class="token punctuation">,</span> buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span><span class="token function">parsecmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 70%;
}
&lt;/style&gt;

&lt;h1 id=&quot;常用的系统接口&quot;&gt;&lt;a href=&quot;#常用的系统接口&quot; class=&quot;headerlink&quot; title=&quot;常用的系统接口&quot;&gt;&lt;/a&gt;常用的系统接口&lt;/h1&gt;&lt;div class=&quot;</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Lab1 Xv6 and Unix utilities</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab1-util/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab1-util/</id>
    <published>2025-05-31T03:18:38.000Z</published>
    <updated>2025-08-22T03:14:43.982Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 80%;}</style><p>在开始 lab 之前，我们先来解释一下为什么我们写的代码能直接在 xv6 的 shell 里执行。我们来看看 <code>sh.c</code> 的部分代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Read and run input commands.</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getcmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'c'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'d'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Chdir must be called by the parent, not the child.</span>        buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// chop \n</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cannot cd %s\n"</span><span class="token punctuation">,</span> buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span><span class="token function">parsecmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这里我们看出，shell通过fork子进程来执行命令。如果进一步看看 <code>runcmd</code> 函数，就会发现它调用了 <code>exec</code>，因此 shell 能执行用户写的代码。</p><p>有趣的是，从这段代码里我们也能看出 <code>cd</code> 是内置在 shell 里的命令，这是因为 cd 改变了shell自身的工作目录。</p><h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h1><p>这题让我们简单熟悉下接口。其实这里用 <code>printf</code> 更易读，不过我当时做的时候没发现有 <code>printf</code> </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fcntl.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>errmsg <span class="token operator">=</span> <span class="token string">"sleep: missing operand\n"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errmsg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a><strong>pingpong</strong></h1><p>这题让我们接触一下管道的使用，难者不会，会者不难</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fcntl.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p_parent_sender<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p_child_sender<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 子进程先读</span>        <span class="token function">read</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received ping\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 父进程先写</span>    <span class="token function">write</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received pong\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h1><p>这题很有趣，是一个并发素数筛法。这个算法理论上是可以提高效率的，毕竟在运行了一段时间后，各个进程里都有一些数等待筛选，这时各个进程在同时用自己的素数筛选输入的数。</p><p><img src="/images/learning/open-course/MIT-6.S081/labs/lab1-util/prime-concurrent.png" alt=""></p><p>网上很多代码都是2020版的，当时的要求是找出 2-35 间的素数。这些代码能过老版本的要求，但过不了2024版要求的 2-280。我认真看了一两份代码，发现它们在用 fork 创建子进程的子进程后，忘了关闭子子进程的连接到父进程的描述符。可以看下面示意图的第三个框，这些代码忘了关闭 child child process 的 fd_read.</p><p>我画了示意图来解释我的代码~</p><p><img src="/images/learning/open-course/MIT-6.S081/labs/lab1-util/prime-code.png" alt=""></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> NUM <span class="token operator">=</span> <span class="token number">280</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">do_child</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">do_child</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> NUM<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 创建子进程. 父进程的 fd 和子进程的 fd 会被分别设置为一个 pipe 的两端. * 对父进程, fd 被设置为写端. * 对子进程, fd 被设置为读端. * * return 0 if is child else child's pid */</span><span class="token keyword">int</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// child</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>fd <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// parent</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>fd <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 从 fd_read 中读取数字, 打印第一个数, * 筛选其他数并新建子进程把被筛选后的数写入子进程. 在运行完成后关闭 fd_read. */</span><span class="token keyword">void</span> <span class="token function">do_child</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd_read<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd_read<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prime <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prime <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prime %d\n"</span><span class="token punctuation">,</span> prime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> prime<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// fd == -1 等价于没有子进程</span>                <span class="token comment">// 如果没有子进程就创建子进程并让它开始工作</span>                <span class="token function">close</span><span class="token punctuation">(</span>fd_read<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">do_child</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd_read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// fd == -1 等价于没有子进程, 说明它是最后一个进程</span>    <span class="token comment">// 最后一个进程不需要关闭描述符, 也不需要等待</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 个人认为关闭 fd_read 不应该是 do_child 的工作, 我觉得"谁创建, * 谁关闭"会更合适. 也就是说, 我觉得让调用 do_child 的函数关闭 fd_read * 更合适. * * 但如果 do_child 不关闭 fd_read, 子孙进程就会保留父进程未关闭的描述符, * 从而耗尽 xv6 的资源. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p>在 <code>ls.c</code> 的基础上稍微改改就好了，要注意的是递归时不要递归进 “.” 和 “..” 两个文件夹</p><p>我们实现的 <code>find &lt;path&gt; &lt;name&gt;</code> 的功能和 Linux 里的 <code>find &lt;path&gt; -name &lt;name&gt;</code> 一致</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fs.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fcntl.h"</span></span><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: find &lt;path> &lt;filename>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">find</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 在以 path 为根节点的文件树下搜索名为 name 的文件, * 如果找到则打印其路径. */</span><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"find: cannot open %s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">stat</span> st<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fstat</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"find: cannot stat %s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只有文件夹有递归的必要</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>type <span class="token operator">!=</span> T_DIR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dirent</span> de<span class="token punctuation">;</span>    <span class="token comment">// 第一个 +1 对应 '/', 第二个 +1 对应结尾的 '\0'</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> DIRSIZ <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ls: path too long\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'/'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token punctuation">.</span>inum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>            <span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> DIRSIZ<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>DIRSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ls: cannot stat %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">find</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 获取路径 path 的最后一部分 */</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> path <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'/'</span><span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token operator">++</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a><strong>xargs</strong></h1><p>xargs 将标准输入（stdin）数据转换成命令行参数，一般和管道一起使用。在 linux 中，xargs 默认的命令是 echo.</p><p>上面的解释可能不太清晰，通过两个例子就能看出来它在做什么了：</p><p>第一个例子是直接使用 xargs</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token builtin class-name">echo</span> Im prefix<span class="token number">111</span>Im prefix <span class="token number">111</span><span class="token number">222</span>Im prefix <span class="token number">222</span>（按 ctrl+D 终止输入<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个例子是和管道联用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token punctuation">(</span>echo <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token builtin class-name">echo</span><span class="token number">1</span><span class="token number">2</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们实现的 <code>xargs &lt;command&gt;</code> 的功能和 Linux 里的 <code>xargs -n 1 &lt;command&gt;</code> 一致</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/param.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"usage: xargs command\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cmd <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cmdargs<span class="token punctuation">[</span>MAXARG<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cmdargc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 在更改 cmdargc 前, 最好检查 cmdargc &lt; MAXARG,</span>                     <span class="token comment">// 不过为了简化代码, 我们就不检查了</span>    <span class="token comment">// argv[0] 是 'xargs', argv[1] 是 command, 之后是参数</span>    <span class="token comment">// cmdargs 应当形如 [command, arg1, arg2, ..., addition_arg1, ...]</span>    cmdargc <span class="token operator">=</span> argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cmdargc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cmdargs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输入行</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> buf<span class="token punctuation">;</span> <span class="token comment">// 输入行的末尾</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            cmdargs<span class="token punctuation">[</span>cmdargc<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>            <span class="token operator">++</span>cmdargc<span class="token punctuation">;</span>            cmdargs<span class="token punctuation">[</span>cmdargc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">++</span>cmdargc<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> cmdargs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 重置</span>            p <span class="token operator">=</span> buf<span class="token punctuation">;</span>            cmdargc <span class="token operator">=</span> argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token operator">++</span>p<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 80%;
}
&lt;/style&gt;

&lt;p&gt;在开始 lab 之前，我们先来解释一下为什么我们写的代码能直接在 xv6 的 shell 里执行。我们来看看 &lt;code&gt;sh.c&lt;/code&gt; 的部分代码：&lt;/p&gt;
&lt;pre class=&quot;</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Labs" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Labs/"/>
    
    
  </entry>
  
  <entry>
    <title>慢慢地冲浪</title>
    <link href="http://rinevard.github.io/wiki/others/thoughts/%E7%BD%91%E4%B8%8A%E5%86%B2%E6%B5%AA/"/>
    <id>http://rinevard.github.io/wiki/others/thoughts/%E7%BD%91%E4%B8%8A%E5%86%B2%E6%B5%AA/</id>
    <published>2025-05-28T03:50:11.000Z</published>
    <updated>2025-08-19T07:08:07.564Z</updated>
    
    <content type="html"><![CDATA[<p>在互联网上冲浪时，偶尔会看到一些博客，若是它们帮到了我，我经常也会点进主页看看作者都写了怎样的文章，都有怎样的故事。</p><p>很多人的网站里全是技术文章，我对这样的网站确实没什么兴致。我更喜欢杂谈类的文章，那种像是在夜深人静时，独自一人在电脑前慢慢写下的文章。读这样独处时写下的文章，总让我觉得自己和作者的灵魂更近了一点。</p><p>在互联网上随机漫游，对着完全不认识自己的人产生单箭头，如果运气好的话说不定会是双箭头，真的非常有趣。我可能还是喜欢慢一点的故事，喜欢有着很长很长回复的贴子，喜欢把自己遇见的趣事分享到网上的视频，喜欢随意的、真诚的文章。它们只是被放在那里，等着十年后被另一个人偶然发现，那是痕迹。</p><style>/* 隐藏草书 */.hidden-text {    font-size: 18px;    text-align: center;    margin: 20px 0;    /* padding: 20px; */    line-height: 1.5;    color: transparent;    cursor: default}.hidden-fancy-text::selection {    color: black;    background: white;}</style><div class="hidden-text">就像这里的痕迹。</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在互联网上冲浪时，偶尔会看到一些博客，若是它们帮到了我，我经常也会点进主页看看作者都写了怎样的文章，都有怎样的故事。&lt;/p&gt;
&lt;p&gt;很多人的网站里全是技术文章，我对这样的网站确实没什么兴致。我更喜欢杂谈类的文章，那种像是在夜深人静时，独自一人在电脑前慢慢写下的文章。读这样独</summary>
      
    
    
    
    <category term="杂谈" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    <category term="碎碎念" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>在开始之前</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/BeforeStory/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/BeforeStory/</id>
    <published>2025-05-27T07:20:38.000Z</published>
    <updated>2025-08-22T03:14:43.982Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了 <a href="https://arthals.ink/">Arthal</a> 的笔记，感觉写得非常精美！回头看看自己对 15213 labs 的笔记，感觉写得确实太粗糙了，希望我的 6.S081 的笔记也能写得详细一些。</p><p>咳咳，我知道我还没写 15213 的 proxylab，不过我感觉csapp网络那一章写得有点含糊，所以晚点再做吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近发现了 &lt;a href=&quot;https://arthals.ink/&quot;&gt;Arthal&lt;/a&gt; 的笔记，感觉写得非常精美！回头看看自己对 15213 labs 的笔记，感觉写得确实太粗糙了，希望我的 6.S081 的笔记也能写得详细一些。&lt;/p&gt;
&lt;p&gt;咳咳，我知道我还没写</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>第九章——虚拟内存</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter9-virtual-memory/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter9-virtual-memory/</id>
    <published>2025-05-13T14:10:28.000Z</published>
    <updated>2025-08-22T03:14:43.982Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 80%;}</style><h1 id="重走虚拟路"><a href="#重走虚拟路" class="headerlink" title="重走虚拟路"></a>重走虚拟路</h1><p>让我们尝试重新发明一遍虚拟内存。</p><h2 id="使用虚拟地址的原因"><a href="#使用虚拟地址的原因" class="headerlink" title="使用虚拟地址的原因"></a>使用虚拟地址的原因</h2><p>想象一下我们只能用物理地址来写程序，我们写出了下面的东西：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token comment">; 假设目标机器是Intel 8080，内存地址为物理地址</span>ORG <span class="token number">0x0100</span>      <span class="token comment">; 程序起始地址，直接指定物理地址0x0100</span>MVI A, <span class="token number">0x05</span>     <span class="token comment">; 将立即数0x05加载到寄存器A</span>STA <span class="token number">0x0200</span>      <span class="token comment">; 将寄存器A的值存储到物理内存地址0x0200</span>HLT             <span class="token comment">; 停止程序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这东西的可移植性显然很差！所以我们发明了“虚拟地址”。这样程序就能直接使用虚拟地址，而在程序执行时，虚拟地址被操作系统的<strong>MMU</strong>（Memory Management Unit）实时翻译成物理地址。</p><h2 id="虚拟地址到物理地址的映射"><a href="#虚拟地址到物理地址的映射" class="headerlink" title="虚拟地址到物理地址的映射"></a>虚拟地址到物理地址的映射</h2><p>这么看来，我们可以把 MMU 当作一个从虚拟地址空间到物理地址空间的映射，那我们自然要用一个数据结构来存储映射。</p><p>但怎么组织这个数据结构呢？用一个数组，然后每个虚拟地址对应一个物理地址？假设我们有 $M$ 个虚拟地址，我们就存一个长度为 $M$ 的数组？这样的话，这个数组就太大了。假设我们有 $k$ 个进程，按这个想法，我们就需要至少 $k\times M \times \text{sizeof(char *)}$ 大小的内存来存储这个数据结构。</p><p>我们选择把 $N$ 个连续的虚拟地址当作一个虚拟页，同时把 $N$ 个连续的物理地址当作一个物理页，这样对每个进程，我们就只要做物理页之间的映射，存储 $\frac{M}{N}$ 个项就好了。考虑到程序的局部性， 我们的这种选择是合理的。这样的一个数据结构就叫做一个<strong>页表</strong>。</p><p>在下图的<strong>单级页表</strong>中，每一项都带有一个有效位（用于标记这个虚拟页对应的物理页是否在 DRAM 中）和对应物理页的开头物理地址（如果没有对应物理页，为 null）。</p><p>把虚拟地址翻译成物理地址的大致思路是根据虚拟地址找到页表中对应的项，从而找到对应的物理页，然后根据虚拟地址的最后几位确定具体的物理地址。（还记得吗，一个页由很多地址组成）</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/singlelvelpagetable.png" alt=""></p><p>但这样的页表还是很大吧。我们总在进程被创建时就为他们分配了一个超大的页表，而实际上绝大多数程序都根本用不到那么多虚拟地址。所以，我们能不能动态地改变页表的大小，比如说，在程序请求某个虚拟地址，但它不在页表中时，再去增大页表？</p><p>所以我们进一步把页表分成多级，在需要的时候再去新增 level 较高的页表。</p><p>在这样的<strong>多级页表</strong>中，只有 level 最高的页表存储对应页的开头物理地址，而其他 level 的页表存储下一个级别的页表的开始地址。我们会在下一节详细讲解它的翻译过程。</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/twolevelpagetable.png" alt=""></p><p>让我们总结一下，每个进程有自己的页表，在切换到某个进程时，操作系统会更新存储着页表地址的寄存器（在 RISC-Ⅴ 中是 satp 寄存器）。当进程需要访问某个虚拟地址时，MMU 会把虚拟地址翻译成物理地址，然后访问物理地址。</p><p>要特别强调的是，每个 level 可以有多个页表，我们可以把多级页表看作树状结构！</p><h2 id="虚拟地址的翻译"><a href="#虚拟地址的翻译" class="headerlink" title="虚拟地址的翻译"></a>虚拟地址的翻译</h2><p>我们已经知道了虚拟内存大致是怎样的了。那么 MMU 具体是怎么把虚拟地址翻译成物理地址的呢？我们这里讨论多级页表。</p><p>在多级页表中，只有 level 最高的页表存储对应页的开头物理地址，而其他 level 的页表存储下一个级别的页表的开始地址。</p><p>虚拟地址的前几位在翻译过程中会起到“页表索引”的作用，当我们到达了某个 level 的页表，我们会用它来确定我们具体需要这个页表的哪个项。而虚拟地址的最后几位是一个 offset，还记得吗，一个虚拟页和一个物理页对应，所以在找到了对应的物理页的开头地址后，我们要根据 offset 得到真正对应的物理地址。</p><p>VPN 是 virtual page number，VPO 是 virtual page offset，PTE 是 page table entry</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/translation.png" alt=""></p><p>我魔改了一下上图，希望这能让“每个 level 有多个页表”这件事显得更清晰。</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/virtual2physic.png" alt=""></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>看起来多级页表在存储方面优化得不错，但速度呢？既然每个页表都放在不同的地址，那它不是要求多次访问不同地址吗？正是如此，所以我们用 TLB（Translation Lookaside Buffer）来缓存最近使用的页表项，来加快地址翻译。</p><h1 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h1><p>当我们调用 malloc 和 free 时究竟发生了什么？在做完 malloclab 以后，我们对此已经有了比较清晰的理解。</p><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>调用 malloc 时，我们在寻找足够大的空闲内存块来提供给用户，如果不够大就扩容。在“寻找”的过程中，我们有很多种策略可以选，这就是 placement policy，包括但不限于 first fit、next fit、best fit.</p><p>而在找到空闲块以后，有时空闲块可能比用户的需求大很多，这时就要想想要不要切割空闲块，这就是 splitting policy。</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>调用 free 时，我们简单地把一个已分配内存块标记为空闲。但空闲之后又要决定是否把它和相邻的空闲块合并，这就是 coalescing policy。</p><h2 id="块的结构"><a href="#块的结构" class="headerlink" title="块的结构"></a>块的结构</h2><p>之前提到，malloc 是在找空闲块，但什么是“块”呢？块的数据结构也有很多种可以选，不过一般来说，每个块都至少会有 size 和 is_alloc 标记。</p><p>举个例子，使用显式链表策略时，我们的堆大概长这样：</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/heap.svg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 80%;
}
&lt;/style&gt;

&lt;h1 id=&quot;重走虚拟路&quot;&gt;&lt;a href=&quot;#重走虚拟路&quot; class=&quot;headerlink&quot; title=&quot;重走虚拟路&quot;&gt;&lt;/a&gt;重走虚拟路&lt;/h1&gt;&lt;p&gt;让我们尝试重新发明一遍虚拟内存。&lt;</summary>
      
    
    
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="CMU-15-213" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/Notes/"/>
    
    
  </entry>
  
</feed>
