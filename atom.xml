<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Rinevard</title>
  
  
  <link href="http://rinevard.github.io/atom.xml" rel="self"/>
  
  <link href="http://rinevard.github.io/"/>
  <updated>2025-08-22T02:59:28.690Z</updated>
  <id>http://rinevard.github.io/</id>
  
  <author>
    <name>Rinevard</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Hw 1 Transformation</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw1-transformation/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Hw/Hw1-transformation/</id>
    <published>2025-08-22T03:00:58.000Z</published>
    <updated>2025-08-22T02:59:28.690Z</updated>
    
    <content type="html"><![CDATA[<p>本次作业要求我们实现旋转矩阵、投影矩阵。我们先简单看下作业是怎么做的，再看看代码框架里的几个有趣的地方。</p><h1 id="作业实现"><a href="#作业实现" class="headerlink" title="作业实现"></a>作业实现</h1><h2 id="两个旋转矩阵"><a href="#两个旋转矩阵" class="headerlink" title="两个旋转矩阵"></a>两个旋转矩阵</h2><p>绕 $z$ 轴的旋转矩阵实现起来很简单，把课上的内容翻译成代码就好。在使用 std 的 sin 和 cos 时要注意把角度转换成弧度。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Matrix4f <span class="token function">get_model_matrix</span><span class="token punctuation">(</span><span class="token keyword">float</span> rotation_angle<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f model <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix4f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> angle_rad <span class="token operator">=</span> rotation_angle <span class="token operator">*</span> MY_PI <span class="token operator">/</span> <span class="token number">180.0</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f rotate<span class="token punctuation">;</span>    <span class="token keyword">float</span> sine <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">sin</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> cosine <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span><span class="token punctuation">;</span>    rotate <span class="token operator">&lt;&lt;</span> cosine<span class="token punctuation">,</span> <span class="token operator">-</span>sine<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>            sine<span class="token punctuation">,</span> cosine<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">;</span>    model <span class="token operator">=</span> rotate <span class="token operator">*</span> model<span class="token punctuation">;</span>    <span class="token keyword">return</span> model<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提高项里的旋转矩阵用课上讲的 Rodrigues’ rotation formula 就行：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token comment">/*    Computes the 4x4 rotation matrix representing a rotation of rotation_angle (in degree)     around a given normalized axis vector that passes through the origin,     using Rodrigues' rotation formula.*/</span>Eigen<span class="token double-colon punctuation">::</span>Matrix4f <span class="token function">get_rotation</span><span class="token punctuation">(</span>Vector3f axis<span class="token punctuation">,</span> <span class="token keyword">float</span> rotation_angle<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">float</span> angle_rad <span class="token operator">=</span> rotation_angle <span class="token operator">*</span> MY_PI <span class="token operator">/</span> <span class="token number">180.0</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Matrix3f rot_mat <span class="token operator">=</span> std<span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span> <span class="token operator">*</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix3f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    rot_mat <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> std<span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> axis <span class="token operator">*</span> axis<span class="token punctuation">.</span><span class="token function">transpose</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        Eigen<span class="token double-colon punctuation">::</span>Matrix3f cross_product_mat<span class="token punctuation">;</span>    cross_product_mat <span class="token operator">&lt;&lt;</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>axis<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                        axis<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span>axis<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                         <span class="token operator">-</span>axis<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> axis<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    rot_mat <span class="token operator">+=</span> std<span class="token double-colon punctuation">::</span><span class="token function">sin</span><span class="token punctuation">(</span>angle_rad<span class="token punctuation">)</span> <span class="token operator">*</span> cross_product_mat<span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f trans_mat <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix4f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    trans_mat<span class="token punctuation">.</span><span class="token generic-function"><span class="token function">topLeftCorner</span><span class="token generic class-name"><span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token operator">></span></span></span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> rot_mat<span class="token punctuation">;</span>    <span class="token keyword">return</span> trans_mat<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="投影矩阵"><a href="#投影矩阵" class="headerlink" title="投影矩阵"></a>投影矩阵</h2><p>投影矩阵就相对复杂一些了，先上代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">Eigen<span class="token double-colon punctuation">::</span>Matrix4f <span class="token function">get_projection_matrix</span><span class="token punctuation">(</span><span class="token keyword">float</span> eye_fov<span class="token punctuation">,</span> <span class="token keyword">float</span> aspect_ratio<span class="token punctuation">,</span>                                      <span class="token keyword">float</span> zNear<span class="token punctuation">,</span> <span class="token keyword">float</span> zFar<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token comment">// Students will implement this function</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f projection <span class="token operator">=</span> Eigen<span class="token double-colon punctuation">::</span><span class="token class-name">Matrix4f</span><span class="token double-colon punctuation">::</span><span class="token function">Identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    Eigen<span class="token double-colon punctuation">::</span>Matrix4f perspective<span class="token punctuation">;</span>    <span class="token keyword">float</span> cotangent <span class="token operator">=</span> <span class="token number">1.0</span> <span class="token operator">/</span> std<span class="token double-colon punctuation">::</span><span class="token function">tan</span><span class="token punctuation">(</span>eye_fov <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">float</span> z_delta <span class="token operator">=</span> zFar <span class="token operator">-</span> zNear<span class="token punctuation">;</span>    perspective <span class="token operator">&lt;&lt;</span> cotangent <span class="token operator">/</span> aspect_ratio<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token number">0</span><span class="token punctuation">,</span> cotangent<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span>                     <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token punctuation">(</span>zFar <span class="token operator">+</span> zNear<span class="token punctuation">)</span> <span class="token operator">/</span> z_delta<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> zFar <span class="token operator">*</span> zNear <span class="token operator">/</span> z_delta<span class="token punctuation">,</span>                    <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">;</span>    projection <span class="token operator">=</span> perspective <span class="token operator">*</span> projection<span class="token punctuation">;</span>    <span class="token keyword">return</span> projection<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>首先我们会发现输入的 zNear 和 zFar 都是正数，他们表示近平面和远平面到原点的距离，这与课上讲的不同。课上讲的 $n$ 和 $f$ 表示近平面和远平面在 $z$ 轴的坐标，他们是负数。</p><p>然后我们分析 rasterizer.cpp 里的 draw 函数，下面这段代码里，v 是三角形的三个顶点构成的数组，三个顶点都已经被变换到了 $[-1,1]^3$ 的正方体中。</p><p>注意 <code>vert.z() = vert.z() * f1 + f2</code> 这行代码，把 $-1$ 代入右边得到 $-n$，$1$ 代入右边得到 $-f$，因此我们有理由猜测 $[-n,-f]$ 被映射到了 $[-1,1]$. </p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">float</span> f1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">-</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token keyword">float</span> f2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">100</span> <span class="token operator">+</span> <span class="token number">0.1</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">;</span><span class="token comment">// ...</span><span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">auto</span> <span class="token operator">&amp;</span> vert <span class="token operator">:</span> v<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    vert<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token operator">*</span>width<span class="token operator">*</span><span class="token punctuation">(</span>vert<span class="token punctuation">.</span><span class="token function">x</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vert<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token number">0.5</span><span class="token operator">*</span>height<span class="token operator">*</span><span class="token punctuation">(</span>vert<span class="token punctuation">.</span><span class="token function">y</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    vert<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">=</span> vert<span class="token punctuation">.</span><span class="token function">z</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">*</span> f1 <span class="token operator">+</span> f2<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>总结一下我们的发现：</p><ol><li>输入的 zNear 和 zFar 都是正数，表示近平面和远平面到原点的距离</li><li>$[-n,-f]$ 被映射到了 $[-1,1]$</li></ol><p>最终我们能写出这样的投影矩阵：</p><script type="math/tex; mode=display">\large\text{M}_\text{per} =\begin{bmatrix}\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & \frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & -\frac{f+n}{f-n} & -\frac{2fn}{f-n} \\0 & 0 & -1 & 0\end{bmatrix}</script><p>翻译成代码就好。</p><h1 id="代码框架里有趣的地方"><a href="#代码框架里有趣的地方" class="headerlink" title="代码框架里有趣的地方"></a>代码框架里有趣的地方</h1><h2 id="ind-的作用"><a href="#ind-的作用" class="headerlink" title="ind 的作用"></a>ind 的作用</h2><p>首先我们看向 main.cpp 的 main 函数里的这段代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3f<span class="token operator">></span> pos<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3i<span class="token operator">></span> ind<span class="token punctuation">&#123;</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>pos 显然是三角形的三个顶点，但 ind 是做什么的？uh actually🤓☝️它定义了如何将顶点连接起来。对三角形来说它当然没什么用，但对多边形来说，它就很有用了。</p><p>比如说，想象一下我们在画一个六边形，我们需要六个顶点。但由于在渲染时我们主要绘制三角形，所以我们要把六边形拆分成多个三角形，而拆分出的每个三角形就对应着 ind 里的一个元素了。</p><p>对六边形来说，我们可能会定义下面这样的 pos 和 ind</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp">std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3f<span class="token operator">></span> pos<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>      <span class="token comment">// 0: 右</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>  <span class="token comment">// 1: 右上</span>    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span> <span class="token comment">// 2: 左上</span>    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>     <span class="token comment">// 3: 左</span>    <span class="token punctuation">&#123;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span><span class="token comment">// 4: 左下</span>    <span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.732</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">&#125;</span>  <span class="token comment">// 5: 右下</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>std<span class="token double-colon punctuation">::</span>vector<span class="token operator">&lt;</span>Eigen<span class="token double-colon punctuation">::</span>Vector3i<span class="token operator">></span> ind<span class="token punctuation">&#123;</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>    <span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="id-的作用"><a href="#id-的作用" class="headerlink" title="id 的作用"></a>id 的作用</h2><p>继续看向 main.cpp 的 main 函数，把目光投向这段代码</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">auto</span> pos_id <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">load_positions</span><span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">auto</span> ind_id <span class="token operator">=</span> r<span class="token punctuation">.</span><span class="token function">load_indices</span><span class="token punctuation">(</span>ind<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">// ...</span>r<span class="token punctuation">.</span><span class="token function">draw</span><span class="token punctuation">(</span>pos_id<span class="token punctuation">,</span> ind_id<span class="token punctuation">,</span> rst<span class="token double-colon punctuation">::</span>Primitive<span class="token double-colon punctuation">::</span>Triangle<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在这里，我们把 id 传入了 draw 函数来画图。但为什么要用 id 呢？直接 &amp; 传参不行吗？</p><p>【TODO：我不知道。AI说在正式的渲染代码里，我们会在load时做一些操作诸如把数据上传到显存，或者重新组织上传的各个数据来提高效率，但咱也不知道是不是真的。】</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;本次作业要求我们实现旋转矩阵、投影矩阵。我们先简单看下作业是怎么做的，再看看代码框架里的几个有趣的地方。&lt;/p&gt;
&lt;h1 id=&quot;作业实现&quot;&gt;&lt;a href=&quot;#作业实现&quot; class=&quot;headerlink&quot; title=&quot;作业实现&quot;&gt;&lt;/a&gt;作业实现&lt;/h1&gt;&lt;h2 i</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Hw" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Hw/"/>
    
    
  </entry>
  
  <entry>
    <title>Note 1 Transformation</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note1-transformation/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/GAMES101/Notes/Note1-transformation/</id>
    <published>2025-08-19T07:10:28.000Z</published>
    <updated>2025-08-22T01:20:58.030Z</updated>
    
    <content type="html"><![CDATA[<h1 id="2D-Transformation"><a href="#2D-Transformation" class="headerlink" title="2D Transformation"></a>2D Transformation</h1><p>在二维空间中，我们能用二维矩阵表示所有的线性变换。但二维空间中的平移在二维空间中不是线性变换，因此我们希望找到另一个空间，并将二维空间嵌入，让二维平移在这个空间中变为线性变换。把笛卡尔坐标扩展为齐次坐标，就得到了这样的空间。</p><p>对二维空间的一点 $(x,y)$，三元组 $(xZ,yZ,Z)$ 即为该点的齐次坐标。如 $(1,2)$ 可表示为 $(1,2,1)$ 或 $(100,200,100)$. 换句话说，二维空间的任何点都能表示为齐次坐标 $(X,Y,Z)$，其中 $Z\neq 0$.</p><p>另外，如果我们把无穷远点也考虑进来，我们就可以用 $(x,y,0)$ 表示无穷远点。</p><p>叽里咕噜说什么呢，快告诉我怎么用线性变换表示平移！</p><p>对二维空间的一点 $(x,y)$，首先将它转化为齐次坐标得到 $(x,y,1)$，然后与下面的矩阵相乘</p><script type="math/tex; mode=display">M = \begin{bmatrix}1 & 0 & t_x \\0 & 1 & t_y \\0 & 0 & 1\end{bmatrix}</script><p>就得到了 $(x+t_x,y+t_y,1)$. 然后再转换回笛卡尔坐标，就得到了 $(x+t_x,y+t_y)$.</p><p>这样一来，旋转、平移就能统一成下面的形式：</p><script type="math/tex; mode=display">M = \begin{bmatrix}\cos \theta & -\sin \theta & t_x \\\sin \theta & \cos \theta & t_y \\0 & 0 & 1\end{bmatrix}</script><h1 id="3D-Transformation"><a href="#3D-Transformation" class="headerlink" title="3D Transformation"></a>3D Transformation</h1><p>与二维的情况类似，我们也把三维空间嵌入一个新空间。</p><p>对三维空间的一点 $(x,y,z)$，三元组 $(xS,yS,zS,S)$ 即为该点的齐次坐标。如 $(1,2,3)$ 可表示为 $(1,2,3,1)$ 或 $(100,200,300,100)$. 换句话说，三维空间的任何点都能表示为齐次坐标 $(X,Y,Z,S)$，其中 $S\neq 0$.</p><p>我们这里讨论右手坐标系，下面给出按右手定则旋转 $\theta$ 角度的矩阵：</p><script type="math/tex; mode=display">R_x(\theta) = \begin{bmatrix} 1 & 0 & 0 & 0 \\ 0 & \cos \theta & -\sin \theta & 0 \\ 0 & \sin \theta & \cos \theta & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix}</script><script type="math/tex; mode=display">R_y(\theta) = \begin{bmatrix} \cos \theta & 0 & \sin \theta & 0 \\ 0 & 1 & 0 & 0 \\ -\sin \theta & 0 & \cos \theta & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix}</script><script type="math/tex; mode=display">R_z(\theta) = \begin{bmatrix} \cos \theta & -\sin \theta & 0 & 0 \\ \sin \theta & \cos \theta & 0 & 0 \\ 0 & 0 & 1 & 0 \\ 0 & 0 & 0 & 1 \end{bmatrix}</script><p>你会注意到沿 $y$ 轴旋转的矩阵和别的不一样，但这是完全正确的，认真算一算就好了。</p><p>（我没感觉这里有什么“深刻含义”，但感觉即使有也应该不会很有用……）</p><p>（不过不知道如果推广到 $n$ 维旋转会不会有用）</p><p>（可我们生活在三次元！）</p><p>值得注意的是，<strong>旋转矩阵都是正交矩阵</strong>，所以它的转置就是它的逆。</p><p>世界上还存在一个叫做 <strong>Rodrigues 旋转公式</strong>的东西，它给出了向量 $v$ 绕单位向量 $k$ 旋转 $\theta$ 角度得到的结果。（按右手定则旋转）</p><script type="math/tex; mode=display">\mathbf{v}_{\text{rot}} = \mathbf{v} \cos\theta + (\mathbf{k} \times \mathbf{v}) \sin\theta + \\\mathbf{k}(\mathbf{k} \cdot \mathbf{v})(1 - \cos\theta)</script><p><img src="/images/learning/open-course/GAMES101/Notes/note1/rodrigues.png" alt=""></p><p>当然也可以把这个旋转矩阵写出来：</p><script type="math/tex; mode=display">\mathbf{R}(\mathbf{k}, \theta) = \cos(\theta)\mathbf{I} + (1 - \cos(\theta))\mathbf{k}\mathbf{k}^T + \sin(\theta)\begin{bmatrix} 0 & -k_z & k_y \\ k_z & 0 & -k_x \\ -k_y & k_x & 0 \end{bmatrix}</script><p>最右边那个矩阵是 $k$ 的叉乘矩阵啦~</p><h1 id="Viewing-transformation"><a href="#Viewing-transformation" class="headerlink" title="Viewing transformation"></a>Viewing transformation</h1><p>2D 和 3D transformation 都是基础变换，接下来我们研究游戏里的画面是如何渲染到屏幕上的。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/map-seq.png" alt=""></p><p>如下图所示，我们有一个摄像机、两个方块，那么我们是怎么计算出摄像机拍摄的画面的呢（参考右下角）？</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/godot-camera.png" alt=""></p><p>我们按照下面的流程进行操作：</p><h2 id="Camera-transformation"><a href="#Camera-transformation" class="headerlink" title="Camera transformation"></a>Camera transformation</h2><p>首先，我们变换空间让摄像机位于坐标原点，且面向 $z$ 轴负方向，头顶朝 $y$ 轴正方向。对上图来说，就是把 $w$ 变换为 $z$ 轴，把 $v$ 变换为 $y$ 轴。</p><p>对应的矩阵是</p><script type="math/tex; mode=display">\text{M}_{\text{cam}} =\begin{bmatrix}u_x & u_y & u_z & 0 \\v_x & v_y & v_z & 0 \\w_x & w_y & w_z & 0 \\0 & 0 & 0 & 1\end{bmatrix}\times\begin{bmatrix}1 & 0 & 0 & -\text{cam}_x \\0 & 1 & 0 & -\text{cam}_y \\0 & 0 & 1 & -\text{cam}_z \\0 & 0 & 0 & 1\end{bmatrix}</script><p>这里的小技巧是，旋转矩阵的逆是其转置，所以我们先算出 $xyz$ 轴变换到 $uvw$ 轴的旋转矩阵，再对其转置，就得到了把 $uvw$ 变换到 $xyz$ 的矩阵。</p><h2 id="Projection-transformation"><a href="#Projection-transformation" class="headerlink" title="Projection transformation"></a>Projection transformation</h2><p>然后，我们把相机拍摄的区域变换到 $[-1,1]^3$ 中，这是一个规范化，为未来把区域放到屏幕上做准备。在此之前，我们要先确定相机能够拍摄的区域的范围。这里涉及到的变量主要有 fov、aspect ratio、near、far. </p><p>下图能清晰地解释 fov 和 aspect ratio。fov 即 field of view，表示用角度衡量的可见范围；aspect ratio 则是显示区域的宽高比。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/fov-and-aspect-ratio.png" alt=""></p><p>near 和 far 则定义了剔除边界，我们只渲染满足 $z \in [\text{near}, \text{far}]$ 的东西。原点、近平面和原平面共同划分出了一块有限的空间，这就是摄像机拍摄的区域（视锥），我们会把他变换到 $[-1,1]^3$ 中。</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/near-far.png" alt=""></p><p>变换分为两步，第一步是把视锥变换为长方体，第二步把长方体变换为 $[-1,1]^3$ 的正方体。</p><p>在第一步变换时，我们希望满足以下两点：</p><ol><li>near 和 far 平面上的点的 $z$ 值不变</li><li>近大远小，且缩放比例符合相似三角形的规律</li></ol><p>结合齐次坐标，我们就能得到以下矩阵：</p><script type="math/tex; mode=display">\begin{align*}\text{M}_\text{per}&=\begin{bmatrix}\frac{2}{r-l} & 0 & 0 & -\frac{r+l}{r-l} \\0 & \frac{2}{t-b} & 0 & -\frac{t+b}{t-b} \\0 & 0 & \frac{2}{n-f} & -\frac{n+f}{n-f} \\0 & 0 & 0 & 1\end{bmatrix}\times\begin{bmatrix}n & 0 & 0 & 0 \\0 & n & 0 & 0 \\0 & 0 & n+f & -nf \\0 & 0 & 1 & 0\end{bmatrix}\\&=\begin{bmatrix}\frac{2n}{r-l} & 0 & -\frac{r+l}{r-l} & 0 \\0 & \frac{2n}{t-b} & -\frac{t+b}{t-b} & 0 \\0 & 0 & \frac{n+f}{n-f} & -\frac{2nf}{n-f} \\0 & 0 & 1 & 0\end{bmatrix}\end{align*}</script><p>第一个等号右边的式子中，右边的矩阵把视锥压缩为一个长方体，左边的矩阵把这个长方体变换到 $[-1,1]^3$.</p><p><img src="/images/learning/open-course/GAMES101/Notes/note1/rectangle.png" alt=""></p><p>我们可以根据 $\text{near},\text{fov},\text{aspectRatio<br>}$ 求出 $l,t,r,b$.</p><script type="math/tex; mode=display">\begin{align*}&\text{t} = -n \times \tan\left(\frac{\text{fov}}{2}\right)\\&\text{b} = -\text{t}\\&\text{r} = \text{t} \times \text{aspectRatio}\\&\text{l} = -\text{r}\end{align*}</script><p><img src="/images/learning/open-course/GAMES101/Notes/note1/fov-ltrb.png" alt=""></p><p>也就是说，我们可以把投影矩阵写为：</p><script type="math/tex; mode=display">\large\text{M}_\text{per} =\begin{bmatrix}-\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & -\frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & \frac{n+f}{n-f} & -\frac{2nf}{n-f} \\0 & 0 & 1 & 0\end{bmatrix}</script><h2 id="Viewport-transformation"><a href="#Viewport-transformation" class="headerlink" title="Viewport transformation"></a>Viewport transformation</h2><p>最后，我们会把 $[-1,1]^3$ 的内容的宽高映射为屏幕大小。在这个变换中 $z$ 坐标不变，因此变换矩阵为：</p><script type="math/tex; mode=display">\large\text{M}_\text{viewport}=\begin{bmatrix}\frac{width}{2} & 0 & 0 & \frac{width}{2} \\0 & \frac{height}{2} & 0 & \frac{height}{2} \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{bmatrix}</script><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总而言之，我们的变换矩阵为</p><script type="math/tex; mode=display">\begin{align*}&\text{M}=\text{M}_\text{viewport}\text{M}_\text{per}\text{M}_\text{cam}\end{align*}</script><p>其中</p><script type="math/tex; mode=display">\begin{align*}&\text{M}_{\text{cam}} =\begin{bmatrix}u_x & u_y & u_z & 0 \\v_x & v_y & v_z & 0 \\w_x & w_y & w_z & 0 \\0 & 0 & 0 & 1\end{bmatrix}\times\begin{bmatrix}1 & 0 & 0 & -\text{cam}_x \\0 & 1 & 0 & -\text{cam}_y \\0 & 0 & 1 & -\text{cam}_z \\0 & 0 & 0 & 1\end{bmatrix}\\\large&\text{M}_\text{per} =\begin{bmatrix}-\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & -\frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & \frac{n+f}{n-f} & -\frac{2nf}{n-f} \\0 & 0 & 1 & 0\end{bmatrix}\\&\large\text{M}_\text{viewport}=\begin{bmatrix}\frac{width}{2} & 0 & 0 & \frac{width}{2} \\0 & \frac{height}{2} & 0 & \frac{height}{2} \\0 & 0 & 1 & 0 \\0 & 0 & 0 & 1\end{bmatrix}\end{align*}</script><p>要注意的是，我们讨论的 $n$ 和 $f$ 被定义为坐标值，它们是小于 0 的。一些地方把 $n$ 和 $f$ 定义为到近/远平面的距离，这是大于 0 的，这会引起投影矩阵的变化。另外，不同的坐标系约定也会引起矩阵的变化。</p><p>比如在OpenGL中， $n$ 和 $f$ 被定义为到近/远平面的距离，这是大于 0 的，而且他们的 projection transformation 把拍摄内容从右手坐标系的视图空间映射到左手坐标系的标准设备坐标（NDC）空间。特别地，$z$ 轴的 $[ -n,-f]$ 被映射到 $[-1,1]$ （这似乎说明在 NDC 空间中，$z$ 值较小的内容渲染更靠前？）</p><p>他们的 $\text{M}_\text{their-per}$ 为：</p><script type="math/tex; mode=display">\large\text{M}_\text{their-per} =\begin{bmatrix}\frac{1}{\text{aspect} \times \tan(\frac{\text{fov}}{2})} & 0 & 0 & 0 \\0 & \frac{1}{\tan(\frac{\text{fov}}{2})} & 0 & 0 \\0 & 0 & -\frac{f+n}{f-n} & -\frac{2fn}{f-n} \\0 & 0 & -1 & 0\end{bmatrix}</script><p>Godot 使用和 OpenGL 一样的矩阵，下面是他们设置 $\text{M}_\text{per}$ 的代码。还要注意的是，他们使用 column-major 的方法存储数据，即</p><script type="math/tex; mode=display">M =\begin{pmatrix}\text{columns}[0][0] & \text{columns}[1][0] \\\text{columns}[0][1] & \text{columns}[1][1]\end{pmatrix}</script><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token class-name">Projection</span><span class="token double-colon punctuation">::</span><span class="token function">set_perspective</span><span class="token punctuation">(</span>real_t p_fovy_degrees<span class="token punctuation">,</span> real_t p_aspect<span class="token punctuation">,</span> real_t p_z_near<span class="token punctuation">,</span> real_t p_z_far<span class="token punctuation">,</span> <span class="token keyword">bool</span> p_flip_fov<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span>p_flip_fov<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>p_fovy_degrees <span class="token operator">=</span> <span class="token function">get_fovy</span><span class="token punctuation">(</span>p_fovy_degrees<span class="token punctuation">,</span> <span class="token number">1.0</span> <span class="token operator">/</span> p_aspect<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>real_t sine<span class="token punctuation">,</span> cotangent<span class="token punctuation">,</span> deltaZ<span class="token punctuation">;</span>real_t radians <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token double-colon punctuation">::</span><span class="token function">deg_to_rad</span><span class="token punctuation">(</span>p_fovy_degrees <span class="token operator">/</span> <span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>deltaZ <span class="token operator">=</span> p_z_far <span class="token operator">-</span> p_z_near<span class="token punctuation">;</span>sine <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token double-colon punctuation">::</span><span class="token function">sin</span><span class="token punctuation">(</span>radians<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>deltaZ <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>sine <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">||</span> <span class="token punctuation">(</span>p_aspect <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token keyword">return</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>cotangent <span class="token operator">=</span> <span class="token class-name">Math</span><span class="token double-colon punctuation">::</span><span class="token function">cos</span><span class="token punctuation">(</span>radians<span class="token punctuation">)</span> <span class="token operator">/</span> sine<span class="token punctuation">;</span><span class="token function">set_identity</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> cotangent <span class="token operator">/</span> p_aspect<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> cotangent<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>p_z_far <span class="token operator">+</span> p_z_near<span class="token punctuation">)</span> <span class="token operator">/</span> deltaZ<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">2</span> <span class="token operator">*</span> p_z_near <span class="token operator">*</span> p_z_far <span class="token operator">/</span> deltaZ<span class="token punctuation">;</span>columns<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;2D-Transformation&quot;&gt;&lt;a href=&quot;#2D-Transformation&quot; class=&quot;headerlink&quot; title=&quot;2D Transformation&quot;&gt;&lt;/a&gt;2D Transformation&lt;/h1&gt;&lt;p&gt;在二维空间中，我们能</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="GAMES101" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/GAMES101/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>主题周是什么？</title>
    <link href="http://rinevard.github.io/wiki/learning/theme-week/%E4%B8%BB%E9%A2%98%E5%91%A8%E6%98%AF%E4%BB%80%E4%B9%88/"/>
    <id>http://rinevard.github.io/wiki/learning/theme-week/%E4%B8%BB%E9%A2%98%E5%91%A8%E6%98%AF%E4%BB%80%E4%B9%88/</id>
    <published>2025-07-21T06:28:38.000Z</published>
    <updated>2025-07-21T06:37:17.017Z</updated>
    
    <content type="html"><![CDATA[<p>最近想提升自己的游戏开发技能，于是想出了这个主题周模式，就是每周选一个主题然后去学相关的东西，然后至少达到一个能用在gamejam上的水平。不得不说这个模式还是非常适合我的，毕竟我比较喜欢学公开课，而主题周和公开课有许多相似之处，不过要自己为打造每周的主题、课程、作业。</p><p>博主博主，你现在定了哪些主题呢？现在有光照、骨骼动画、肉鸽的随机地图、自走棋斗蛐蛐、viewport机制。让我们慢慢学，希望在能在以后的gamejam上用上他们！</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近想提升自己的游戏开发技能，于是想出了这个主题周模式，就是每周选一个主题然后去学相关的东西，然后至少达到一个能用在gamejam上的水平。不得不说这个模式还是非常适合我的，毕竟我比较喜欢学公开课，而主题周和公开课有许多相似之处，不过要自己为打造每周的主题、课程、作业。&lt;/</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="主题周" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E9%A2%98%E5%91%A8/"/>
    
    
  </entry>
  
  <entry>
    <title>Godot光照基础</title>
    <link href="http://rinevard.github.io/wiki/learning/theme-week/lighting/godot-lighting-basic/"/>
    <id>http://rinevard.github.io/wiki/learning/theme-week/lighting/godot-lighting-basic/</id>
    <published>2025-07-21T06:28:38.000Z</published>
    <updated>2025-07-21T06:39:19.850Z</updated>
    
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="主题周" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E9%A2%98%E5%91%A8/"/>
    
    <category term="光照" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E4%B8%BB%E9%A2%98%E5%91%A8/%E5%85%89%E7%85%A7/"/>
    
    
  </entry>
  
  <entry>
    <title>杀戮尖塔的框架如此自洽，我们能离开它吗？</title>
    <link href="http://rinevard.github.io/wiki/game-design/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94%E6%A1%86%E6%9E%B6/"/>
    <id>http://rinevard.github.io/wiki/game-design/%E6%9D%80%E6%88%AE%E5%B0%96%E5%A1%94%E6%A1%86%E6%9E%B6/</id>
    <published>2025-07-10T12:22:38.000Z</published>
    <updated>2025-08-20T11:13:48.877Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 70%;}</style><p>最近在设计卡牌游戏（你知道的，我一直是牌佬），发现以前做的翻牌游戏原型的翻牌玩法本身随机性过强，从而拓展空间过小，但“棋盘上的随从交互”非常有趣，于是就打算从它出发开始进一步设计。初步的想法是做卡牌肉鸽。（哇，又一个卡牌肉鸽）</p><p><img src="/images/game-design/杀戮尖塔框架/reverse_prototype.png" alt=""></p><p>我对肉鸽并没有特别的喜爱，因为我一直想着，如果我们拿走了玩家的时间，起码要补偿一些什么，而肉鸽似乎并没有补偿一些我很喜欢的东西。不过无论如何，我还是挺喜欢打牌的，杀戮尖塔、炉石狗头人冒险、邪恶冥刻都是我很喜欢的游戏，所以做个卡牌肉鸽也还挺不错。按我的理解，肉鸽最重要的是每个小关卡的体验，因此我就着手开始做每局牌局的原型了。</p><p>然后让我们开始最有趣的设计环节！</p><p>现在我们面前有一个3x5的牌桌，那么接下来该做什么？我们先随便拿点手牌吧，可以把手牌放到牌桌上来召唤随从，然后和敌方随从打架。但手牌从哪里来，费用机制又怎么做呢？这就引出了本文的核心内容——杀戮尖塔的框架如此自洽，我们能离开它吗？</p><h1 id="杀戮尖塔"><a href="#杀戮尖塔" class="headerlink" title="杀戮尖塔"></a>杀戮尖塔</h1><p>杀戮尖塔为什么是神？在谈论这个问题之前，我想先说说其他卡牌游戏相较于爬塔究竟差在了哪里（误</p><p>总之，让我们来看看杀戮尖塔自洽的设计吧。</p><p><img src="/images/game-design/杀戮尖塔框架/slayspire.jpg" alt=""></p><h2 id="单局牌局的自洽"><a href="#单局牌局的自洽" class="headerlink" title="单局牌局的自洽"></a>单局牌局的自洽</h2><p>杀戮尖塔的手牌从哪里来，费用机制又是怎样的？在杀戮尖塔中，如果不考虑特殊效果，我们在回合开始时会丢弃所有手牌并抽五张牌，并且费用重置为三费。</p><p>我们先来聊聊前者。前者在玩起来时感觉十分自然，但从设计的角度，其实是一个并不显然的设计。我简单调研了一下，发现回合开始时刷新手牌似乎是DBG游戏的标配，其开山鼻祖是《皇舆争霸》（Dominion），接下来我们来看看它有怎样的效果。</p><p>我认为最关键的两点是，<strong>减少了卡手的可能性</strong>、<strong>降低了策略性</strong>。刷新手牌显然能减少卡手，但为什么降低了策略性呢，以及这是好事吗？</p><p>为什么它降低了策略性？因为手牌的刷新就意味着玩家减少了对下一回合的预期。回合制游戏的很大一部分策略性是由对下一回合的预期引起的。对炉石（以及很多CCG）来说，我会根据场面考虑每张牌什么时候打出有最大收益，甚至猜测对手接下来的行动并预留一些卡牌。而杀戮尖塔则杜绝了这种预期，让玩家根据敌人当前回合的意图，结合每回合发的牌打最优解。</p><p>是的，最优解。对很多卡牌游戏来说，最优解的计算量是极大的，而杀戮尖塔极大地简化了这个计算量，让每回合最优解的计算都并不困难，从而降低了思维量。这当然不是坏事，我认为这是相当优秀的设计。游戏并不是为了难倒玩家而存在的，比起难倒玩家，让玩家通过自己的努力克服难关更重要。</p><p><img src="/images/game-design/杀戮尖塔框架/doc-pengpeng.jpg" alt=""></p><p>如果手牌刷新，那费用自然也要刷新，这便是手牌和费用的自洽了。而由此也能推出杀戮尖塔不做随从的理由了。随从是持续性的，而法术是一次性的。如果手牌在刷新，那怎么和随从打combo呢？</p><p>所以我认为怪物火车并不如杀戮尖塔自洽。我这回合费用不足以打出所有的治疗牌，然后回合结束治疗牌就全被扔到弃牌堆里了，那我缺的combo谁给我补啊😭</p><p>如果总结一下，我会说杀戮尖塔的每一局都给我带来了炉石里奥秘法般的体验，依靠法术轰炸创死对面，但没有很多的同时依靠多张卡牌的combo，<strong>单局牌局</strong>运营不多。</p><h2 id="每局游戏的自洽"><a href="#每局游戏的自洽" class="headerlink" title="每局游戏的自洽"></a>每局游戏的自洽</h2><p>每局游戏的自洽又可以分为思维量要求的张弛有度，以及游戏机制本身的自洽。</p><p>先说前者。单局牌局策略性较低，但一整局游戏中运营是一个策略性很高的操作，也因此既不会玩得太累，也不会太简单。</p><p>再说后者。主要要说的是“血量保持”的机制。如果单局牌局的双方始终强度接近（比如对称式卡牌游戏），那血量显然也是需要在每局刷新的。不过对非对称游戏来说，控制强度接近实在有点困难，血量保持和每一大层的血量回复是一个简单的平衡手段。</p><p>原本还想说说易进难出的卡组，但实在没感觉它和别的东西很“自洽”。我对机制“自洽”的理解是把这个机制换成别的，游戏就很难工作了。比如把抽卡换成每回合抽一张，那费用重置就会导致一下就把牌打完；把血量换成每局重置，那游戏就简单一大截了。</p><p>而卡组的易进难出看起来是一个控制强度的自然手段，简单地把它改为限制卡组最少十五张，允许自由增删，似乎也不会破坏整个游戏。虽然没有原来好，但至少不是毁灭性的。</p><p><img src="/images/game-design/杀戮尖塔框架/slayspire-shop.jpg" alt=""></p><p>有趣的是，杀戮尖塔似乎并没有很多提高单卡强度的手段，而许多类似的卡牌肉鸽会做大量的单卡强度的提高。比如——邪恶冥刻。</p><h1 id="邪恶冥刻"><a href="#邪恶冥刻" class="headerlink" title="邪恶冥刻"></a>邪恶冥刻</h1><p>我们聊聊莱西模组，这最接近卡牌肉鸽。</p><h2 id="单局牌局的自洽-1"><a href="#单局牌局的自洽-1" class="headerlink" title="单局牌局的自洽"></a>单局牌局的自洽</h2><p>邪恶冥刻每回合抽一张牌（可选抽牌组的牌或者松鼠牌），费用不自然回复，而是依靠献祭随从获得。它的原型来自ludum dare 43这场gamejam，献祭机制在那里就被定下来了。献祭机制确实非常好玩，所以整个游戏都是以它为核心发展出去的。 </p><p><img src="/images/game-design/杀戮尖塔框架/sacrifice-jam.png" alt=""></p><p>献祭是费用机制，那抽牌机制是怎么根据献祭被确定的呢？抽牌无非两种，一种是刷新，一种是保留手牌每回合抽卡。献祭机制导致高费牌难以立即打出，毕竟如果把高费牌刷掉，下次抽到就不知道是什么时候了。所以显然保留手牌更合适。</p><p>比起杀戮尖塔，邪恶冥刻的单局牌局更具”持续性“，我们不仅能考虑到下一回合，还能考虑到下下回合。随从站场、手牌不刷新、献祭机制都是持续性的体现。</p><p>但运气成分实在是太高了！过牌的缺乏导致我们极度依赖于起手，费用不自然回复和五点伤害差就输又强化了这一点。</p><p>不过说到底，这些问题都是因为每回合只抽一张牌对卡组构筑提出了极高的要求。好牌可能沉底，新牌也可能沉底，一沉底这局就没法玩了。</p><p>作者Daniel用奇妙的方式解决了问题——在地图上提供大量的牌组改造节点，并鼓励超模单卡。我们会在下一节讨论这一点。</p><p>在此之前，我们来看看邪恶冥刻的原型吧：<a href="https://dmullinsgames.itch.io/sacrifices-must-be-made">https://dmullinsgames.itch.io/sacrifices-must-be-made</a></p><h2 id="每局游戏的自洽-1"><a href="#每局游戏的自洽-1" class="headerlink" title="每局游戏的自洽"></a>每局游戏的自洽</h2><p><img src="/images/game-design/杀戮尖塔框架/inscription.png" alt=""></p><p>如我们之前所言，每回合只抽一张牌对卡组构筑提出了极高的要求。一个自然的思路是允许玩家自由调整卡组，只是设置些许限制，比如每张牌最多带两张、至少二十张牌什么的。但邪恶冥刻并不是这么做的。</p><p>在邪恶冥刻中，删卡并不是很困难的事，造超模单卡也非常简单。祭坛、真菌学家节点可以同时实现这两点，骨王可以删卡，画家可以复制超模单卡，每层可以拿两三张稀有卡。这就让玩家能够迅速提升单卡质量，靠超模单卡和对面打架。</p><p>也因此在邪恶冥刻中经常会出现一回合秒对面的局，说实话我觉得这并不是太好的设计，不过确实挺自洽的。</p><h1 id="我的游戏"><a href="#我的游戏" class="headerlink" title="我的游戏"></a>我的游戏</h1><p>（哇，你的游戏和杀戮尖塔、邪恶冥刻都是一级标题，那一定和他们一样厉害吧</p><p><img src="/images/game-design/杀戮尖塔框架/reverse_prototype.png" alt=""></p><p>现在我们面前有一个3x5的牌桌，那么接下来该做什么？我们先随便拿点手牌吧，可以把手牌放到牌桌上来召唤随从，然后和敌方随从打架。但手牌从哪里来，费用机制又怎么做呢？</p><p>随从是站场的持续性的东西，所以我们就不刷新手牌了，而是每回合抽一张牌。费用刷新也未尝不可，不过我挺喜欢邪恶冥刻的献祭机制的，所以就直接搬过来用了。邪恶冥刻太卡手了，所以我们每回合再给玩家塞一张松鼠牌。</p><p>不过要说明的是，这些只是理论推导。在实际做原型的时候我也测试了刷新手牌、刷新费用，发现确实还是每回合抽一张牌+献祭机制和这个随从交互机制的契合度最高。理论和实际相符说明理论有一定指导意义，以后可以接着用，理论与实际不符说明理论在胡扯，就要调整了。</p><p>至此，我们完成了单局牌局的设计。之后我把牌桌改成了4x5，发现更有策略也更好玩了，找人试玩了一下之后激进地改成了5x7，居然又更有策略更好玩了，那暂时就这样吧。</p><p><img src="/images/game-design/杀戮尖塔框架/5x7prototype.png" alt=""></p><p>这里是试玩链接：</p><p><a href="/games/card-chess-prototype/index.html" target="_blank" rel="noopener noreferrer">开始游戏（将在新标签页打开）</a></p><p>喜欢的话可以填个问卷，谢谢喵！</p><p><a href="https://wj.qq.com/s2/23112055/a88d/" target="_blank" rel="noopener noreferrer">问卷（将在新标签页打开）</a></p><p>那么每局游戏该怎么做呢？由于我们的机制和邪恶冥刻相似，所以它会遇到的问题我们也都会遇到。最关键的两点就是牌越多越菜和关键牌沉底。</p><p>一开始我尝试解决前者，然后偶然间得到了一个我觉得还不错的，能同时解决这两个问题的方案。</p><p>解决问题无非从单局牌局和整局游戏考虑，我想了半天没想到怎么用在单局内解决问题，于是就想研究下通过调整整局游戏的运营来解决问题。</p><p>在玩卡牌肉鸽的时候，我们经常遇到选牌加入牌组不如跳过的情况，这就是典型的“牌越多越菜”。那怎么保证每次选牌都有补强呢？考虑到我们的献祭机制，我就想到把可选牌献祭成随时可以使用的一次性道具，这样每次选牌都至少能让玩家变强一点。</p><p>道具怎么做呢？初步想法是把牌的费用减半，法术牌不变，随从牌在下个回合开始时自动被献祭。</p><p>有趣的是，它也缓解了关键牌沉底的问题，毕竟一方面道具能帮助我们过渡，另一方面我们也能直接把关键牌献祭成道具，然后就不用担心沉底了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 70%;
}
&lt;/style&gt;

&lt;p&gt;最近在设计卡牌游戏（你知道的，我一直是牌佬），发现以前做的翻牌游戏原型的翻牌玩法本身随机性过强，从而拓展空间过小，但“棋盘上的随从交互”非常有趣，于是就打算从它出发开始进一步设计。初步的想法是</summary>
      
    
    
    
    <category term="游戏设计" scheme="http://rinevard.github.io/categories/%E6%B8%B8%E6%88%8F%E8%AE%BE%E8%AE%A1/"/>
    
    
  </entry>
  
  <entry>
    <title>_我也想做出优秀的作品</title>
    <link href="http://rinevard.github.io/wiki/others/thoughts/%E6%88%91%E4%B9%9F%E6%83%B3%E5%81%9A%E5%87%BA%E4%BC%98%E7%A7%80%E7%9A%84%E4%BD%9C%E5%93%81/"/>
    <id>http://rinevard.github.io/wiki/others/thoughts/%E6%88%91%E4%B9%9F%E6%83%B3%E5%81%9A%E5%87%BA%E4%BC%98%E7%A7%80%E7%9A%84%E4%BD%9C%E5%93%81/</id>
    <published>2025-06-16T14:03:30.000Z</published>
    <updated>2025-07-18T15:06:40.639Z</updated>
    
    <content type="html"><![CDATA[<p>最近做了<a href="https://rinevard.itch.io/myriad-by-cards">牌生万物</a>，感觉挺难受的。一直以来我都希望每一部作品都做得比上一部更好，这一部看起来比<a href="https://rinevard.itch.io/undertetris">undertetris</a>好一点吗？或许吧，但我就是感觉不开心。</p><p>想来可能是因为这不是我喜欢的体验吧。我想做出能打动玩家的作品，能让玩家记住一辈子，至少是一年的作品，而不是这样的莫名其妙的“融合卡牌”。玩着这个游戏时，比起对作品的满意，更多的是烦躁。也可能是因为现在是考试周压力大吧，我也不清楚。</p><p>我想和LLM一起创造一个世界啊，一个栩栩如生的世界。每个事件都让人思考，每个角色都给人深刻印象，而不是现在的名词堆砌、数值膨胀。LLM不会写故事从来都不是借口，我们是不是本可以做得更好？</p><p>我该怎么做才好？我该前往何方？</p><p>我知道，让LLM生成的世界像《苏丹的游戏》一样本身就是一件不现实的事情。但起码它要像是一个世界吧，整个冒险是有故事性的吧，现在是个什么玩意？？？更可气的是这玩意还真有可玩性，做了一个靠强化程序和数值膨胀堆砌起来的东西真像是对自己的侮辱！</p><p>至少，它的体验不该是数值膨胀。至少，让玩家玩下去的动力不该是强化程序。如果我们拿走了玩家的时间，我们起码应当补偿一些什么才对，而不该徒留悔恨感。</p><p>可能也有点偏激了，可能只是我自己不喜欢这种类型而已……甚至我自己也觉得还算可以，至少确实有让我印象深刻的时刻。但我还是感觉不开心，毕竟，“我们是不是本可以做得更好？”</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近做了&lt;a href=&quot;https://rinevard.itch.io/myriad-by-cards&quot;&gt;牌生万物&lt;/a&gt;，感觉挺难受的。一直以来我都希望每一部作品都做得比上一部更好，这一部看起来比&lt;a href=&quot;https://rinevard.itch.io/un</summary>
      
    
    
    
    <category term="杂谈" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    <category term="碎碎念" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>Lab2 System calls</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab2-syscall/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab2-syscall/</id>
    <published>2025-06-04T07:10:38.000Z</published>
    <updated>2025-06-04T06:37:13.135Z</updated>
    
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Labs" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Labs/"/>
    
    
  </entry>
  
  <entry>
    <title>第二章——操作系统概述</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note2-organization-overview/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note2-organization-overview/</id>
    <published>2025-06-04T06:26:38.000Z</published>
    <updated>2025-06-04T06:43:40.608Z</updated>
    
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>看我看我</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/little-fish/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/little-fish/</id>
    <published>2025-06-01T06:32:38.000Z</published>
    <updated>2025-07-18T10:42:54.523Z</updated>
    
    <content type="html"><![CDATA[<p>这里存放着我对 book-riscv-rev4 和 MIT-6.S081 的笔记，每个笔记对应 book-riscv-rev4 的一个章节。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;这里存放着我对 book-riscv-rev4 和 MIT-6.S081 的笔记，每个笔记对应 book-riscv-rev4 的一个章节。&lt;/p&gt;
</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>第一章——系统接口</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note1-sys-interface/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Notes/note1-sys-interface/</id>
    <published>2025-06-01T03:18:38.000Z</published>
    <updated>2025-08-20T11:13:48.861Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 70%;}</style><h1 id="常用的系统接口"><a href="#常用的系统接口" class="headerlink" title="常用的系统接口"></a>常用的系统接口</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>fork()</td><td>创建进程</td></tr><tr><td>exit()</td><td>结束当前进程</td></tr><tr><td>wait()</td><td>等待子进程结束</td></tr><tr><td>kill(pid)</td><td>结束 pid 所指进程</td></tr><tr><td>getpid()</td><td>获得当前进程 pid</td></tr><tr><td>sleep(n)</td><td>睡眠 n 秒</td></tr><tr><td>exec(filename, *argv)</td><td>加载并执行一个文件</td></tr><tr><td>sbrk(n)</td><td>为进程内存空间增加 n 字节</td></tr><tr><td>open(filename, flags)</td><td>打开文件，flags 指定读/写模式</td></tr><tr><td>read(fd, buf, n)</td><td>从文件中读 n 个字节到 buf</td></tr><tr><td>write(fd, buf, n)</td><td>从 buf 中写 n 个字节到文件</td></tr><tr><td>close(fd)</td><td>关闭打开的 fd</td></tr><tr><td>dup(fd)</td><td>复制 fd</td></tr><tr><td>pipe( p)</td><td>创建管道， 并把读和写的 fd 返回到p</td></tr><tr><td>chdir(dirname)</td><td>改变当前目录</td></tr><tr><td>mkdir(dirname)</td><td>创建新的目录</td></tr><tr><td>mknod(name, major, minor)</td><td>创建设备文件</td></tr><tr><td>fstat(fd)</td><td>返回文件信息</td></tr><tr><td>link(f1, f2)</td><td>给 f1 创建一个新名字(f2)</td></tr><tr><td>unlink(filename)</td><td>删除文件</td></tr></tbody></table></div><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>fork()</td><td>创建进程</td></tr><tr><td>exit()</td><td>结束当前进程</td></tr><tr><td>wait()</td><td>等待子进程结束</td></tr><tr><td>kill(pid)</td><td>结束 pid 所指进程</td></tr><tr><td>getpid()</td><td>获得当前进程 pid</td></tr><tr><td>exec(filename, *argv)</td><td>加载并执行一个文件</td></tr><tr><td>sbrk(n)</td><td>为进程内存空间增加 n 字节</td></tr></tbody></table></div><h1 id="I-O"><a href="#I-O" class="headerlink" title="I/O"></a>I/O</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>open(filename, flags)</td><td>打开文件，flags 指定读/写模式</td></tr><tr><td>read(fd, buf, n)</td><td>从文件中读 n 个字节到 buf</td></tr><tr><td>write(fd, buf, n)</td><td>从 buf 中写 n 个字节到文件</td></tr><tr><td>close(fd)</td><td>关闭打开的 fd</td></tr><tr><td>dup(fd)</td><td>复制 fd</td></tr></tbody></table></div><p>代码示例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">cat</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token comment">// 写入标准输出</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">!=</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cat: write error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cat: read error\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">cat</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> argc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cat: cannot open %s\n"</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">cat</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>不妨再来看看CSAPP的两张图</p><h3 id="open两次："><a href="#open两次：" class="headerlink" title="open两次："></a><strong>open两次：</strong></h3><p><img src="/images/learning/open-course/MIT-6.S081/notes/note1-syscall/opentwice.png" alt=""></p><h3 id="fork："><a href="#fork：" class="headerlink" title="fork："></a><strong>fork：</strong></h3><p><img src="/images/learning/open-course/MIT-6.S081/notes/note1-syscall/fork.png" alt=""></p><h1 id="管道"><a href="#管道" class="headerlink" title="管道"></a>管道</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>pipe( p)</td><td>创建管道， 并把读和写的 fd 返回到p，其中p是 int p[2]</td></tr></tbody></table></div><ul><li>p[0]: 读端(read end)的文件描述符</li><li>p[1]: 写端(write end)的文件描述符</li></ul><p>样例： <code>grep fork sh.c | wc -l</code> 命令将第一个命令(grep)的输出作为第二个命令(wc)的输入，<code>|</code> 就是管道符号。</p><p>下面的代码是 <code>|</code> 的实现示例，大体思路是把 <code>|</code> 左边的标准输出重定向到pipe的写端，把 <code>|</code> 右边的标准输入重定向到pipe的读端。</p><p>注意要关闭管道的所有写入端来让 <code>read</code> 返回，因为当 pipe 中没有数据时，<code>read</code> 会阻塞等待新数据写入，或是写入端都关闭，如果有新数据写入就读取，如果所有写入端都关闭就返回 0（对应EOF）.</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// 假设我们的命令是 grep fork sh.c | wc -l</span><span class="token keyword">case</span> PIPE<span class="token operator">:</span>    pcmd <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">struct</span> <span class="token class-name">pipecmd</span> <span class="token operator">*</span><span class="token punctuation">)</span>cmd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">panic</span><span class="token punctuation">(</span><span class="token string">"pipe"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>   <span class="token comment">// 释放文件描述符1，从而让dup把文件描述符1绑定到p[1]指向的东西</span>        <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//换句话说，我们在重定向标准输出到pipe的写端</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span>pcmd<span class="token operator">-></span>left<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对应 grep fork sh.c</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">// 与上面类似，重定向标准输入到pipe的读端</span>        <span class="token function">dup</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span>pcmd<span class="token operator">-></span>right<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 对应 wc -l</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">break</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="文件系统"><a href="#文件系统" class="headerlink" title="文件系统"></a>文件系统</h1><div class="table-container"><table><thead><tr><th><strong>系统调用</strong></th><th><strong>描述</strong></th></tr></thead><tbody><tr><td>chdir(dirname)</td><td>改变当前目录</td></tr><tr><td>mkdir(dirname)</td><td>创建新的目录</td></tr><tr><td>mknod(name, major, minor)</td><td>创建设备文件</td></tr><tr><td>fstat(fd)</td><td>返回文件信息</td></tr><tr><td>link(f1, f2)</td><td>给 f1 创建一个新名字(f2)</td></tr><tr><td>unlink(filename)</td><td>删除文件</td></tr></tbody></table></div><p>我们通常认为文件名就是文件本身，但实际上名称是一个硬链接(hard link)。一个文件可以有多个硬链接——例如，一个目录至少有两个硬链接：目录名和 <code>.</code> （在目录内时）。它还有来自每个子目录的一个硬链接（每个子目录中的 <code>..</code> 文件）。</p><p>那文件是什么呢？一个文件和一个 inode 一一对应，inode存放着这个文件的相关信息</p><p>xv6系统的inode结构包括下面这些内容：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">dinode</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">short</span> type<span class="token punctuation">;</span>              <span class="token comment">// File type</span>    <span class="token keyword">short</span> major<span class="token punctuation">;</span>             <span class="token comment">// Major device number (T_DEVICE only)</span>    <span class="token keyword">short</span> minor<span class="token punctuation">;</span>             <span class="token comment">// Minor device number (T_DEVICE only)</span>    <span class="token keyword">short</span> nlink<span class="token punctuation">;</span>             <span class="token comment">// Number of links to inode in file system</span>    uint size<span class="token punctuation">;</span>               <span class="token comment">// Size of file (bytes)</span>    uint addrs<span class="token punctuation">[</span>NDIRECT <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// Data block addresses</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以通过 <code>fstat</code> 获取文件描述符指向的文件的信息。dinode是磁盘上存储的详细信息，stat是暴露给用户的文件信息接口</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">struct</span> <span class="token class-name">stat</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> dev<span class="token punctuation">;</span>     <span class="token comment">// File system's disk device</span>    uint ino<span class="token punctuation">;</span>    <span class="token comment">// Inode number</span>    <span class="token keyword">short</span> type<span class="token punctuation">;</span>  <span class="token comment">// Type of file</span>    <span class="token keyword">short</span> nlink<span class="token punctuation">;</span> <span class="token comment">// Number of links to file</span>    uint64 size<span class="token punctuation">;</span> <span class="token comment">// Size of file in bytes</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>仅当我们把所有指向某个inode的链接都删除，这个inode才会被删除。</p><p>在下面的示例中，我们用 <code>ln</code> 创建了两个连接 file2 和 file3，它们都和 file1 指向的 inode 相同。可以看到，如果用 <code>echo</code> 修改 file2，那么 file1 也会被修改，因为我们修改的实际上是 inode，而它们指向同一个inode。<code>ls -l</code> 列出目录中的文件和目录的详细信息，第二个值是inode的link数。我们可以把链接视作文件的“别名”。</p><pre class="line-numbers language-none"><code class="language-none">$ echo &quot;What&#39;s in a name? That which we call a rose, by any other word would smell as sweet.&quot; &gt; file1.txt$ lsfile1.txt  open-course  programs$ cat file1.txtWhat&#39;s in a name? That which we call a rose, by any other word would smell as sweet.$ ln file1.txt file2.txt$ ln file1.txt file3.txt$ ls -ltotal 20-rw-r--r-- 3 rinevard rinevard   85 May 29 11:37 file1.txt-rw-r--r-- 3 rinevard rinevard   85 May 29 11:37 file2.txt-rw-r--r-- 3 rinevard rinevard   85 May 29 11:37 file3.txtdrwxr-xr-x 3 rinevard rinevard 4096 May 28 11:00 open-coursedrwxr-xr-x 2 rinevard rinevard 4096 May 28 10:19 programs$ echo &quot;-- William Shakespeare&quot; &gt;&gt; file2.txt$ cat file1.txtWhat&#39;s in a name? That which we call a rose, by any other word would smell as sweet.-- William Shakespeare<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>你可能会好奇目录的链接数怎么计算，是这样的：</p><ol><li>每个目录默认有2个链接，一个是目录自身的”.”，另一个是父目录中指向该目录的链接</li><li>目录中每包含一个子目录，链接数就会+1，因为每个子目录都会创建”..”链接指向父目录</li></ol><p>在下面的例子中，rootdir 的链接数是 4，因为父目录有一个指向它的链接”rootdir”，它自己有一个指向自己的链接”.”，它的两个子目录dir1和dir2分别有指向它的链接”..”</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/open-course/rootdir$ <span class="token function">ls</span>dir1  dir2  file1.md  file2.md  file3.md~/open-course/rootdir$ <span class="token function">ls</span> <span class="token punctuation">..</span>/ <span class="token parameter variable">-l</span>total <span class="token number">8</span>drwxr-xr-x <span class="token number">11</span> rinevard rinevard <span class="token number">4096</span> May <span class="token number">31</span> <span class="token number">16</span>:40 mit-6.828drwxr-xr-x  <span class="token number">4</span> rinevard rinevard <span class="token number">4096</span> Jun  <span class="token number">1</span> <span class="token number">10</span>:58 rootdir<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>文件路径格式：以 “/” 开头的是从根目录出发的路径，否则是从当前文件夹出发的路径</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">~/open-course$ <span class="token function">ls</span>mit-6.828~/open-course$ <span class="token function">ls</span> mit-6.828/LICENSE  Makefile  README  conf  grade-lab-util  gradelib.py  kernel  <span class="token function">mkfs</span>  user~/open-course$ <span class="token function">ls</span> /home/rinevard/open-course  programs<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>unix shell的许多命令都是用户级别的，而非内置的。shell通过fork子进程并调用exec来执行它们。但cd是内置的，因为cd改变了shell自身的工作目录。</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Read and run input commands.</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getcmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'c'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'d'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Chdir must be called by the parent, not the child.</span>        buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// chop \n</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cannot cd %s\n"</span><span class="token punctuation">,</span> buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span><span class="token function">parsecmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 70%;
}
&lt;/style&gt;

&lt;h1 id=&quot;常用的系统接口&quot;&gt;&lt;a href=&quot;#常用的系统接口&quot; class=&quot;headerlink&quot; title=&quot;常用的系统接口&quot;&gt;&lt;/a&gt;常用的系统接口&lt;/h1&gt;&lt;div class=&quot;</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Lab1 Xv6 and Unix utilities</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab1-util/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/Labs/lab1-util/</id>
    <published>2025-05-31T03:18:38.000Z</published>
    <updated>2025-08-20T11:13:48.861Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 80%;}</style><p>在开始 lab 之前，我们先来解释一下为什么我们写的代码能直接在 xv6 的 shell 里执行。我们来看看 <code>sh.c</code> 的部分代码：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// Read and run input commands.</span><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">getcmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>buf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'c'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'d'</span> <span class="token operator">&amp;&amp;</span> buf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">' '</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// Chdir must be called by the parent, not the child.</span>        buf<span class="token punctuation">[</span><span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// chop \n</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">chdir</span><span class="token punctuation">(</span>buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"cannot cd %s\n"</span><span class="token punctuation">,</span> buf <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">continue</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork1</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>        <span class="token function">runcmd</span><span class="token punctuation">(</span><span class="token function">parsecmd</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>从这里我们看出，shell通过fork子进程来执行命令。如果进一步看看 <code>runcmd</code> 函数，就会发现它调用了 <code>exec</code>，因此 shell 能执行用户写的代码。</p><p>有趣的是，从这段代码里我们也能看出 <code>cd</code> 是内置在 shell 里的命令，这是因为 cd 改变了shell自身的工作目录。</p><h1 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h1><p>这题让我们简单熟悉下接口。其实这里用 <code>printf</code> 更易读，不过我当时做的时候没发现有 <code>printf</code> </p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fcntl.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>errmsg <span class="token operator">=</span> <span class="token string">"sleep: missing operand\n"</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> errmsg<span class="token punctuation">,</span> <span class="token function">strlen</span><span class="token punctuation">(</span>errmsg<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">sleep</span><span class="token punctuation">(</span><span class="token function">atoi</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pingpong"><a href="#pingpong" class="headerlink" title="pingpong"></a><strong>pingpong</strong></h1><p>这题让我们接触一下管道的使用，难者不会，会者不难</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fcntl.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p_parent_sender<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> p_child_sender<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 子进程先读</span>        <span class="token function">read</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received ping\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">write</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 父进程先写</span>    <span class="token function">write</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">read</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> buf<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%d: received pong\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_parent_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">close</span><span class="token punctuation">(</span>p_child_sender<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="primes"><a href="#primes" class="headerlink" title="primes"></a>primes</h1><p>这题很有趣，是一个并发素数筛法。这个算法理论上是可以提高效率的，毕竟在运行了一段时间后，各个进程里都有一些数等待筛选，这时各个进程在同时用自己的素数筛选输入的数。</p><p><img src="/images/learning/open-course/MIT-6.S081/labs/lab1-util/prime-concurrent.png" alt=""></p><p>网上很多代码都是2020版的，当时的要求是找出 2-35 间的素数。这些代码能过老版本的要求，但过不了2024版要求的 2-280。我认真看了一两份代码，发现它们在用 fork 创建子进程的子进程后，忘了关闭子子进程的连接到父进程的描述符。可以看下面示意图的第三个框，这些代码忘了关闭 child child process 的 fd_read.</p><p>我画了示意图来解释我的代码~</p><p><img src="/images/learning/open-course/MIT-6.S081/labs/lab1-util/prime-code.png" alt=""></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">const</span> <span class="token keyword">int</span> NUM <span class="token operator">=</span> <span class="token number">280</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">do_child</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">do_child</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">int</span> n<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>n <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span> n <span class="token operator">&lt;=</span> NUM<span class="token punctuation">;</span> n<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 创建子进程. 父进程的 fd 和子进程的 fd 会被分别设置为一个 pipe 的两端. * 对父进程, fd 被设置为写端. * 对子进程, fd 被设置为读端. * * return 0 if is child else child's pid */</span><span class="token keyword">int</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token keyword">int</span> <span class="token operator">*</span>fd<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> p<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token function">pipe</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> pid<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// child</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>fd <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// parent</span>        <span class="token function">close</span><span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>fd <span class="token operator">=</span> p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> pid<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 从 fd_read 中读取数字, 打印第一个数, * 筛选其他数并新建子进程把被筛选后的数写入子进程. 在运行完成后关闭 fd_read. */</span><span class="token keyword">void</span> <span class="token function">do_child</span><span class="token punctuation">(</span><span class="token keyword">int</span> fd_read<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> n <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> prime <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd_read<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>prime <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            prime <span class="token operator">=</span> n<span class="token punctuation">;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"prime %d\n"</span><span class="token punctuation">,</span> prime<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">%</span> prime<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">&amp;&amp;</span> <span class="token function">connected_fork</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>fd<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// fd == -1 等价于没有子进程</span>                <span class="token comment">// 如果没有子进程就创建子进程并让它开始工作</span>                <span class="token function">close</span><span class="token punctuation">(</span>fd_read<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token function">do_child</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">return</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">write</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>n<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd_read<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// fd == -1 等价于没有子进程, 说明它是最后一个进程</span>    <span class="token comment">// 最后一个进程不需要关闭描述符, 也不需要等待</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 个人认为关闭 fd_read 不应该是 do_child 的工作, 我觉得"谁创建, * 谁关闭"会更合适. 也就是说, 我觉得让调用 do_child 的函数关闭 fd_read * 更合适. * * 但如果 do_child 不关闭 fd_read, 子孙进程就会保留父进程未关闭的描述符, * 从而耗尽 xv6 的资源. */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="find"><a href="#find" class="headerlink" title="find"></a>find</h1><p>在 <code>ls.c</code> 的基础上稍微改改就好了，要注意的是递归时不要递归进 “.” 和 “..” 两个文件夹</p><p>我们实现的 <code>find &lt;path&gt; &lt;name&gt;</code> 的功能和 Linux 里的 <code>find &lt;path&gt; -name &lt;name&gt;</code> 一致</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/stat.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fs.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/fcntl.h"</span></span><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">!=</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"usage: find &lt;path> &lt;filename>\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">find</span><span class="token punctuation">(</span>argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> argv<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 在以 path 为根节点的文件树下搜索名为 name 的文件, * 如果找到则打印其路径. */</span><span class="token keyword">void</span> <span class="token function">find</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>name<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> fd<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span>path<span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"find: cannot open %s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">struct</span> <span class="token class-name">stat</span> st<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fstat</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"find: cannot stat %s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strcmp</span><span class="token punctuation">(</span><span class="token function">basename</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">,</span> name<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s\n"</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 只有文件夹有递归的必要</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>st<span class="token punctuation">.</span>type <span class="token operator">!=</span> T_DIR<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">struct</span> <span class="token class-name">dirent</span> de<span class="token punctuation">;</span>    <span class="token comment">// 第一个 +1 对应 '/', 第二个 +1 对应结尾的 '\0'</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">+</span> DIRSIZ <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">></span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ls: path too long\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">strcpy</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">;</span>    p <span class="token operator">=</span> buf <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>buf<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">*</span>p<span class="token operator">++</span> <span class="token operator">=</span> <span class="token char">'/'</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> <span class="token operator">&amp;</span>de<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>de<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>de<span class="token punctuation">.</span>inum <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span> <span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">"."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token operator">||</span>            <span class="token function">strcmp</span><span class="token punctuation">(</span>de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> <span class="token string">".."</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token function">memmove</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> de<span class="token punctuation">.</span>name<span class="token punctuation">,</span> DIRSIZ<span class="token punctuation">)</span><span class="token punctuation">;</span>        p<span class="token punctuation">[</span>DIRSIZ<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">stat</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> <span class="token operator">&amp;</span>st<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"ls: cannot stat %s\n"</span><span class="token punctuation">,</span> buf<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">continue</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token function">find</span><span class="token punctuation">(</span>buf<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token comment">/* * 获取路径 path 的最后一部分 */</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token function">basename</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>path<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>p<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> path <span class="token operator">+</span> <span class="token function">strlen</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">;</span> p <span class="token operator">>=</span> path <span class="token operator">&amp;&amp;</span> <span class="token operator">*</span>p <span class="token operator">!=</span> <span class="token char">'/'</span><span class="token punctuation">;</span> <span class="token operator">--</span>p<span class="token punctuation">)</span>        <span class="token punctuation">;</span>    <span class="token operator">++</span>p<span class="token punctuation">;</span>    <span class="token keyword">return</span> p<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="xargs"><a href="#xargs" class="headerlink" title="xargs"></a><strong>xargs</strong></h1><p>xargs 将标准输入（stdin）数据转换成命令行参数，一般和管道一起使用。在 linux 中，xargs 默认的命令是 echo.</p><p>上面的解释可能不太清晰，通过两个例子就能看出来它在做什么了：</p><p>第一个例子是直接使用 xargs</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token builtin class-name">echo</span> Im prefix<span class="token number">111</span>Im prefix <span class="token number">111</span><span class="token number">222</span>Im prefix <span class="token number">222</span>（按 ctrl+D 终止输入<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>第二个例子是和管道联用</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token punctuation">(</span>echo <span class="token number">1</span> <span class="token punctuation">;</span> <span class="token builtin class-name">echo</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token function">xargs</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token builtin class-name">echo</span><span class="token number">1</span><span class="token number">2</span>$<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>我们实现的 <code>xargs &lt;command&gt;</code> 的功能和 Linux 里的 <code>xargs -n 1 &lt;command&gt;</code> 一致</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/types.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"kernel/param.h"</span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"user/user.h"</span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>argc <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">fprintf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"usage: xargs command\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cmd <span class="token operator">=</span> argv<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> <span class="token operator">*</span>cmdargs<span class="token punctuation">[</span>MAXARG<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> cmdargc <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 在更改 cmdargc 前, 最好检查 cmdargc &lt; MAXARG,</span>                     <span class="token comment">// 不过为了简化代码, 我们就不检查了</span>    <span class="token comment">// argv[0] 是 'xargs', argv[1] 是 command, 之后是参数</span>    <span class="token comment">// cmdargs 应当形如 [command, arg1, arg2, ..., addition_arg1, ...]</span>    cmdargc <span class="token operator">=</span> argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> cmdargc<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        cmdargs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> argv<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">char</span> buf<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// 输入行</span>    <span class="token keyword">char</span> <span class="token operator">*</span>p <span class="token operator">=</span> buf<span class="token punctuation">;</span> <span class="token comment">// 输入行的末尾</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token function">read</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> p<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token char">'\n'</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token char">'\0'</span><span class="token punctuation">;</span>            cmdargs<span class="token punctuation">[</span>cmdargc<span class="token punctuation">]</span> <span class="token operator">=</span> buf<span class="token punctuation">;</span>            <span class="token operator">++</span>cmdargc<span class="token punctuation">;</span>            cmdargs<span class="token punctuation">[</span>cmdargc<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>            <span class="token operator">++</span>cmdargc<span class="token punctuation">;</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token function">exec</span><span class="token punctuation">(</span>cmd<span class="token punctuation">,</span> cmdargs<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token function">wait</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token comment">// 重置</span>            p <span class="token operator">=</span> buf<span class="token punctuation">;</span>            cmdargc <span class="token operator">=</span> argc <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>            <span class="token operator">++</span>p<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 80%;
}
&lt;/style&gt;

&lt;p&gt;在开始 lab 之前，我们先来解释一下为什么我们写的代码能直接在 xv6 的 shell 里执行。我们来看看 &lt;code&gt;sh.c&lt;/code&gt; 的部分代码：&lt;/p&gt;
&lt;pre class=&quot;</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    <category term="Labs" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/Labs/"/>
    
    
  </entry>
  
  <entry>
    <title>慢慢地冲浪</title>
    <link href="http://rinevard.github.io/wiki/others/thoughts/%E7%BD%91%E4%B8%8A%E5%86%B2%E6%B5%AA/"/>
    <id>http://rinevard.github.io/wiki/others/thoughts/%E7%BD%91%E4%B8%8A%E5%86%B2%E6%B5%AA/</id>
    <published>2025-05-28T03:50:11.000Z</published>
    <updated>2025-08-19T07:08:07.564Z</updated>
    
    <content type="html"><![CDATA[<p>在互联网上冲浪时，偶尔会看到一些博客，若是它们帮到了我，我经常也会点进主页看看作者都写了怎样的文章，都有怎样的故事。</p><p>很多人的网站里全是技术文章，我对这样的网站确实没什么兴致。我更喜欢杂谈类的文章，那种像是在夜深人静时，独自一人在电脑前慢慢写下的文章。读这样独处时写下的文章，总让我觉得自己和作者的灵魂更近了一点。</p><p>在互联网上随机漫游，对着完全不认识自己的人产生单箭头，如果运气好的话说不定会是双箭头，真的非常有趣。我可能还是喜欢慢一点的故事，喜欢有着很长很长回复的贴子，喜欢把自己遇见的趣事分享到网上的视频，喜欢随意的、真诚的文章。它们只是被放在那里，等着十年后被另一个人偶然发现，那是痕迹。</p><style>/* 隐藏草书 */.hidden-text {    font-size: 18px;    text-align: center;    margin: 20px 0;    /* padding: 20px; */    line-height: 1.5;    color: transparent;    cursor: default}.hidden-fancy-text::selection {    color: black;    background: white;}</style><div class="hidden-text">就像这里的痕迹。</div>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;在互联网上冲浪时，偶尔会看到一些博客，若是它们帮到了我，我经常也会点进主页看看作者都写了怎样的文章，都有怎样的故事。&lt;/p&gt;
&lt;p&gt;很多人的网站里全是技术文章，我对这样的网站确实没什么兴致。我更喜欢杂谈类的文章，那种像是在夜深人静时，独自一人在电脑前慢慢写下的文章。读这样独</summary>
      
    
    
    
    <category term="杂谈" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/"/>
    
    <category term="碎碎念" scheme="http://rinevard.github.io/categories/%E6%9D%82%E8%B0%88/%E7%A2%8E%E7%A2%8E%E5%BF%B5/"/>
    
    
  </entry>
  
  <entry>
    <title>在开始之前</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/BeforeStory/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/MIT-6.S081/BeforeStory/</id>
    <published>2025-05-27T07:20:38.000Z</published>
    <updated>2025-07-18T09:05:23.420Z</updated>
    
    <content type="html"><![CDATA[<p>最近发现了 <a href="https://arthals.ink/">Arthal</a> 的笔记，感觉写得非常精美！回头看看自己对 15213 labs 的笔记，感觉写得确实太粗糙了，希望我的 6.S081 的笔记也能写得详细一些。</p><p>咳咳，我知道我还没写 15213 的 proxylab，不过我感觉csapp网络那一章写得有点含糊，所以晚点再做吧。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;p&gt;最近发现了 &lt;a href=&quot;https://arthals.ink/&quot;&gt;Arthal&lt;/a&gt; 的笔记，感觉写得非常精美！回头看看自己对 15213 labs 的笔记，感觉写得确实太粗糙了，希望我的 6.S081 的笔记也能写得详细一些。&lt;/p&gt;
&lt;p&gt;咳咳，我知道我还没写</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="MIT-6.S081" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/MIT-6-S081/"/>
    
    
  </entry>
  
  <entry>
    <title>第九章——虚拟内存</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter9-virtual-memory/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter9-virtual-memory/</id>
    <published>2025-05-13T14:10:28.000Z</published>
    <updated>2025-08-20T11:13:48.870Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 80%;}</style><h1 id="重走虚拟路"><a href="#重走虚拟路" class="headerlink" title="重走虚拟路"></a>重走虚拟路</h1><p>让我们尝试重新发明一遍虚拟内存。</p><h2 id="使用虚拟地址的原因"><a href="#使用虚拟地址的原因" class="headerlink" title="使用虚拟地址的原因"></a>使用虚拟地址的原因</h2><p>想象一下我们只能用物理地址来写程序，我们写出了下面的东西：</p><pre class="line-numbers language-nasm" data-language="nasm"><code class="language-nasm"><span class="token comment">; 假设目标机器是Intel 8080，内存地址为物理地址</span>ORG <span class="token number">0x0100</span>      <span class="token comment">; 程序起始地址，直接指定物理地址0x0100</span>MVI A, <span class="token number">0x05</span>     <span class="token comment">; 将立即数0x05加载到寄存器A</span>STA <span class="token number">0x0200</span>      <span class="token comment">; 将寄存器A的值存储到物理内存地址0x0200</span>HLT             <span class="token comment">; 停止程序</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这东西的可移植性显然很差！所以我们发明了“虚拟地址”。这样程序就能直接使用虚拟地址，而在程序执行时，虚拟地址被操作系统的<strong>MMU</strong>（Memory Management Unit）实时翻译成物理地址。</p><h2 id="虚拟地址到物理地址的映射"><a href="#虚拟地址到物理地址的映射" class="headerlink" title="虚拟地址到物理地址的映射"></a>虚拟地址到物理地址的映射</h2><p>这么看来，我们可以把 MMU 当作一个从虚拟地址空间到物理地址空间的映射，那我们自然要用一个数据结构来存储映射。</p><p>但怎么组织这个数据结构呢？用一个数组，然后每个虚拟地址对应一个物理地址？假设我们有 $M$ 个虚拟地址，我们就存一个长度为 $M$ 的数组？这样的话，这个数组就太大了。假设我们有 $k$ 个进程，按这个想法，我们就需要至少 $k\times M \times \text{sizeof(char *)}$ 大小的内存来存储这个数据结构。</p><p>我们选择把 $N$ 个连续的虚拟地址当作一个虚拟页，同时把 $N$ 个连续的物理地址当作一个物理页，这样对每个进程，我们就只要做物理页之间的映射，存储 $\frac{M}{N}$ 个项就好了。考虑到程序的局部性， 我们的这种选择是合理的。这样的一个数据结构就叫做一个<strong>页表</strong>。</p><p>在下图的<strong>单级页表</strong>中，每一项都带有一个有效位（用于标记这个虚拟页对应的物理页是否在 DRAM 中）和对应物理页的开头物理地址（如果没有对应物理页，为 null）。</p><p>把虚拟地址翻译成物理地址的大致思路是根据虚拟地址找到页表中对应的项，从而找到对应的物理页，然后根据虚拟地址的最后几位确定具体的物理地址。（还记得吗，一个页由很多地址组成）</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/singlelvelpagetable.png" alt=""></p><p>但这样的页表还是很大吧。我们总在进程被创建时就为他们分配了一个超大的页表，而实际上绝大多数程序都根本用不到那么多虚拟地址。所以，我们能不能动态地改变页表的大小，比如说，在程序请求某个虚拟地址，但它不在页表中时，再去增大页表？</p><p>所以我们进一步把页表分成多级，在需要的时候再去新增 level 较高的页表。</p><p>在这样的<strong>多级页表</strong>中，只有 level 最高的页表存储对应页的开头物理地址，而其他 level 的页表存储下一个级别的页表的开始地址。我们会在下一节详细讲解它的翻译过程。</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/twolevelpagetable.png" alt=""></p><p>让我们总结一下，每个进程有自己的页表，在切换到某个进程时，操作系统会更新存储着页表地址的寄存器（在 RISC-Ⅴ 中是 satp 寄存器）。当进程需要访问某个虚拟地址时，MMU 会把虚拟地址翻译成物理地址，然后访问物理地址。</p><p>要特别强调的是，每个 level 可以有多个页表，我们可以把多级页表看作树状结构！</p><h2 id="虚拟地址的翻译"><a href="#虚拟地址的翻译" class="headerlink" title="虚拟地址的翻译"></a>虚拟地址的翻译</h2><p>我们已经知道了虚拟内存大致是怎样的了。那么 MMU 具体是怎么把虚拟地址翻译成物理地址的呢？我们这里讨论多级页表。</p><p>在多级页表中，只有 level 最高的页表存储对应页的开头物理地址，而其他 level 的页表存储下一个级别的页表的开始地址。</p><p>虚拟地址的前几位在翻译过程中会起到“页表索引”的作用，当我们到达了某个 level 的页表，我们会用它来确定我们具体需要这个页表的哪个项。而虚拟地址的最后几位是一个 offset，还记得吗，一个虚拟页和一个物理页对应，所以在找到了对应的物理页的开头地址后，我们要根据 offset 得到真正对应的物理地址。</p><p>VPN 是 virtual page number，VPO 是 virtual page offset，PTE 是 page table entry</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/translation.png" alt=""></p><p>我魔改了一下上图，希望这能让“每个 level 有多个页表”这件事显得更清晰。</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/virtual2physic.png" alt=""></p><h2 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h2><p>看起来多级页表在存储方面优化得不错，但速度呢？既然每个页表都放在不同的地址，那它不是要求多次访问不同地址吗？正是如此，所以我们用 TLB（Translation Lookaside Buffer）来缓存最近使用的页表项，来加快地址翻译。</p><h1 id="动态内存分配"><a href="#动态内存分配" class="headerlink" title="动态内存分配"></a>动态内存分配</h1><p>当我们调用 malloc 和 free 时究竟发生了什么？在做完 malloclab 以后，我们对此已经有了比较清晰的理解。</p><h2 id="malloc"><a href="#malloc" class="headerlink" title="malloc"></a>malloc</h2><p>调用 malloc 时，我们在寻找足够大的空闲内存块来提供给用户，如果不够大就扩容。在“寻找”的过程中，我们有很多种策略可以选，这就是 placement policy，包括但不限于 first fit、next fit、best fit.</p><p>而在找到空闲块以后，有时空闲块可能比用户的需求大很多，这时就要想想要不要切割空闲块，这就是 splitting policy。</p><h2 id="free"><a href="#free" class="headerlink" title="free"></a>free</h2><p>调用 free 时，我们简单地把一个已分配内存块标记为空闲。但空闲之后又要决定是否把它和相邻的空闲块合并，这就是 coalescing policy。</p><h2 id="块的结构"><a href="#块的结构" class="headerlink" title="块的结构"></a>块的结构</h2><p>之前提到，malloc 是在找空闲块，但什么是“块”呢？块的数据结构也有很多种可以选，不过一般来说，每个块都至少会有 size 和 is_alloc 标记。</p><p>举个例子，使用显式链表策略时，我们的堆大概长这样：</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter9/heap.svg" alt=""></p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 80%;
}
&lt;/style&gt;

&lt;h1 id=&quot;重走虚拟路&quot;&gt;&lt;a href=&quot;#重走虚拟路&quot; class=&quot;headerlink&quot; title=&quot;重走虚拟路&quot;&gt;&lt;/a&gt;重走虚拟路&lt;/h1&gt;&lt;p&gt;让我们尝试重新发明一遍虚拟内存。&lt;</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="CMU-15-213" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Malloclab和我不得不说的那些事</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Labs/Malloclab/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Labs/Malloclab/</id>
    <published>2025-05-12T11:28:38.000Z</published>
    <updated>2025-07-20T10:04:20.287Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>malloclab 的难度很大，我实现了书上的基础的隐式空闲链表和显式空闲链表，用时约 16 小时，得分如下：</p><pre class="line-numbers language-none"><code class="language-none">Perf index &#x3D; 47 (util) + 40 (thru) &#x3D; 87&#x2F;100<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>实现的逻辑本身是简单的，难度最大的地方在于调试，所以我并没有进一步实现分离的空闲链表，因为调试起来实在是太麻烦了。算是体验了一下系统级编程的复杂性。</p><p>有趣的是，由于 fail fast 的编程习惯，我喜欢在代码里到处放 assert 和 print 语句，这帮我节省了不少调试时间，我甚至一次 gdb 都没用就把所有的 bug 都修完了。（话说回来我也不知道这种东西怎么用 gdb 调试）</p><p>本文会谈谈做这个 lab 时学到的一些编程技巧，不会太多谈 lab 本身，因为照着书上实现出来就好了。</p><h1 id="宏编程"><a href="#宏编程" class="headerlink" title="宏编程"></a>宏编程</h1><p>宏编程最需要关注的地方就是到处都要加括号。让我们以下面这行代码为例：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name function">GET</span><span class="token expression"><span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span> <span class="token punctuation">)</span>p<span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>像这种就是有问题的，因为没给 p 加括号！比如说，GET((char *)bp - WSIZE) 的原本意图是让 bp 减去 WSIZE，但放到 GET 里就导致 bp 先被转换成 unsigned int 指针，再减去 WSIZE，从而让 bp 减去了 WSIZE * sizeof(unsigned int)！</p><h1 id="validation-check"><a href="#validation-check" class="headerlink" title="validation_check"></a>validation_check</h1><p>这个 lab 可以看作在创建一个神奇的类，我们总会对类有一些 validation 要求（比如说在这个 lab 中，我们要求内存里不能有连续的空闲块），这时我们就可以写一个 validation_check 函数，它会检查这个类是否满足我们的 validation 要求。</p><p>那这个 validation_check 有什么用呢？在调试的时候，我们可以把它插入到各种地方，然后看它在哪里 fail，这能帮助我们更快定位 bug。一个小技巧是用二分的思路来插入 validation_check。</p><h1 id="其他小技巧"><a href="#其他小技巧" class="headerlink" title="其他小技巧"></a>其他小技巧</h1><p>写这个 lab 的时候用到了很多 6.102 的知识，果然软工知识超有用~比如说，写一个简练清晰的 specification 很有帮助，fail fast 特别有用。</p><p>还注意到了一个有趣的地方，<code>size_t</code> 在我的系统上是这样显示的：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">typedef</span> <span class="token keyword">unsigned</span> <span class="token keyword">long</span> <span class="token class-name">size_t</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>据 claude 说，<code>size_t</code> 的具体定义取决于系统架构，这可能是为了可移植性考虑？</p><p>除此之外，我觉得还有一个重要的作用，就是给类型提供“别名”。有时我们希望类型有一个更具描述性的名称，而不只是“int”。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;malloclab 的难度很大，我实现了书上的基础的隐式空闲链表和显式空闲链表，用时约 16 小时，得分如下：&lt;/p&gt;
&lt;p</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="CMU-15-213" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/"/>
    
    <category term="Labs" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/Labs/"/>
    
    
  </entry>
  
  <entry>
    <title>Ludum Dare参加指南</title>
    <link href="http://rinevard.github.io/wiki/game-design/ldjam%E5%8F%82%E8%B5%9B%E6%8C%87%E5%8D%97/"/>
    <id>http://rinevard.github.io/wiki/game-design/ldjam%E5%8F%82%E8%B5%9B%E6%8C%87%E5%8D%97/</id>
    <published>2025-04-13T01:36:38.000Z</published>
    <updated>2025-07-20T09:55:53.012Z</updated>
    
    <content type="html"><![CDATA[<h1 id="零、在文章开始之前"><a href="#零、在文章开始之前" class="headerlink" title="零、在文章开始之前"></a>零、在文章开始之前</h1><p>本文包含了对 Ludum Dare 的介绍、参与流程及个人看法。写作的契机是参与 Ludum Dare 后体验很好，但在中文互联网上没有找到很全面的介绍资料，只找到了 <a href="https://zhuanlan.zhihu.com/p/20337558">规则介绍</a>。在规则介绍之外，我希望聊聊 Ludum Dare 的体验为什么好（比起我参加过的其他 gamejam），并按时间线介绍一下参与流程。</p><h1 id="一、什么是-Ludum-Dare"><a href="#一、什么是-Ludum-Dare" class="headerlink" title="一、什么是 Ludum Dare"></a>一、什么是 Ludum Dare</h1><p>官网写到，”Ludum Dare is an event where you create a game from scratch in a weekend based on a theme.”（出自 <a href="https://ludumdare.com/resources/archive/rules-2017/">rules</a>），即“Ludum Dare 是一个围绕某个主题在一个周末从零开始做出一个游戏的活动。”更具体一点，Ludum Dare 主要分为两个赛道，分别是单人 48 小时做一个游戏和组队 72 小时做一个游戏。</p><p>这时候有经验的读者就会问了，这不就是 gamejam 吗？正是如此！Ludum Dare 是非常早期的 gamejam，它自 2002 年开始举办，每年举办两次，到今天已经办了 57 届。每届 Ludum Dare 都会吸引全球数以万计的开发者，如 2021 年的 49 届收到了近 3000 款游戏提交， 2023 年的第 52 届收到了 1632 款游戏提交（<a href="https://github.blog/open-source/gaming/a-peek-inside-some-of-the-top-games-from-ludum-dare-49/">数据来源</a>）。在这大量的提交游戏中，也有许多精品作品从此发源，比如邪恶铭刻（inscryption）的原型 <a href="https://ldjam.com/events/ludum-dare/43/sacrifices-must-be-made-2">Sacrifices Must Be Made</a> 就于 Ludum Dare 43 制作。</p><h1 id="二、为什么参加-Ludum-Dare"><a href="#二、为什么参加-Ludum-Dare" class="headerlink" title="二、为什么参加 Ludum Dare"></a>二、为什么参加 Ludum Dare</h1><p>中国有那么多本土的 gamejam，那为什么要顶着语言障碍参加 Ludum Dare 呢？我认为最重要的两点是游戏质量高、收获反馈多。</p><p>先说前者，gamejam 总是有竞赛性质的，在 Ludum Dare 里我们要和全世界的优秀开发者竞争，单是看着这些开发者围绕主题的奇思妙想就已经让人觉得值回票价了（并没有票价，这是免费活动），而如果取得了好排名则更是会给人相当的成就感。</p><p>再说后者，介于 Ludum Dare 的算法，每个游戏基本都会获得 20 个以上的评分，而且你玩的游戏越多，Ludum Dare 就会把你的游戏放在推荐榜越靠前的位置，从而就会有越多人玩你的游戏。以我的经验来看，玩的游戏数量和收获的评分数量基本接近，而且很多玩了我们游戏的开发者会在游戏下给出评论来反馈，非常利于我们了解自己游戏的优秀之处（可惜的是评论一般不说缺点，以夸夸居多）。</p><p>下面再举几个 Ludum Dare 的其他优势：</p><ul><li>足不出户：与线下 gamejam 不同，参加 Ludum Dare 无需报名，只要注册账号并在提交时间截止前提交游戏即可。</li><li>玩游戏方便：大部分开发者都会提供游戏的 web 版本，即使不提供 web 版本也可以直接在对应的游戏页面下载游戏。</li><li>交流机会：我们可以给别的游戏提供反馈，也可以在别的游戏评论区里询问开发者的设计思路，一般都会收到积极的回复。</li><li>和大神合影：每届的 Ludum Dare 都会有一些大神来参加，如果恰巧碰上了自己感兴趣的大神，就有了在他们的游戏评论区夸夸的合影机会！</li></ul><h1 id="三、参与流程"><a href="#三、参与流程" class="headerlink" title="三、参与流程"></a>三、参与流程</h1><p>Ludum Dare 的流程大概是主题投票、制作、评分与反馈、结果公布。为了顺利参赛，首先我们要在 Ludum Dare 上注册一个账号。注册账号需要邀请码，我们可以在 Google 上用 ludum dare invitation code 之类的关键词或者在<a href="https://ldjam.com/users/pov/feed">举办者的主页</a>上找到邀请码。我找到的第 57 届的邀请码有 Time4LD57 和 BirdSiteLD57。</p><p>在注册成功之后，我们要想想这次是单人参赛还是组队参赛。Ludum Dare 有三条赛道，Compo、Jam 和 Extra.</p><p>Compo 是经典模式，要求单人 48 小时内做游戏，所有内容包括美术、音效等都需要在 48 小时内从零开始做出，而且必须开源源代码。我们可以使用任何已经写过的基础代码和任何工具。如果你的游戏收到了 20 个以上的评分，会得到最终评分。</p><p>Jam 相对宽松，只要求组队 72 小时内做游戏，可以使用任何已经写过的基础代码，也允许使用部分预制素材。若美术或音效非原创，需要在提交时关闭对应类别的打分。比如如果我们用了第三方美术，就要在提交时关闭 Graphics 的打分。如果你的游戏收到了 20 个以上的评分，会得到最终评分。</p><p>Extra 则是轻松组，时间宽裕至 3 周，单人或团队均可，内容以原创为主但允许预制素材，美术或音效非原创可退出对应评分类别，源代码提交可选，但无最终排名。</p><p>赛道在提交时才需要确定，所以如果你原本打算参加 Compo，但没来得及赶上 Compo 的截止提交时间，也可以转去 Jam 的提交。</p><p>想好了赛道后，就能进入之后的环节了。</p><h2 id="主题投票"><a href="#主题投票" class="headerlink" title="主题投票"></a>主题投票</h2><p>官方会提供大量的主题（第 57 届有 1000 多个），经过初选轮、复选轮、决赛轮，最终得出一个结果主题。我们当然不必给每个主题都投票，我的个人建议是在决赛轮投一下就行。而且即使不投票也是能参赛的！参赛的唯一要求就是在提交时间截止前提交作品。</p><p>是否围绕主题做游戏也是可选的，主题只是最终评分中的一部分，Ludum Dare 的宗旨是鼓励开发者把游戏做出来。</p><h2 id="制作阶段"><a href="#制作阶段" class="headerlink" title="制作阶段"></a>制作阶段</h2><p>进入制作阶段后，我们就可以开始做游戏了！点击右上角的 join event，就能创建游戏草稿页。我们会在上传阶段填充这个草稿页。</p><p><img src="/images/game-design/gamejam/ldjam参赛指南/ldjam-joinevent.png" alt=""></p><p>制作游戏需要大家各显神通，我简单谈谈个人建议吧。</p><ul><li>设计<br>一般来说，我们要快速地找到多个想法，然后选择自己觉得最有前途的想法做下去。由于制作时间很紧，我们注定不能做大做全。比起大而全，小而美是更好的选择。一个只有三关的认真打磨过的作品比一个有十关的每关都很粗糙的作品要好得多。</li><li>程序<br>尽管 Ludum Dare 允许设计桌游乃至更不被定义的游戏（我见过一个翻文件夹的游戏），但我们这里只讨论电子游戏。程序方面，选用自己最熟悉的工具即可。有熟练的游戏引擎就选游戏引擎，喜欢不用引擎开发就不用引擎开发。</li><li>音乐<br>我是音乐萌新，虽然听说过 FL studio 之类的工作站，但我现在还没学会。所以我这里推荐一个简单的音乐制作网站——<a href="https://musiclab.chromeexperiments.com/">Musiclab</a>，我使用里面的<a href="https://musiclab.chromeexperiments.com/Song-Maker">SongMaker</a>做出了能听的东西。</li><li>音效<br><a href="https://sfxr.me/">sfxr</a>是很简单的音效制作网站，我看不懂参数，所以我的工作流是把我想要的效果告诉 AI，AI 告诉我怎么调参，效果出乎意料地还算不错。</li><li>美术<br>我用<a href="https://www.piskelapp.com/">Piskel</a>画简单的像素画，偶尔也用<a href="https://krita.org/">Krita</a>来画别的东西。</li></ul><p>抛开 Extra 赛道不谈，这个阶段持续 48 小时或 72 小时，我最后的建议是在参与的同时保持充足的睡眠，好好睡觉好好吃饭很重要！</p><h2 id="上传阶段"><a href="#上传阶段" class="headerlink" title="上传阶段"></a>上传阶段</h2><p>在制作阶段结束后，会给<strong>额外的一小时</strong>来上传。尽管官网给了额外一小时的上传时间，我还是建议大家在制作阶段的末尾就开始研究怎么上传游戏，以防万一嘛。</p><p>我们可以在这段时间里填充右上角 My Game 的草稿页，按着页面要求填写即可。</p><p><img src="/images/game-design/gamejam/ldjam参赛指南/mygame.png" alt=""></p><p>我们可以把游戏压缩包上传到页面上，同时 Ludum Dare 支持 Embed HTML5，也就是说我们可以根据<a href="https://ludumdare.com/resources/guides/embedding/">Embedding Guide</a>直接把游戏的网页版上传到官网的游戏页面上。建议大家同时把网页版上传到 itch 上，毕竟官网的网页版游戏支持做得不算很完美。</p><p>记得退出自己不符合/不想要的打分选项。</p><p><img src="/images/game-design/gamejam/ldjam参赛指南/opt.png" alt=""></p><h2 id="评分阶段"><a href="#评分阶段" class="headerlink" title="评分阶段"></a>评分阶段</h2><p>至此，恭喜你做出了自己的游戏！</p><p>评分阶段持续三周，在评分阶段，我们可以试玩别人的游戏并打分，你打分的游戏越多，推荐算法给你的游戏的推荐优先级就越高。同时高质量评论也能提高你游戏的推荐优先级。</p><p>评分阶段允许继续编辑页面，比如如果你发现游戏页面的描述有问题，随时可以进行修改。修游戏内的 bug 也是被允许的，但要求在修 bug 以后显式地在游戏页面标出自己做的修改（写一个简要的 devlog），而且不能增加新功能。</p><p><img src="/images/game-design/gamejam/ldjam参赛指南/scores.png" alt=""></p><h2 id="结果公布"><a href="#结果公布" class="headerlink" title="结果公布"></a>结果公布</h2><p>游戏会根据打分来排名。没有奖品，你的游戏就是最好的奖品！</p><h1 id="四、其他资料"><a href="#四、其他资料" class="headerlink" title="四、其他资料"></a>四、其他资料</h1><p>可以在<a href="https://ludumdare.com/resources/archive/rules-2017/">rules</a>页面找到详细的参加规则，<strong>强烈建议在参加前阅读</strong>。</p><p>可以在这篇<a href="https://zhuanlan.zhihu.com/p/20337558">规则介绍</a>找到中文的规则介绍，但不如上面那个全面。</p><p>本文的结构参考了 <a href="https://zhuanlan.zhihu.com/p/27330699">Google 编程之夏(GSoC)：海量优质项目，丰厚报酬，你竟然还不知道？</a></p>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;零、在文章开始之前&quot;&gt;&lt;a href=&quot;#零、在文章开始之前&quot; class=&quot;headerlink&quot; title=&quot;零、在文章开始之前&quot;&gt;&lt;/a&gt;零、在文章开始之前&lt;/h1&gt;&lt;p&gt;本文包含了对 Ludum Dare 的介绍、参与流程及个人看法。写作的契机是参与 L</summary>
      
    
    
    
    <category term="gamejam" scheme="http://rinevard.github.io/categories/gamejam/"/>
    
    
  </entry>
  
  <entry>
    <title>第十章——系统级I/O</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter10-system-io/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter10-system-io/</id>
    <published>2025-04-11T02:00:00.000Z</published>
    <updated>2025-08-20T11:13:48.877Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 75%;}</style><h1 id="文件"><a href="#文件" class="headerlink" title="文件"></a>文件</h1><p>所有的 I/O 设备都被视为文件，因此我们能用一致的方式处理各种输入输出。</p><p>文件类型分为以下几类</p><ul><li>普通文件：包含用户数据，可以是文本文件（如.txt）或二进制文件（如.jpg、.exe）</li><li>目录：包含一系列链接，每个连接将一个文件名映射到一个文件</li><li>套接字（socket）：跨网络通信用的文件</li></ul><h1 id="读写文件"><a href="#读写文件" class="headerlink" title="读写文件"></a>读写文件</h1><h2 id="文件描述符（file-descriptor）"><a href="#文件描述符（file-descriptor）" class="headerlink" title="文件描述符（file descriptor）"></a>文件描述符（file descriptor）</h2><p>文件描述符是一个非负整数，代表进程打开的文件的标识符。在进程中，每当打开一个文件时，操作系统会分配一个文件描述符给它。</p><p>默认情况下，0 表示标准输入（stdin），1 表示标准输出（stdout），2 表示标准错误（stderr）。通过系统调用（如 open）打开文件后，会返回一个新的文件描述符（如 3、4 等），具体值取决于当前进程中已使用的描述符情况。</p><p>以下是一个使用 <code>open</code> 系统调用的示例，展示如何打开一个文件并获取文件描述符：</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;fcntl.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token comment">// 打开文件 "example.txt"，以只读模式</span>    <span class="token keyword">int</span> fd <span class="token operator">=</span> <span class="token function">open</span><span class="token punctuation">(</span><span class="token string">"example.txt"</span><span class="token punctuation">,</span> O_RDONLY<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>fd <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"open failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"文件描述符: %d\\n"</span><span class="token punctuation">,</span> fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">// 使用文件描述符进行操作（如读取）</span>    <span class="token keyword">char</span> buffer<span class="token punctuation">[</span><span class="token number">100</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token class-name">ssize_t</span> bytes_read <span class="token operator">=</span> <span class="token function">read</span><span class="token punctuation">(</span>fd<span class="token punctuation">,</span> buffer<span class="token punctuation">,</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>buffer<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>bytes_read <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"read failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">// 关闭文件描述符</span>    <span class="token function">close</span><span class="token punctuation">(</span>fd<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="不足值（short-count）"><a href="#不足值（short-count）" class="headerlink" title="不足值（short count）"></a>不足值（short count）</h2><p>“不足值”是指在读写操作中，实际读取或写入的字节数少于请求的字节数。原因有遇到 EOF、从终端读文本行（如果读终端，read 一次只传输一个文本行）、读写网络套接字。</p><p>比如调用 read(fd, buffer, 100)请求读取 100 字节，但文件只剩 50 字节可用，则返回 50（不足值）。</p><p>我们需要检查返回值，确认实际读写字节数，并根据需要调整逻辑（如循环读取剩余数据）。</p><h2 id="描述符表、文件表、v-node-表"><a href="#描述符表、文件表、v-node-表" class="headerlink" title="描述符表、文件表、v-node 表"></a>描述符表、文件表、v-node 表</h2><p>操作系统在内核中维护了三层数据结构来管理文件：</p><ul><li><strong>描述符表</strong>：每个进程独有，记录该进程打开的所有文件描述符及其对应的文件表项。</li><li><strong>文件表</strong>：所有进程共享，表项包括偏移值、引用计数（即当前指向该表的描述符表项数）、指向 v-node 表中对应项的指针。关闭一个描述符会减少相应的文件表表项的引用计数，减到零会删除。</li><li><strong>v-node 表</strong>（或 inode 表）：与具体文件系统相关，记录文件的元数据（如文件大小、权限、存储位置）。每个文件在 v-node 表中有一个唯一条目。</li></ul><h3 id="调用-open-打开文件的具体过程"><a href="#调用-open-打开文件的具体过程" class="headerlink" title="调用 open 打开文件的具体过程"></a>调用 open 打开文件的具体过程</h3><p>当调用 <code>open</code> 系统调用打开一个文件时，操作系统会执行以下步骤：</p><ol><li><strong>验证和查找文件</strong>：<ul><li>内核检查文件路径、权限等，确定文件是否存在且进程有权访问。</li><li>找到文件对应的 v-node（或 inode），如果文件已在 v-node 表中，则复用，否则创建新条目。</li></ul></li><li><strong>分配文件表项</strong>：<ul><li>内核在文件表（file table）中创建一个新表项，记录文件的偏移量（初始为 0）、访问模式（如只读、读写）、引用计数（初始为 1）以及指向对应 v-node 的指针。</li></ul></li><li><strong>更新描述符表</strong>：<ul><li>内核在调用进程的描述符表（file descriptor table）中分配一个未使用的最小描述符编号（如 3，若 0、1、2 已占用）。</li><li>将该描述符指向新创建的文件表项。</li></ul></li><li><strong>返回文件描述符</strong>：<ul><li><code>open</code> 调用返回分配的文件描述符给进程，供后续操作（如 <code>read</code>、<code>write</code>）使用。</li></ul></li></ol><h3 id="open-两次："><a href="#open-两次：" class="headerlink" title="open 两次："></a><strong>open 两次：</strong></h3><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter10/opentwice.png" alt=""></p><h3 id="fork："><a href="#fork：" class="headerlink" title="fork："></a><strong>fork：</strong></h3><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter10/fork.png" alt=""></p><h1 id="基于缓冲区的读写"><a href="#基于缓冲区的读写" class="headerlink" title="基于缓冲区的读写"></a>基于缓冲区的读写</h1><p>基于缓冲区的读写将数据先写入内存缓冲区，等缓冲区满或显式刷新（如 fflush）时再一次性与底层设备做数据交换，降低了 I/O 开销。</p><p>在使用读写时，我们应尽可能使用 stdio 标准库。stdio（标准输入输出库）提供了基于缓冲区的 I/O 操作（如 fopen、fread、fwrite、printf 等），相比直接使用低级系统调用（如 read、write），它的<strong>效率更高</strong>而且更不易出错。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 75%;
}
&lt;/style&gt;

&lt;h1 id=&quot;文件&quot;&gt;&lt;a href=&quot;#文件&quot; class=&quot;headerlink&quot; title=&quot;文件&quot;&gt;&lt;/a&gt;文件&lt;/h1&gt;&lt;p&gt;所有的 I/O 设备都被视为文件，因此我们能用一致的方式处</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="CMU-15-213" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Shlab调试记录和一键测试脚本</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Labs/Shlab/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Labs/Shlab/</id>
    <published>2025-04-03T09:04:28.000Z</published>
    <updated>2025-04-03T09:15:49.780Z</updated>
    
    <content type="html"><![CDATA[<h1 id="写在前面"><a href="#写在前面" class="headerlink" title="写在前面"></a>写在前面</h1><p>用时 10h30min, 通过所有测试。这个 lab 还是比较直接的, 按着 trace 的顺序逐步实现即可, 难点主要在调试和不熟悉系统调用语法上。我在写代码的过程中遇到了两个调了蛮久的 bug, 分别在 trace13 和 trace16 上, 下面简要复盘一下。</p><h1 id="调试"><a href="#调试" class="headerlink" title="调试"></a>调试</h1><h2 id="trace16"><a href="#trace16" class="headerlink" title="trace16"></a>trace16</h2><p>先说 trace16 的 bug, 这个调了半小时。trace16 测试的是 shell 能否处理子进程被外部信号中断或停止的情况。我遇到的问题是 trace16 在 <code>./mystop</code> 那里卡住了, 于是猜测原因是 jobs 没能正确更新子进程的暂停状态。后面加了点调试语句发现果然如此。那么修复思路就是在子进程暂停后把它对应的 job 状态进行更新。但怎么知道子进程什么时候暂停呢？答案是 sigchld_handler.</p><p>我一开始以为 sigchld_handler 只会在某个子进程终止后被调用, 所以只在 sigchld_handler 里写了回收已经终止的子进程的逻辑。后来发现<strong>子进程只要状态发生变化就会发 SIGCHLD 信号给父进程, 子进程终止只是一种情况, 暂停、恢复也会发送这个信号</strong>。所以让 sigchld_handler 检查已经停止的子进程, 并更新它们对应的 jobs 状态就修复了这个 bug.</p><h2 id="trace13"><a href="#trace13" class="headerlink" title="trace13"></a>trace13</h2><p>然后是 trace13 的 bug, 这个调了两小时半。这里的问题是在 <code>fg %1</code> 卡住。第一个猜测自然是进程没能被正确移到前台, 但加了调试语句后发现它确实被移到前台了。之后的猜测就是 waitfg 的实现有误, 这个猜测看起来很合理, 毕竟 handout 里写 waitfg 大概需要 20 行, 而我只用了 4 行。但测了半天发现 waitfg 也没问题。</p><p>进一步加入各种调试语句, 发现在 fg %1 之后, 进程确实被顺利移到了前台, jobs 也正确更新了, waitfg 只是因为它没结束, 所以一直循环着等着它。好吧, 那我猜是 sigchld_handler 没能正确回收它。我检查了一下, 发现终止的进程也都被正确回收了。那还能是什么原因呢？难道它被暂停了, 但没有被正确启动, 导致我们的 shell 误以为这个暂停着的进程是前台进程, 从而卡住了？这听起来就像是一个并行导致的问题, 于是我又调试了好久, 最后发现它确实被正确启动了, 这个进程只是单纯地还没有终止而已。</p><p>那这怎么可能呢？凭什么它在 tshref 里几秒钟就执行完了, 在我的实现里五分钟了都没执行完？原来是我的“启动”写错了。我使用的是 <code>kill(job-&gt;pid, SIGCONT)</code>, <strong>这个代码只把启动信号发给了这一个子进程, 而不是发给它所在的进程组</strong>, 从而让这个子进程所在组的别的进程没有被正确启动。而看看 <code>mysplit.c</code> 的代码, 会发现它等待它的子进程执行完才会终止, 所以我们把代码改成 <code>kill(-job-&gt;pid, SIGCONT)</code> 就解决了这个 bug.</p><p>就因为这一个负号, 我调试了两个半小时, 而且我感觉我一路下来的各种猜想也都很合理, 只能感叹系统级代码真难调试啊。</p><h2 id="感想"><a href="#感想" class="headerlink" title="感想"></a>感想</h2><p>也算是学到了几招吧：</p><ol><li>在调用系统函数时一定要检查返回值, 不然会报一些很难调试的错误</li><li>在修改全局变量时一定要用 sigprocmask 拦截别的信号, 避免冲突</li><li>子进程只要状态发生变化就会发 SIGCHLD 信号给父进程, 终止、暂停、恢复都会发送这个信号</li><li>可以用 waitpid 来检查子进程的变化状态, 它会回收终止的子进程</li><li>只在信号处理程序中调用异步安全的函数</li><li>调试时大胆猜想, 小心求证</li></ol><h1 id="一键测试脚本"><a href="#一键测试脚本" class="headerlink" title="一键测试脚本"></a>一键测试脚本</h1><p>我让 AI 写了一份一键测试脚本, 比官方的形如 <code>make test13</code> 的测试方便不少。脚本的功能是在 traceA 到 traceB（要求 A &lt; B）上分别运行 tsh 和 tshref, 并把输出结果放到两个文件中。比如说, 如果我们输入 <code>./test_traces.sh 1 5</code>, 就能测试 <code>trace01.txt</code> 到 <code>trace05.txt</code>, 并将结果分别保存到 <code>_tshref_output.txt</code> 和 <code>_tsh_output.txt</code>。之后用各种编辑器自带的比较文件功能就能很方便的比较输出异同。</p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token shebang important">#!/bin/bash</span><span class="token comment"># 脚本名称：test_traces.sh</span><span class="token comment"># 显示用法</span><span class="token function-name function">usage</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin class-name">echo</span> <span class="token string">"用法: <span class="token variable">$0</span> lower upper"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  lower: 开始的 trace 文件编号 (1-16)"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  upper: 结束的 trace 文件编号 (1-16)"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"示例: <span class="token variable">$0</span> 1 5"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"  这将测试 trace01.txt 到 trace05.txt，并将输出分别保存到 _tshref_output.txt 和 _tsh_output.txt"</span><span class="token punctuation">&#125;</span><span class="token comment"># 检查是否提供了两个参数</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$#</span>"</span> <span class="token parameter variable">-ne</span> <span class="token number">2</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>    <span class="token builtin class-name">echo</span> <span class="token string">"错误: 请提供 lower 和 upper 两个参数"</span>    usage    <span class="token builtin class-name">exit</span> <span class="token number">1</span><span class="token keyword">fi</span><span class="token assign-left variable">lower</span><span class="token operator">=</span><span class="token variable">$1</span><span class="token assign-left variable">upper</span><span class="token operator">=</span><span class="token variable">$2</span><span class="token assign-left variable">ref_output_file</span><span class="token operator">=</span><span class="token string">"_tshref_output.txt"</span><span class="token assign-left variable">tsh_output_file</span><span class="token operator">=</span><span class="token string">"_tsh_output.txt"</span><span class="token comment"># 清空输出文件（如果已存在）</span><span class="token operator">></span> <span class="token string">"<span class="token variable">$ref_output_file</span>"</span><span class="token operator">></span> <span class="token string">"<span class="token variable">$tsh_output_file</span>"</span><span class="token comment"># 获取当前工作目录（模仿 make 的 Entering directory 格式）</span><span class="token assign-left variable">directory</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">pwd</span><span class="token variable">)</span></span><span class="token comment"># 循环运行指定范围的 trace 文件</span><span class="token keyword">for</span> <span class="token variable"><span class="token punctuation">((</span>i<span class="token operator">=</span>lower<span class="token punctuation">;</span> i<span class="token operator">&lt;=</span>upper<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">))</span></span><span class="token punctuation">;</span> <span class="token keyword">do</span>    <span class="token comment"># 补齐两位数格式（例如 01, 02, ..., 16）</span>    <span class="token assign-left variable">trace_num</span><span class="token operator">=</span><span class="token variable"><span class="token variable">$(</span><span class="token builtin class-name">printf</span> <span class="token string">"%02d"</span> $i<span class="token variable">)</span></span>    <span class="token comment"># 输出 make 样式的进入目录信息（仅第一次循环时）</span>    <span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token variable">$i</span> <span class="token parameter variable">-eq</span> <span class="token variable">$lower</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span>        <span class="token builtin class-name">echo</span> <span class="token string">"make[1]: Entering directory \`<span class="token variable">$directory</span>'"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$ref_output_file</span>"</span>        <span class="token builtin class-name">echo</span> <span class="token string">"make[1]: Entering directory \`<span class="token variable">$directory</span>'"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$tsh_output_file</span>"</span>    <span class="token keyword">fi</span>    <span class="token comment"># 为 tshref 输出添加分隔符和内容</span>    <span class="token builtin class-name">echo</span> <span class="token string">"===== Trace <span class="token variable">$trace_num</span> ====="</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$ref_output_file</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"./sdriver.pl -t trace<span class="token variable">$trace_num</span>.txt -s ./tshref -a <span class="token entity" title="\&quot;">\"</span>-p<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$ref_output_file</span>"</span>    <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token string">"trace<span class="token variable">$trace_num</span>.txt"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$ref_output_file</span>"</span>    ./sdriver.pl <span class="token parameter variable">-t</span> <span class="token string">"trace<span class="token variable">$trace_num</span>.txt"</span> <span class="token parameter variable">-s</span> ./tshref <span class="token parameter variable">-a</span> <span class="token string">"-p"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$ref_output_file</span>"</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>    <span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$ref_output_file</span>"</span>  <span class="token comment"># 添加空行作为间隔</span>    <span class="token comment"># 为 tsh 输出添加分隔符和内容</span>    <span class="token builtin class-name">echo</span> <span class="token string">"===== Trace <span class="token variable">$trace_num</span> ====="</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$tsh_output_file</span>"</span>    <span class="token builtin class-name">echo</span> <span class="token string">"./sdriver.pl -t trace<span class="token variable">$trace_num</span>.txt -s ./tsh -a <span class="token entity" title="\&quot;">\"</span>-p<span class="token entity" title="\&quot;">\"</span>"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$tsh_output_file</span>"</span>    <span class="token function">head</span> <span class="token parameter variable">-n</span> <span class="token number">1</span> <span class="token string">"trace<span class="token variable">$trace_num</span>.txt"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$tsh_output_file</span>"</span>    ./sdriver.pl <span class="token parameter variable">-t</span> <span class="token string">"trace<span class="token variable">$trace_num</span>.txt"</span> <span class="token parameter variable">-s</span> ./tsh <span class="token parameter variable">-a</span> <span class="token string">"-p"</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$tsh_output_file</span>"</span> <span class="token operator"><span class="token file-descriptor important">2</span>></span><span class="token file-descriptor important">&amp;1</span>    <span class="token builtin class-name">echo</span> <span class="token string">""</span> <span class="token operator">>></span> <span class="token string">"<span class="token variable">$tsh_output_file</span>"</span>  <span class="token comment"># 添加空行作为间隔</span><span class="token keyword">done</span><span class="token builtin class-name">echo</span> <span class="token string">"测试完成。参考实现结果已保存到 <span class="token variable">$ref_output_file</span>，学生实现结果已保存到 <span class="token variable">$tsh_output_file</span>"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="用法简述"><a href="#用法简述" class="headerlink" title="用法简述"></a>用法简述</h2><ol><li>保存脚本：<ul><li>将上述代码保存到一个文件，例如 <code>test_traces.sh</code>。</li></ul></li><li>赋予执行权限：<ul><li>在终端中运行以下命令，为脚本添加执行权限：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">chmod</span> +x test_traces.sh<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li><li>这一步是必须的，因为在 Linux/Unix 系统中，脚本默认没有执行权限，需要手动赋予。</li></ul></li><li>运行脚本：<ul><li>使用以下格式运行脚本：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./test_traces.sh lower upper<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><code>lower</code>：起始的 trace 文件编号（1-16）。</li><li><code>upper</code>：结束的 trace 文件编号（1-16）。</li></ul></li><li>示例：<pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">./test_traces.sh <span class="token number">1</span> <span class="token number">5</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>这将测试 <code>trace01.txt</code> 到 <code>trace05.txt</code>，并将结果分别保存到 <code>_tshref_output.txt</code> 和 <code>_tsh_output.txt</code>。</li></ul></li></ul></li><li>检查输出：<ul><li>测试完成后，比较 <code>_tshref_output.txt</code>（参考实现结果）和 <code>_tsh_output.txt</code>（学生实现结果）。</li><li>用各种编辑器自带的比较文件功能就能很方便的比较输出异同。</li></ul></li></ol><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>环境要求：确保当前目录下有 <code>sdriver.pl</code>、<code>tshref</code>、<code>tsh</code> 以及对应的 <code>traceXX.txt</code> 文件，否则脚本会报错。</li><li>覆盖输出：每次运行脚本时，输出文件（<code>_tshref_output.txt</code> 和 <code>_tsh_output.txt</code>）会被清空并重新生成。</li></ul>]]></content>
    
    
      
      
    <summary type="html">&lt;h1 id=&quot;写在前面&quot;&gt;&lt;a href=&quot;#写在前面&quot; class=&quot;headerlink&quot; title=&quot;写在前面&quot;&gt;&lt;/a&gt;写在前面&lt;/h1&gt;&lt;p&gt;用时 10h30min, 通过所有测试。这个 lab 还是比较直接的, 按着 trace 的顺序逐步实现即可, 难点主要在调</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="CMU-15-213" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/"/>
    
    <category term="Labs" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/Labs/"/>
    
    
  </entry>
  
  <entry>
    <title>第八章——异常控制流</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter8-exception-control-flow/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Notes/Chapter8-exception-control-flow/</id>
    <published>2025-03-31T03:26:01.000Z</published>
    <updated>2025-08-20T11:13:48.869Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 70%;}</style><p>当我们在程序执行时按下 ctrl+c ，究竟发生了什么？为解答这个问题，我们引入<strong>异常控制流</strong>（exceptional control flow，ECF）的概念。异常控制流允许我们将控制转移到其他程序，从而实现一些神奇的效果，比如中断程序、上下文切换、调用系统函数。</p><h1 id="异常"><a href="#异常" class="headerlink" title="异常"></a><strong>异常</strong></h1><p>异常是异常控制流的一种形式，分为四类：</p><div class="table-container"><table><thead><tr><th>类别</th><th>异步/同步</th><th>产生原因</th><th>例子</th></tr></thead><tbody><tr><td>中断（interrupt）</td><td>异步</td><td>外部事件</td><td>外部时钟（timer interrupt）</td></tr><tr><td>陷阱（trap）</td><td>同步</td><td>执行内部指令</td><td>系统调用（system calls）</td></tr><tr><td>故障（fault）</td><td>同步</td><td>执行内部指令</td><td>除以零</td></tr><tr><td>终止（abort）</td><td>同步</td><td>执行内部指令</td><td>硬件错误</td></tr></tbody></table></div><p><strong>注意：一定要检查系统调用的返回值，不然会出现一些很难调试的错误！</strong></p><p>异常发生后，控制会转移给异常处理程序。在处理完成后，根据异常的具体内容可能会返回到原程序的下一条指令，也可能返回到原程序的当前指令，也可能不返回。：</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter8/exception-control-shift.png" alt=""></p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a><strong>进程</strong></h1><h2 id="并发和上下文切换"><a href="#并发和上下文切换" class="headerlink" title="并发和上下文切换"></a>并发和上下文切换</h2><p>我们可以并发地执行多个进程，如下图所示：</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter8/concurrency.png" alt=""></p><p>但我们是怎么实现这种并发的呢？答案是上下文切换。下图展现了单核 CPU 的上下文切换，每个进程都有自己的上下文。</p><p>上下文切换的原因多种多样，举两个常见例子：用户可能执行系统调用而等待某个事件（比如用 waitpid 等待子进程终止），这时内核就可以让当前进程休眠并切换到另一个进程；系统每隔若干毫秒也会产生一次定时器中断的异常，并切换到新的进程。</p><p><img src="/images/learning/open-course/CMU-15213/Notes/Chapter8/content-change.png" alt=""></p><h2 id="进程的创建、终止和回收"><a href="#进程的创建、终止和回收" class="headerlink" title="进程的创建、终止和回收"></a>进程的创建、终止和回收</h2><p>我们可以用 fork 来创建一个当前进程的复制——它执行一次，返回两次，分别返回到父进程和父进程的子进程中。对父进程，它返回子进程的 pid；对子进程，它返回 0.</p><p>子进程在终止后不会自动被清楚，而是进入“僵死进程”状态，直到被父进程回收。如果父进程终止了，init 进程会成为它的孤儿进程的养父。很明显，这里有潜在的内存泄漏。那么，怎么回收子进程呢？</p><p>我们可以用 waitpid 来等待子进程终止，在 waitpid 返回后，这个终止的子进程会被回收。</p><p>我们可以用 execve 来加载并运行程序。execve 函数在当前进程的上下文中加载并运行一个新程序，只有在出现错误时，它才会返回到调用程序。注意，它并没有创建一个新进程，而是在当前进程的上下文中加载并运行新程序。</p><p>来看一个综合运用上面的东西的例子吧：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdlib.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;unistd.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;sys/wait.h></span></span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    pid_t pid<span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"fork failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>pid <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 子进程</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Child process (PID: %d) running...\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 execve 加载并运行 "ls" 程序</span>        <span class="token keyword">char</span> <span class="token operator">*</span>argv<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span> <span class="token comment">// 参数列表</span>        <span class="token keyword">char</span> <span class="token operator">*</span>envp<span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token constant">NULL</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>            <span class="token comment">// 环境变量列表</span>        <span class="token function">execve</span><span class="token punctuation">(</span><span class="token string">"/bin/ls"</span><span class="token punctuation">,</span> argv<span class="token punctuation">,</span> envp<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 如果 execve 返回，说明执行失败</span>        <span class="token function">perror</span><span class="token punctuation">(</span><span class="token string">"execve failed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span> <span class="token keyword">else</span> <span class="token punctuation">&#123;</span>        <span class="token comment">// 父进程</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Parent process (PID: %d), waiting for child (PID: %d)...\n"</span><span class="token punctuation">,</span> <span class="token function">getpid</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> pid<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment">// 使用 waitpid 等待子进程终止并回收</span>        <span class="token keyword">int</span> status<span class="token punctuation">;</span>        <span class="token function">waitpid</span><span class="token punctuation">(</span>pid<span class="token punctuation">,</span> <span class="token operator">&amp;</span>status<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 阻塞等待子进程 pid 结束</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">WIFEXITED</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"Child exited with status %d\n"</span><span class="token punctuation">,</span> <span class="token function">WEXITSTATUS</span><span class="token punctuation">(</span>status<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="信号"><a href="#信号" class="headerlink" title="信号"></a><strong>信号</strong></h1><p>信号允许内核异步通知目标进程发生了特定事件。</p><h2 id="发送和接收信号"><a href="#发送和接收信号" class="headerlink" title="发送和接收信号"></a>发送和接收信号</h2><p><strong>发送信号</strong><br>信号可以由内核自动生成，例如：</p><ul><li>当某个子进程的状态发生变化时（比如终止、暂停、恢复），内核会发送一个 <code>SIGCHLD</code> 信号给父进程；</li><li>当某个进程尝试除以 0 时，内核会发送一个 <code>SIGFPE</code> 信号给该进程。<br>此外，进程也可以通过 <code>kill</code> 函数手动请求内核向其他进程发送信号。</li></ul><p><strong>接收信号</strong><br>当内核将信号传递给目标进程，并迫使进程对此信号采取行动（例如执行信号处理程序或默认行为）时，进程就接收了该信号。需要注意的是，如果信号被阻塞或暂时未处理，它不会被视为“已接收”，而是进入待处理状态。</p><p>我们能用 <code>signal</code> 函数修改接收信号后的行为。</p><p><strong>未接收的信号会怎样？</strong><br>如果信号发出后未被立即接收，它会变成一个待处理信号。内核为每个进程维护一个表示待处理信号的位向量（pending signal bit vector），用以追踪有哪些信号尚未处理。由于信号不排队，同一时刻同一类型的待处理信号最多只有一个（即位向量中该位被置为 1）。如果某个类型已经有了待处理信号，被发送过来的同类信号会被简单地丢弃。此外，内核还为每个进程维护一个表示被阻塞信号的位向量（blocked signal bit vector），用来记录当前被屏蔽、不允许传递的信号。</p><h2 id="异步的风险"><a href="#异步的风险" class="headerlink" title="异步的风险"></a>异步的风险</h2><p>下面的例子很好地说明了异步的风险</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">"csapp.h"</span></span><span class="token keyword">volatile</span> sig_atomic_t pid<span class="token punctuation">;</span><span class="token keyword">void</span> <span class="token function">sigchld_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> olderrno <span class="token operator">=</span> errno<span class="token punctuation">;</span>    pid <span class="token operator">=</span> <span class="token function">waitpid</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在子进程终止后更新pid</span>    errno <span class="token operator">=</span> olderrno<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">sigint_handler</span><span class="token punctuation">(</span><span class="token keyword">int</span> s<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    sigset_t mask<span class="token punctuation">,</span> prev<span class="token punctuation">;</span>    <span class="token function">Signal</span><span class="token punctuation">(</span>SIGCHLD<span class="token punctuation">,</span> sigchld_handler<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 在子进程终止后更新pid</span>    <span class="token function">Signal</span><span class="token punctuation">(</span>SIGINT<span class="token punctuation">,</span> sigint_handler<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Sigemptyset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">Sigaddset</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> SIGCHLD<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token function">Sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Block SIGCHLD */</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* Child */</span>            <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* Parent */</span>        pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 我们 block 信号，这样即使子进程在这条语句前终止，pid也能正确更新</span>        <span class="token function">Sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Unblock SIGCHLD */</span>        <span class="token comment">/* Wait for SIGCHLD to be received (wasteful) */</span>        <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 潜在的竞争！</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">/* Do some work after receiving SIGCHLD */</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先来看看下面的局部代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token function">Sigprocmask</span><span class="token punctuation">(</span>SIG_BLOCK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>mask<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Block SIGCHLD */</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token function">Fork</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span> <span class="token comment">/* Child */</span>    <span class="token function">exit</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token comment">/* Parent */</span>pid <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token comment">// 我们 block 信号，这样即使子进程在这条语句前终止，pid也能正确更新</span><span class="token function">Sigprocmask</span><span class="token punctuation">(</span>SIG_SETMASK<span class="token punctuation">,</span> <span class="token operator">&amp;</span>prev<span class="token punctuation">,</span> <span class="token constant">NULL</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">/* Unblock SIGCHLD */</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如果不使用 block，而子进程在 pid=0 这条语句前终止，那么信号处理程序会先把 pid 设置为子进程 pid，然后 pid 被重置为 0，导致我们没能正确记录 pid。这就是<strong>阻塞信号</strong>的重要性。</p><p>再来看看这里：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">!</span>pid<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token function">pause</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 潜在的竞争！</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>我们的原意是在没有接收到信号时暂停，以避免空循环浪费处理器资源。具体来说，在收到子进程终止的信号后 pause 状态会结束，然后执行信号处理代码，然后进入下一个循环。</p><p>但这个 pause 带来了潜在的竞争。比如说，如果在 while 测试后和 pause 前收到信号，之后又没有别的信号，pause 就会进入永久睡眠。这就是<strong>竞争的风险</strong>。</p><p>对这个例子，解决办法是用 sigsuspend 替换 pause，我们不多说了。</p>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 70%;
}
&lt;/style&gt;

&lt;p&gt;当我们在程序执行时按下 ctrl+c ，究竟发生了什么？为解答这个问题，我们引入&lt;strong&gt;异常控制流&lt;/strong&gt;（exceptional control flow，ECF）的概念。</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="CMU-15-213" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/"/>
    
    <category term="Notes" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/Notes/"/>
    
    
  </entry>
  
  <entry>
    <title>Cachelab理论分析</title>
    <link href="http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Labs/Cachelab/"/>
    <id>http://rinevard.github.io/wiki/learning/open-course/CMU-15-213/Labs/Cachelab/</id>
    <published>2025-03-26T10:37:28.000Z</published>
    <updated>2025-08-20T11:13:48.877Z</updated>
    
    <content type="html"><![CDATA[<style>img{    width: 60%;}</style><p>先放一个最终结果在这里</p><p><img src="/images/learning/open-course/CMU-15213/Labs/Cachelab/result.png" alt=""></p><h1 id="Part-A-模拟-cache"><a href="#Part-A-模拟-cache" class="headerlink" title="Part A 模拟 cache"></a>Part A 模拟 cache</h1><p>用时 3h.</p><p>一开始因为 16 进制踩了坑。我第一个看的 trace 文件是 yi.trace，我把里面的地址当成了十进制，分析了半天总感觉不对，后来惊醒这是十六进制。</p><p>part A 不难，正常模拟一遍就好。由于 handout 里说，“you should assume that memory accesses are aligned properly, such that a single memory access never crosses block boundaries”，所以对每行记录，我们只要考虑其指令类型和地址即可，不必考虑操作大小。我使用了这样的数据结构：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> valid<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> lineTag<span class="token punctuation">;</span>    <span class="token keyword">int</span> lruCount<span class="token punctuation">;</span> <span class="token comment">// 记录上一次访问到现在的时间</span><span class="token punctuation">&#125;</span> CacheLine<span class="token punctuation">;</span><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token punctuation">&#123;</span>    CacheLine <span class="token operator">*</span>lines<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> CacheSet<span class="token punctuation">;</span>CacheSet <span class="token operator">*</span>sets <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span><span class="token operator">*</span> <span class="token keyword">sizeof</span><span class="token punctuation">(</span>CacheSet<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在核心循环里，对某个给定的 set，我们在遍历过程中从前往后填充每个 set 的 line，思路如下：</p><p>对每个地址，用位运算得到其 setIdx 和 tag，然后找到对应的 set，遍历里面的所有 line. 如果找到了空 line，直接填充进去；如果找到了对应的 tag，就 hit 了；如果没找到对应 tag，说明需要驱逐某个 line，找到 lru 最大的 line（即最久没有访问过的 line）并把它换掉即可。</p><p>注意正确更新遍历的 set 里的每个 line 的 lruCount.</p><p>用下面的位运算就能得到 setIdx 和 tag：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">unsigned</span> <span class="token keyword">long</span> mask <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>mask <span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span>mask <span class="token operator">&lt;&lt;</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">// 000...11 (s 个 1)</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> setIdx <span class="token operator">=</span> <span class="token punctuation">(</span>address <span class="token operator">>></span> b<span class="token punctuation">)</span> <span class="token operator">&amp;</span> mask<span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> tag <span class="token operator">=</span> address <span class="token operator">>></span> <span class="token punctuation">(</span>b <span class="token operator">+</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>还有一个小 trick 是可以用这样的写法来简化代码，毕竟我们并不关心操作在类型上的差异，只关心操作的地址：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">switch</span> <span class="token punctuation">(</span>operation<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">case</span> <span class="token char">'M'</span><span class="token operator">:</span>        <span class="token comment">// M = L + S, 其 'S' 总会命中</span>        hits<span class="token operator">++</span><span class="token punctuation">;</span>        <span class="token comment">// fall through</span>    <span class="token keyword">case</span> <span class="token char">'L'</span><span class="token operator">:</span>        <span class="token comment">// fall through</span>    <span class="token keyword">case</span> <span class="token char">'S'</span><span class="token operator">:</span>        <span class="token comment">// 真正的工作</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Part-B"><a href="#Part-B" class="headerlink" title="Part B"></a>Part B</h1><p>用时 7 h，拼尽全力也只能把 64x64 拿到 1411 miss，上网找了找别人的思路，最后得到了 1179 miss. 最后结果如下：</p><p>Points Max pts Misses<br>Trans perf 32x32 8.0 8 287<br>Trans perf 64x64 8.0 8 1179<br>Trans perf 61x67 10.0 10 1997</p><p>我参考的文章是这篇： <a href="https://zhuanlan.zhihu.com/p/387662272">CSAPP - Cache Lab 的更(最)优秀的解法 - 知乎</a>，作者直接拿到了 64x64 的理论最优解，非常强大。不过我没有在对角线上做微调，而是只参考了作者对一般块的读写顺序。</p><p>我的三个转置都没有特别考虑对角线的情况。一方面是因为嫌麻烦，另一方面是因为我觉得这种“两个内存块位置恰好差 2 的幂次导致缓存抖动”的事情太特殊，所以没额外处理。</p><h2 id="分块大小的确定"><a href="#分块大小的确定" class="headerlink" title="分块大小的确定"></a>分块大小的确定</h2><p>首先，分块优化是一定要做的。但分成多大的块呢？最朴素的想法是，我们希望块尽可能大来装满 cache，但不要太大以至于 cache 装不下。</p><p>我们有 $2^5 = 32$ 个 sets，每个 set 一个 line，每个 line 存 8 个 int，也就是说，我们最多能存 $32 \times 8 = 256 = 2^8$ 个 int. 我们希望同时把 A 的块和 B 的块放到 cache 中，两个块大小应当相同，所以每个块可以放 $256/2 = 128$ 个 int. 128 不是完全平方数，所以我们可以分块成 8x8.</p><h2 id="初版代码"><a href="#初版代码" class="headerlink" title="初版代码"></a>初版代码</h2><p>回到之前的 8x8 分块的讨论上来。总之，我写出了我的初版代码。思路就是分块，然后把 A 的块存到 tmp 数组里，然后复制到 B 里。为什么要用 tmp 做中转呢？答案是为了避免缓存冲突：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">transpose_submit</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> blockSize <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rowBlock<span class="token punctuation">,</span> colBlock<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token comment">// 向上取整, 计算出总 block 数.</span>    <span class="token comment">// 可能会含有不是正方形的 block</span>    <span class="token keyword">int</span> rowBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> blockSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> colBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>M <span class="token operator">+</span> blockSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp<span class="token punctuation">[</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">[</span>blockSize<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// cachelab不允许开数组</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>rowBlock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rowBlock <span class="token operator">&lt;</span> rowBlocks<span class="token punctuation">;</span> rowBlock<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>colBlock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> colBlock <span class="token operator">&lt;</span> colBlocks<span class="token punctuation">;</span> colBlock<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> rowBlock <span class="token operator">*</span> blockSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rowBlock <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blockSize <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>colBlock <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blockSize <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    tmp<span class="token punctuation">[</span>j <span class="token operator">-</span> colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> rowBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span> <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token punctuation">(</span>colBlock <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blockSize <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> rowBlock <span class="token operator">*</span> blockSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rowBlock <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blockSize <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                    B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp<span class="token punctuation">[</span>j <span class="token operator">-</span> colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">-</span> rowBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token punctuation">&#125;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果很不错：</p><p>Cache Lab summary:<br>Points Max pts Misses<br>Trans perf 32x32 8.0 8 261<br>Trans perf 64x64 8.0 8 1029<br>Trans perf 61x67 10.0 10 1725</p><p>正当我觉得 cachelab 不过如此的时候，忽然发现 handout 里写了不允许开数组（哈哈，你想得到的 cmu 老师想不到吗），于是被迫手动展开了 j 循环，使用 8 个变量来读取每行的值。这就得到了下面的结果：</p><p>Cache Lab summary:<br>Points Max pts Misses<br>Trans perf 32x32 8.0 8 287<br>Trans perf 64x64 0.0 8 4611<br>Trans perf 61x67 10.0 10 1997</p><p>也还算不错吧，毕竟 32x32 和 61x67 都满分了。唯一的问题是 64x64 的性能奇差无比。</p><h2 id="分析-64x64-矩阵的-miss-次数"><a href="#分析-64x64-矩阵的-miss-次数" class="headerlink" title="分析 64x64 矩阵的 miss 次数"></a>分析 64x64 矩阵的 miss 次数</h2><p>这时候就要理论分析了。对 64x64 的矩阵，按我们之前的做法，每个 8x8 的块大约发生了多少次 miss 呢？</p><p>答案是 72 次。A 提供了 8 次 miss，B 提供了 64 次 miss</p><p>验证一下结果对不对：64x64 的矩阵共有 64 个 8x8 的块，64 个块每个块 72 次 miss，总计约 $64 \times 72=4608$ 次 miss，和结果 4611 次 miss 相差无几。</p><p>这个 miss 是怎么算出来的呢？让我们看看下图：</p><p><img src="/images/learning/open-course/CMU-15213/Labs/Cachelab/64x64bad.png" alt=""></p><p>对 64x64 的矩阵来说，B[x][y] 和 B[x+4][y] 的 setIdx 相同，这就导致我们之前的方法不断驱逐旧 line. 定量地说，每读 A 的块的一行，大约是 1 个 miss，A 的块共有 8 行，所以 A 的每个块提供 8 次 miss；每对 B 的块写入一个值，都驱逐了一次旧 line（因为 B[x+4][y] 会驱逐 B[x][y]），所以 B 的每个块提供 64 次 miss.</p><p>之后的工作就是找到方法来避免这种驱逐了。</p><h2 id="对-64x64-矩阵的第一次优化——1699"><a href="#对-64x64-矩阵的第一次优化——1699" class="headerlink" title="对 64x64 矩阵的第一次优化——1699"></a>对 64x64 矩阵的第一次优化——1699</h2><p>一开始我的思路是直接用 4x4 的块，这确实有不小优化，但离满分还很远。读者可以试着做一个理论分析看看 4x4 的结果大概是多少 miss。我分析出来会得到 1536 个 miss，实际结果是 1699 个 miss，也差不多吧。</p><p>好吧，这个理论分析看起来值得详细讲解一下。不过在写之前，希望读者自己分析一下，看看得到的结果是不是 2048，并想想哪里出错了：</p><p>如果块的大小是 4x4，每个块发生 4 次 miss，每个矩阵 256 个块，一共 2048 次 miss，看起来很合理。但这是理论最优解，为什么理论最优（2048）比实际结果（1699）还差呢？难道说数学的大厦崩塌了？</p><p>并非如此。事实上，在我们把某个 4x4 的块放入 cache 时，我们也同时把它的右边的那个 4x4 的块放入了 cache。这是因为 cache 的每个 line 能装 8 个 int.</p><p>也就是说，我们可以认为我们实际上是在处理 4x8 的块。对每个 4x8 的块，A 提供了 4 次 miss，B 提供了 8 次 miss，总计 $64 <em> 4 + 64 </em> 8 = 1536$ 次 miss.</p><h2 id="对-64x64-矩阵的第二次优化——1411"><a href="#对-64x64-矩阵的第二次优化——1411" class="headerlink" title="对 64x64 矩阵的第二次优化——1411"></a>对 64x64 矩阵的第二次优化——1411</h2><p>分析了那么多，还是没拿到满分。我的后续思路是把 8x8 的块再分成四个小块，并按下面的顺序来写入 B：</p><p><img src="/images/learning/open-course/CMU-15213/Labs/Cachelab/64x64normal.png" alt=""></p><p>理论分析一下，把 A1 写入 B1 时，A miss 4 次，B miss 4 次；</p><p>把 A2 写入 B2 时，A miss 4 次，B 没有 miss（因为写入 B1 时把 B2 放进了 cache）；</p><p>把 A3 写入 B3 时，A 没有 miss，B miss 4 次；（因为读 A2 时把 A3 放入了 cache）；</p><p>把 A4 写入 B4 时，A miss 4 次，B 没有 miss（因为写入 B3 时把 B4 放进了 cache）</p><p>总计 20 次 miss，理论最优解 1280，实际结果 1411，我猜问题出在对角线上，我也懒得在这个基础上继续优化了。优化对角线这种事情看起来就很麻烦，而且感觉现实里几乎不会遇见这种情况。</p><h2 id="对-64x64-矩阵的第二次优化——1179"><a href="#对-64x64-矩阵的第二次优化——1179" class="headerlink" title="对 64x64 矩阵的第二次优化——1179"></a>对 64x64 矩阵的第二次优化——1179</h2><p>没什么好说的，直接看 <a href="https://zhuanlan.zhihu.com/p/387662272">CSAPP - Cache Lab 的更(最)优秀的解法 - 知乎</a> 和代码吧。这篇文章的作者拿到了 64x64 的理论最优解，非常强大。不过我没有在对角线上做微调，而是只参考了作者对一般块的读写顺序。</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">transpose_submit_64x64</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> blockSize <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> rowBlock<span class="token punctuation">,</span> colBlock<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token keyword">int</span> rowBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> blockSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> colBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>M <span class="token operator">+</span> blockSize <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockSize<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp0<span class="token punctuation">,</span> tmp1<span class="token punctuation">,</span> tmp2<span class="token punctuation">,</span> tmp3<span class="token punctuation">,</span> tmp4<span class="token punctuation">,</span> tmp5<span class="token punctuation">,</span> tmp6<span class="token punctuation">,</span> tmp7<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>rowBlock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rowBlock <span class="token operator">&lt;</span> rowBlocks<span class="token punctuation">;</span> rowBlock<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>colBlock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> colBlock <span class="token operator">&lt;</span> colBlocks<span class="token punctuation">;</span> colBlock<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">// A上</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> rowBlock <span class="token operator">*</span> blockSize<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 读取A的一行</span>                tmp0 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp1 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp2 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp3 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp4 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp5 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp6 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp7 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 填充B左上</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp0<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp3<span class="token punctuation">;</span>                <span class="token comment">// 填充B右上, 这一部分未来会被放到B左下</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp4<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp5<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp6<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp7<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// A左下, 注意这里按列遍历</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>j <span class="token operator">=</span> colBlock <span class="token operator">*</span> blockSize<span class="token punctuation">;</span> j <span class="token operator">&lt;</span> colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">&amp;&amp;</span> j <span class="token operator">&lt;</span> M<span class="token punctuation">;</span> j<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 读取 A 的左下小块的一列</span>                tmp0 <span class="token operator">=</span> A<span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp1 <span class="token operator">=</span> A<span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp2 <span class="token operator">=</span> A<span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp3 <span class="token operator">=</span> A<span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 读取 B 的右上小块的一行</span>                tmp4 <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp5 <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp6 <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp7 <span class="token operator">=</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 把从 A 左下读到的内容写到 B 右上</span>                B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp0<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp3<span class="token punctuation">;</span>                <span class="token comment">// 把 B 右上的内容写到 B 左下</span>                B<span class="token punctuation">[</span>j <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize<span class="token punctuation">]</span> <span class="token operator">=</span> tmp4<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>j <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp5<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>j <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp6<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>j <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> tmp7<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            <span class="token comment">// A右下</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> rowBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rowBlock <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blockSize <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 读取A的一行</span>                tmp0 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp1 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp2 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                tmp3 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 填充B</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp0<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">;</span>                B<span class="token punctuation">[</span>colBlock <span class="token operator">*</span> blockSize <span class="token operator">+</span> blockSize <span class="token operator">/</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp3<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="Future-work"><a href="#Future-work" class="headerlink" title="Future work"></a>Future work</h1><p>写文章的时候突然想到我们似乎可以分长方形的 16x8 的块，因为 $16<em>8</em>2 = 256$ 可以完全填满 cache. 简单写了下代码得到了下面的结果：</p><p>[16x8]<br>Points Max pts Misses<br>Trans perf 32x32 8.0 8 287<br>Trans perf 61x67 10.0 10 1811<br>看起来效果出乎意料地不错？甚至比我的 8x8 分块效果更好。这里没有放进来 64x64 转置的结果，因为我没有做分小块的优化。所以说，这种方法说不定还有不小探索空间？</p><p>下面是我的 8x8 分块的结果，可以用来和上面的结果做比较。两个代码都只用了简单的分块和 8 个 tmp 变量，没有额外优化。</p><p>[8x8]</p><p>Points Max pts Misses<br>Trans perf 32x32 8.0 8 287<br>Trans perf 61x67 10.0 10 1997</p><p>这里是我使用的 16x8 的分块代码：</p><pre class="line-numbers language-cpp" data-language="cpp"><code class="language-cpp"><span class="token keyword">void</span> <span class="token function">transpose_submit</span><span class="token punctuation">(</span><span class="token keyword">int</span> M<span class="token punctuation">,</span> <span class="token keyword">int</span> N<span class="token punctuation">,</span> <span class="token keyword">int</span> A<span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token keyword">int</span> B<span class="token punctuation">[</span>M<span class="token punctuation">]</span><span class="token punctuation">[</span>N<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> blockRow <span class="token operator">=</span> <span class="token number">16</span><span class="token punctuation">;</span>    <span class="token comment">// 块的行数</span>    <span class="token keyword">int</span> blockCol <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>   <span class="token comment">// 块的列数</span>    <span class="token keyword">int</span> rowBlock<span class="token punctuation">,</span> colBlock<span class="token punctuation">,</span> i<span class="token punctuation">,</span> j<span class="token punctuation">;</span>    <span class="token comment">// 向上取整, 计算出总 block 数</span>    <span class="token keyword">int</span> rowBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>N <span class="token operator">+</span> blockRow <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockRow<span class="token punctuation">;</span>    <span class="token keyword">int</span> colBlocks <span class="token operator">=</span> <span class="token punctuation">(</span>M <span class="token operator">+</span> blockCol <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">/</span> blockCol<span class="token punctuation">;</span>    <span class="token keyword">int</span> tmp0<span class="token punctuation">,</span> tmp1<span class="token punctuation">,</span> tmp2<span class="token punctuation">,</span> tmp3<span class="token punctuation">,</span> tmp4<span class="token punctuation">,</span> tmp5<span class="token punctuation">,</span> tmp6<span class="token punctuation">,</span> tmp7<span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>rowBlock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> rowBlock <span class="token operator">&lt;</span> rowBlocks<span class="token punctuation">;</span> rowBlock<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>colBlock <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> colBlock <span class="token operator">&lt;</span> colBlocks<span class="token punctuation">;</span> colBlock<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> rowBlock <span class="token operator">*</span> blockRow<span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token punctuation">(</span>rowBlock <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> blockRow <span class="token operator">&amp;&amp;</span> i <span class="token operator">&lt;</span> N<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>                <span class="token comment">// 展开j循环，每次处理8个元素</span>                j <span class="token operator">=</span> colBlock <span class="token operator">*</span> blockCol<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp0 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp1 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp2 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp3 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp4 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp5 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp6 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> tmp7 <span class="token operator">=</span> A<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                <span class="token comment">// 写入B矩阵</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp0<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp1<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp2<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp3<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp4<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp5<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp6<span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">&lt;</span> M<span class="token punctuation">)</span> B<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tmp7<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
    
    
      
      
    <summary type="html">&lt;style&gt;
img{
    width: 60%;
}
&lt;/style&gt;

&lt;p&gt;先放一个最终结果在这里&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/images/learning/open-course/CMU-15213/Labs/Cachelab/result.png&quot; al</summary>
      
    
    
    
    <category term="学习" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/"/>
    
    <category term="公开课" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/"/>
    
    <category term="CMU-15-213" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/"/>
    
    <category term="Labs" scheme="http://rinevard.github.io/categories/%E5%AD%A6%E4%B9%A0/%E5%85%AC%E5%BC%80%E8%AF%BE/CMU-15-213/Labs/"/>
    
    
  </entry>
  
</feed>
